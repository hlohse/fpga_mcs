
test1.elf:     file format elf32-microblazeel

SYMBOL TABLE:
00000000 l    d  .vectors.reset	00000000 .vectors.reset
00000008 l    d  .vectors.sw_exception	00000000 .vectors.sw_exception
00000010 l    d  .vectors.interrupt	00000000 .vectors.interrupt
00000020 l    d  .vectors.hw_exception	00000000 .vectors.hw_exception
00000050 l    d  .text	00000000 .text
00008884 l    d  .init	00000000 .init
000088c0 l    d  .fini	00000000 .fini
000088e0 l    d  .ctors	00000000 .ctors
000088e8 l    d  .dtors	00000000 .dtors
000088f0 l    d  .rodata	00000000 .rodata
0000907a l    d  .sdata2	00000000 .sdata2
00009080 l    d  .data	00000000 .data
00009280 l    d  .eh_frame	00000000 .eh_frame
00009284 l    d  .jcr	00000000 .jcr
00009288 l    d  .bss	00000000 .bss
000094b0 l    d  .heap	00000000 .heap
000098b0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000008 l       .vectors.sw_exception	00000000 _vector_sw_exception
00000010 l       .vectors.interrupt	00000000 _vector_interrupt
00000020 l       .vectors.hw_exception	00000000 _vector_hw_exception
00009080 l     O .data	00000000 force_to_data
000088e0 l     O .ctors	00000000 __CTOR_LIST__
000088e8 l     O .dtors	00000000 __DTOR_LIST__
00009280 l     O .eh_frame	00000000 __EH_FRAME_BEGIN__
00009284 l     O .jcr	00000000 __JCR_LIST__
00000084 l       .text	00000000 __do_global_dtors_aux
00009288 l     O .bss	00000001 completed.2337
0000928c l     O .bss	00000004 dtor_idx.2339
00000144 l       .text	00000000 frame_dummy
00009290 l     O .bss	00000018 object.2349
000092ac l     O .bss	00000004 toggle
000092b0 l     O .bss	00000004 dramInitialized
000092b4 l     O .bss	00000004 xgaMode
00009088 l     O .data	00000004 xpos
0000908c l     O .data	00000004 ypos
00009090 l     O .data	00000004 xdir
00009094 l     O .data	00000004 ydir
000092b8 l     O .bss	00000004 switches
000092bc l     O .bss	00000004 iomInitialized
000092c0 l     O .bss	00000004 vcnt.2535
000092c4 l     O .bss	00000004 hcnt.2536
000092c8 l     O .bss	00000004 loop.2534
000092cc l     O .bss	000000a4 IOModule
000024e0 l     F .text	00000078 padding
00002558 l     F .text	000001f8 outnum
00002ec0 l     F .text	00000058 StubHandler
00004d0c l     F .text	00000034 StubHandler
00009370 l     O .bss	00000004 XAssertCallbackRoutine
00009374 l     O .bss	00000004 Xil_AssertCallbackRoutine
000054a4 l     F .text	00000400 _fpadd_parts
00005e04 l     F .text	00000734 _fpadd_parts
00008ef4 l     O .rodata	00000180 _ctype_b
0000918c l     O .data	000000f0 impure_data
0000927c l     O .data	00000000 force_to_data
000088e4 l     O .ctors	00000000 __CTOR_END__
00009280 l     O .eh_frame	00000000 __FRAME_END__
00009284 l     O .jcr	00000000 __JCR_END__
00008838 l       .text	00000000 __do_global_ctors_aux
00004654 g     F .text	000000a4 XIOModule_IoReadByte
000090a8 g     O .data	000000dc XIOModule_ConfigTable
00008394 g     F .text	000000a8 __ashldi3
000088e0 g       .ctors	00000000 ___CTORS_LIST___
00008904 g     O .rodata	00000004 cyReg
000023f4 g     F .text	00000054 print
00009098 g     O .data	00000008 MB_InterruptVectorTable
00004f9c g     F .text	00000038 Xil_Assert
000088fc g     O .rodata	00000004 miscReg
00001454 g     F .text	00000584 mbrot
00008928 g     O .rodata	00000004 hcntXga
00002df8 g     F .text	0000001c XIOModule_LowLevelInterruptHandler
00008900 g     O .rodata	00000004 cxReg
00004068 g     F .text	000000e8 XIOModule_SetResetValue
00003038 g     F .text	00000120 XIOModule_Connect
00009288 g       .jcr	00000000 __sbss_start
00008924 g     O .rodata	00000004 vcnt720p
000058fc g     F .text	00000064 __subsf3
000019d8 g     F .text	000003c8 mbrotHw1
00005404 g     F .text	000000a0 XIOModule_ClearStats
00006d44 g     F .text	000001a0 __floatsidf
00004fe4 g     F .text	000000b8 XIOModule_SetOptions
00008920 g     O .rodata	00000004 vcntXga
00004d40 g     F .text	000000a4 XIOModule_CfgInitialize
00006cc4 g     F .text	00000080 __ltdf2
00009288 g       .jcr	00000000 __sdata_start
000088ec g     O .dtors	00000000 .hidden __DTOR_END__
0000907a g       .rodata	00000000 __rodata_end
00002f18 g     F .text	00000098 XIOModule_Start
00007074 g     F .text	000000a8 __udivsi3
00009080 g       .sdata2	00000000 __sbss2_end
00001da0 g     F .text	0000020c mbrotTest
00003350 g     F .text	000000e8 XIOModule_Disable
00003a50 g     F .text	00000100 XIOModule_Timer_Initialize
000094a8 g     O .bss	00000004 XAssertStatus
00009084 g     O .data	00000000 .hidden __dso_handle
00003e8c g     F .text	000000e8 XIOModule_Timer_Stop
00004810 g     F .text	0000008c XIOModule_IoWriteByte
000001a8 g     F .text	00000000 _crtinit
00003f74 g     F .text	000000f4 XIOModule_GetValue
00008930 g     O .rodata	00000004 MAXIT
00007e1c g     F .text	000003b8 __unpack_d
0000892c g     O .rodata	00000004 hcnt720p
00006538 g     F .text	00000070 __adddf3
000098b0 g       .heap	00000000 _heap_end
00009074 g     O .rodata	00000004 _global_impure_ptr
000094b0 g       .bss	00000000 __bss_end
00004bc8 g     F .text	00000144 XIOModule_SelfTest
00009288 g       .jcr	00000000 __tbss_start
0000891c g     O .rodata	00000004 xgaModeBit
00000258 g     F .text	00000048 sprint
00003da0 g     F .text	000000ec XIOModule_Timer_Start
00003510 g     F .text	00000024 XIOModule_LookupConfig
0000778c g     F .text	000001c8 __unpack_f
00003158 g     F .text	00000114 XIOModule_Disconnect
0000450c g     F .text	000000a0 XIOModule_IoReadWord
00008884 g       .init	00000000 __init
000090a4 g     O .data	00000004 Xil_AssertWait
000094b0 g       .heap	00000000 _heap_start
000046f8 g     F .text	0000008c XIOModule_IoWriteWord
00009288 g       .jcr	00000000 __sbss_end
00002fb0 g     F .text	00000088 XIOModule_Stop
00004330 g     F .text	000001dc XIOModule_IsExpired
00004238 g     F .text	000000f8 XIOModule_Reset
000082ec g     F .text	000000a8 __lshrdi3
00004f94 g     F .text	00000008 XNullHandler
00002cb4 g     F .text	00000014 microblaze_register_handler
000092a8 g     O .bss	00000004 simulation
00002750 g     F .text	000004a8 xil_printf
0000711c g     F .text	000000bc __umodsi3
00000000  w      *UND*	00000000 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
000074d8 g     F .text	000002b4 __pack_f
00004150 g     F .text	000000e8 XIOModule_GetCaptureValue
00002e14 g     F .text	00000028 XIOModule_SetIntrSvcOption
0000495c g     F .text	0000026c XIOModule_Timer_SelfTest
000088e0 g       .ctors	00000000 __CTOR_LIST__
00007454 g     F .text	00000084 __clzsi2
00009080 g       .sdata2	00000000 __sbss2_start
00008500 g     F .text	00000338 __call_exitprocs
00002368 g     F .text	0000008c IOModuleSelfTestExample
00008908 g     O .rodata	00000004 cnReg
00000000 g     F .vectors.reset	00000000 _start
000045ac g     F .text	000000a8 XIOModule_IoReadHalfword
000088f0 g       .rodata	00000000 __rodata_start
00008910 g     O .rodata	00000004 simStatBit
00005cd4 g     F .text	00000130 __floatsisf
00009288 g       *ABS*	00000000 _SDA_BASE_
0000489c g     F .text	000000c0 XIOModule_Intc_SelfTest
00009280 g       .data	00000000 __data_end
00002bf8 g       .text	00000000 _exception_handler
0000701c g     F .text	00000058 __mulsi3
0000509c g     F .text	000000a0 XIOModule_GetOptions
00003534 g     F .text	000001b4 XIOModule_ConnectFastHandler
00004784 g     F .text	0000008c XIOModule_IoWriteHalfword
000081d4 g     F .text	00000118 __fpcmp_parts_d
00006624 g     F .text	000006a0 __muldf3
00008ccc g     O .rodata	00000010 __thenan_sf
00002cc8 g     F .text	0000002c outbyte
00002cf4 g     F .text	00000104 XIOModule_DeviceInterruptHandler
00000000  w      *UND*	00000000 __sf_fake_stdin
000036e8 g     F .text	00000198 XIOModule_SetNormalIntrMode
00009288 g       .bss	00000000 __bss_start
00000800 g       *ABS*	00000000 _STACK_SIZE
00009288 g       .jcr	00000000 __tdata_start
00009288 g       .jcr	00000000 __tdata_end
0000945c g     O .bss	0000004c XIOModule_BitPosMask
00009378 g     O .bss	000000a4 iom
00002448 g     F .text	00000098 putnum
000002a0 g     F .text	000011b4 main
00000400 g       *ABS*	00000000 _HEAP_SIZE
00000050 g     F .text	00000000 _start1
0000396c g     F .text	000000e4 XIOModule_DiscreteWrite
00001fac g     F .text	000003bc mbColor
000098b0 g       .stack	00000000 _stack_end
000094ac g     O .bss	00000004 Xil_AssertStatus
00003438 g     F .text	000000d8 XIOModule_Acknowledge
00006ee4 g     F .text	0000009c __divsi3
00008cdc g     O .rodata	00000014 __thenan_df
00009288 g       .jcr	00000000 __sdata_end
00009080 g       .sdata2	00000000 __sdata2_start
000088e8 g       .ctors	00000000 __CTOR_END__
00005960 g     F .text	00000374 __mulsf3
00008918 g     O .rodata	00000004 calibration_stat_bit
000088e8 g       .dtors	00000000 ___DTORS_LIST___
000090a0 g     O .data	00000004 XWaitInAssert
000088e8 g       .dtors	00000000 __DTOR_LIST__
0000326c g     F .text	000000e4 XIOModule_Enable
00002e88 g     F .text	0000001c XIOModule_SendByte
00002e3c g     F .text	0000004c XIOModule_RegisterHandler
0000531c g     F .text	000000e8 XIOModule_GetStats
0000890c g     O .rodata	00000004 crReg
00008cf0 g     O .rodata	00000100 __clz_tab
000088c0 g       .fini	00000000 __fini
00009188 g     O .data	00000004 _impure_ptr
00009080 g       .sdata2	00000000 __sdata2_end
00002c10 g       .text	00000000 _interrupt_handler
00002ea4 g     F .text	0000001c XIOModule_RecvByte
000088e8 g       .ctors	00000000 ___CTORS_END___
0000941c g     O .bss	00000040 dbuf
00008914 g     O .rodata	00000004 doneStatBit
0000a0b0 g       .stack	00000000 __stack
000088f4 g     O .rodata	00000004 ctlReg
0000a0b0 g       *ABS*	00000000 _end
000094b0 g       .heap	00000000 _heap
00003880 g     F .text	000000ec XIOModule_DiscreteRead
0000843c g     F .text	00000040 exit
000088f8 g     O .rodata	00000004 statReg
00002c0c g       .text	00000000 _hw_exception_handler
00006f80 g     F .text	0000009c __modsi3
00009184 g     O .data	00000004 __ctype_ptr__
0000513c g     F .text	000000ec XIOModule_Timer_SetOptions
00003b50 g     F .text	00000250 XIOModule_Initialize
00009288 g       .jcr	00000000 __tbss_end
00005228 g     F .text	000000f4 XIOModel_Timer_GetOptions
00000000  w      *UND*	00000000 __sf_fake_stdout
00008df0 g     O .rodata	00000101 _ctype_
00002c04 g       .text	00000000 _program_init
00000080 g     F .text	00000000 _exit
000071d8 g     F .text	0000027c __muldi3
0000847c g     F .text	00000084 strlen
0000a0b0 g       .stack	00000000 _stack
00004de4 g     F .text	00000168 XIOModule_SetBaudRate
00004f4c g     F .text	00000038 XAssert
00004fd4 g     F .text	00000010 Xil_AssertSetCallback
00009080 g       .data	00000000 __data_start
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000065a8 g     F .text	0000007c __subdf3
00002bfc g       .text	00000000 _program_clean
00004f84 g     F .text	00000010 XAssertSetCallback
00009080 g       *ABS*	00000000 _SDA2_BASE_
00000000  w      *UND*	00000000 __register_frame_info
000058a4 g     F .text	00000058 __addsf3
000088f0 g     O .rodata	00000004 idReg
00007954 g     F .text	000004c8 __pack_d
00000000  w      *UND*	00000000 free
00002c10 g     F .text	000000a4 __interrupt_handler



Disassembly of section .vectors.reset:

00000000 <_start>:
   0:	b0000000 	imm	0
   4:	b8080050 	brai	80	// 50 <_start1>

Disassembly of section .vectors.sw_exception:

00000008 <_vector_sw_exception>:
   8:	b0000000 	imm	0
   c:	b8082bf8 	brai	11256	// 2bf8 <_exception_handler>

Disassembly of section .vectors.interrupt:

00000010 <_vector_interrupt>:
  10:	b0000000 	imm	0
  14:	b8082c10 	brai	11280	// 2c10 <__interrupt_handler>

Disassembly of section .vectors.hw_exception:

00000020 <_vector_hw_exception>:
  20:	b0000000 	imm	0
  24:	b8082c0c 	brai	11276	// 2c0c <_hw_exception_handler>

Disassembly of section .text:

00000050 <_start1>:
      50:	b0000000 	imm	0
      54:	31a09288 	addik	r13, r0, -28024	// 9288 <_SDA_BASE_>
      58:	b0000000 	imm	0
      5c:	30409080 	addik	r2, r0, -28544	// 9080 <_SDA2_BASE_>
      60:	b0000000 	imm	0
      64:	3020a0a0 	addik	r1, r0, -24416
      68:	b0000000 	imm	0
      6c:	b9f4013c 	brlid	r15, 316	// 1a8 <_crtinit>
      70:	80000000 	or	r0, r0, r0
      74:	b0000000 	imm	0
      78:	b9f483c4 	brlid	r15, -31804	// 843c <exit>
      7c:	30a30000 	addik	r5, r3, 0

00000080 <_exit>:
      80:	b8000000 	bri	0	// 80 <_exit>

00000084 <__do_global_dtors_aux>:
      84:	b0000000 	imm	0
      88:	e0609288 	lbui	r3, r0, -28024	// 9288 <_SDA_BASE_>
      8c:	3021ffe0 	addik	r1, r1, -32
      90:	f9e10000 	swi	r15, r1, 0
      94:	be2300a0 	bneid	r3, 160		// 134
      98:	fa61001c 	swi	r19, r1, 28
      9c:	b0000000 	imm	0
      a0:	308088e8 	addik	r4, r0, -30488	// 88e8 <__CTOR_END__>
      a4:	b0000000 	imm	0
      a8:	30a088ec 	addik	r5, r0, -30484	// 88ec <__DTOR_END__>
      ac:	b0000000 	imm	0
      b0:	e860928c 	lwi	r3, r0, -28020	// 928c <dtor_idx.2339>
      b4:	14842800 	rsubk	r4, r4, r5
      b8:	12602000 	addk	r19, r0, r4
      bc:	92640001 	sra	r19, r4
      c0:	92730001 	sra	r19, r19
      c4:	3273ffff 	addik	r19, r19, -1
      c8:	16531803 	cmpu	r18, r19, r3
      cc:	beb20040 	bgeid	r18, 64		// 10c
      d0:	30630001 	addik	r3, r3, 1
      d4:	10831800 	addk	r4, r3, r3
      d8:	10842000 	addk	r4, r4, r4
      dc:	b0000000 	imm	0
      e0:	308488e8 	addik	r4, r4, -30488
      e4:	e8840000 	lwi	r4, r4, 0
      e8:	b0000000 	imm	0
      ec:	f860928c 	swi	r3, r0, -28020	// 928c <dtor_idx.2339>
      f0:	99fc2000 	brald	r15, r4
      f4:	80000000 	or	r0, r0, r0
      f8:	b0000000 	imm	0
      fc:	e860928c 	lwi	r3, r0, -28020	// 928c <dtor_idx.2339>
     100:	16531803 	cmpu	r18, r19, r3
     104:	be52ffd0 	bltid	r18, -48		// d4
     108:	30630001 	addik	r3, r3, 1
     10c:	b0000000 	imm	0
     110:	30600000 	addik	r3, r0, 0
     114:	bc030014 	beqi	r3, 20		// 128
     118:	b0000000 	imm	0
     11c:	30a09280 	addik	r5, r0, -28032	// 9280 <__data_end>
     120:	99fc1800 	brald	r15, r3
     124:	80000000 	or	r0, r0, r0
     128:	30600001 	addik	r3, r0, 1
     12c:	b0000000 	imm	0
     130:	f0609288 	sbi	r3, r0, -28024	// 9288 <_SDA_BASE_>
     134:	e9e10000 	lwi	r15, r1, 0
     138:	ea61001c 	lwi	r19, r1, 28
     13c:	b60f0008 	rtsd	r15, 8
     140:	30210020 	addik	r1, r1, 32

00000144 <frame_dummy>:
     144:	b0000000 	imm	0
     148:	30600000 	addik	r3, r0, 0
     14c:	3021ffe4 	addik	r1, r1, -28
     150:	be030020 	beqid	r3, 32		// 170
     154:	f9e10000 	swi	r15, r1, 0
     158:	b0000000 	imm	0
     15c:	30a09280 	addik	r5, r0, -28032	// 9280 <__data_end>
     160:	b0000000 	imm	0
     164:	30c09290 	addik	r6, r0, -28016	// 9290 <object.2349>
     168:	99fc1800 	brald	r15, r3
     16c:	80000000 	or	r0, r0, r0
     170:	b0000000 	imm	0
     174:	e8609284 	lwi	r3, r0, -28028	// 9284 <__JCR_END__>
     178:	be030028 	beqid	r3, 40		// 1a0
     17c:	e9e10000 	lwi	r15, r1, 0
     180:	b0000000 	imm	0
     184:	30600000 	addik	r3, r0, 0
     188:	bc030018 	beqi	r3, 24		// 1a0
     18c:	b0000000 	imm	0
     190:	30a09284 	addik	r5, r0, -28028	// 9284 <__JCR_END__>
     194:	99fc1800 	brald	r15, r3
     198:	80000000 	or	r0, r0, r0
     19c:	e9e10000 	lwi	r15, r1, 0
     1a0:	b60f0008 	rtsd	r15, 8
     1a4:	3021001c 	addik	r1, r1, 28

000001a8 <_crtinit>:
     1a8:	2021ffec 	addi	r1, r1, -20
     1ac:	f9e10000 	swi	r15, r1, 0
     1b0:	b0000000 	imm	0
     1b4:	20c09288 	addi	r6, r0, -28024	// 9288 <_SDA_BASE_>
     1b8:	b0000000 	imm	0
     1bc:	20e09288 	addi	r7, r0, -28024	// 9288 <_SDA_BASE_>
     1c0:	06463800 	rsub	r18, r6, r7
     1c4:	bc720014 	blei	r18, 20		// 1d8
     1c8:	f8060000 	swi	r0, r6, 0
     1cc:	20c60004 	addi	r6, r6, 4
     1d0:	06463800 	rsub	r18, r6, r7
     1d4:	bc92fff4 	bgti	r18, -12		// 1c8
     1d8:	b0000000 	imm	0
     1dc:	20c09288 	addi	r6, r0, -28024	// 9288 <_SDA_BASE_>
     1e0:	b0000000 	imm	0
     1e4:	20e094b0 	addi	r7, r0, -27472	// 94b0 <__bss_end>
     1e8:	06463800 	rsub	r18, r6, r7
     1ec:	bc720014 	blei	r18, 20		// 200
     1f0:	f8060000 	swi	r0, r6, 0
     1f4:	20c60004 	addi	r6, r6, 4
     1f8:	06463800 	rsub	r18, r6, r7
     1fc:	bc92fff4 	bgti	r18, -12		// 1f0
     200:	b0000000 	imm	0
     204:	b9f42a00 	brlid	r15, 10752	// 2c04 <_program_init>
     208:	80000000 	or	r0, r0, r0
     20c:	b0000000 	imm	0
     210:	b9f48674 	brlid	r15, -31116	// 8884 <__init>
     214:	80000000 	or	r0, r0, r0
     218:	20c00000 	addi	r6, r0, 0
     21c:	20e00000 	addi	r7, r0, 0
     220:	b0000000 	imm	0
     224:	b9f4007c 	brlid	r15, 124	// 2a0 <main>
     228:	20a00000 	addi	r5, r0, 0
     22c:	32630000 	addik	r19, r3, 0
     230:	b0000000 	imm	0
     234:	b9f4868c 	brlid	r15, -31092	// 88c0 <__fini>
     238:	80000000 	or	r0, r0, r0
     23c:	b0000000 	imm	0
     240:	b9f429bc 	brlid	r15, 10684	// 2bfc <_program_clean>
     244:	80000000 	or	r0, r0, r0
     248:	c9e10000 	lw	r15, r1, r0
     24c:	30730000 	addik	r3, r19, 0
     250:	b60f0008 	rtsd	r15, 8
     254:	20210014 	addi	r1, r1, 20

00000258 <sprint>:

const int simStatBit = 31;

const int doneStatBit = 18;

void sprint(char* str) {if (!simulation) print(str);};
     258:	3021ffe0 	addik	r1, r1, -32
     25c:	f9e10000 	swi	r15, r1, 0
     260:	fa61001c 	swi	r19, r1, 28
     264:	12610000 	addk	r19, r1, r0
     268:	f8b30024 	swi	r5, r19, 36
     26c:	b0000000 	imm	0
     270:	e86092a8 	lwi	r3, r0, -27992	// 92a8 <simulation>
     274:	bc230014 	bnei	r3, 20		// 288
     278:	e8b30024 	lwi	r5, r19, 36
     27c:	b0000000 	imm	0
     280:	b9f42174 	brlid	r15, 8564	// 23f4 <print>
     284:	80000000 	or	r0, r0, r0
     288:	e9e10000 	lwi	r15, r1, 0
     28c:	10330000 	addk	r1, r19, r0
     290:	ea61001c 	lwi	r19, r1, 28
     294:	30210020 	addik	r1, r1, 32
     298:	b60f0008 	rtsd	r15, 8
     29c:	80000000 	or	r0, r0, r0

000002a0 <main>:

static int iomInitialized;
XIOModule iom;

int main() 
{
     2a0:	3021ffa8 	addik	r1, r1, -88
     2a4:	f9e10000 	swi	r15, r1, 0
     2a8:	fa61004c 	swi	r19, r1, 76
     2ac:	fac10050 	swi	r22, r1, 80
     2b0:	fae10054 	swi	r23, r1, 84
     2b4:	12610000 	addk	r19, r1, r0


   // pointer to iobus area
   volatile Xuint32 *ioBase = (volatile Xuint32 *)XPAR_IOMODULE_0_IO_BASEADDR;
     2b8:	b000c000 	imm	-16384
     2bc:	30600000 	addik	r3, r0, 0
     2c0:	f8730024 	swi	r3, r19, 36
   // size of iobus area
   int ioSize = XPAR_IOMODULE_0_IO_HIGHADDR - XPAR_IOMODULE_0_IO_BASEADDR + 1;
     2c4:	b0004000 	imm	16384
     2c8:	30600000 	addik	r3, r0, 0
     2cc:	f8730028 	swi	r3, r19, 40

   volatile Xuint32 *dramBase = (volatile Xuint32 *)(XPAR_IOMODULE_0_IO_BASEADDR + (1 << 29));
     2d0:	b000e000 	imm	-8192
     2d4:	30600000 	addik	r3, r0, 0
     2d8:	f873002c 	swi	r3, r19, 44

   static int vcnt;
   static int hcnt;

   // get simulation mode
   simulation = (ioBase[statReg] & (1 << simStatBit))?1:0;
     2dc:	b0000000 	imm	0
     2e0:	e86088f8 	lwi	r3, r0, -30472	// 88f8 <statReg>
     2e4:	10631800 	addk	r3, r3, r3
     2e8:	10631800 	addk	r3, r3, r3
     2ec:	e8930024 	lwi	r4, r19, 36
     2f0:	10641800 	addk	r3, r4, r3
     2f4:	e8830000 	lwi	r4, r3, 0
     2f8:	b0000000 	imm	0
     2fc:	e8a08910 	lwi	r5, r0, -30448	// 8910 <simStatBit>
     300:	30c00001 	addik	r6, r0, 1
     304:	a645001f 	andi	r18, r5, 31
     308:	10603000 	addk	r3, r0, r6
     30c:	be120014 	beqid	r18, 20		// 320
     310:	10630000 	addk	r3, r3, r0
     314:	3252ffff 	addik	r18, r18, -1
     318:	be32fffc 	bneid	r18, -4		// 314
     31c:	10631800 	addk	r3, r3, r3
     320:	84841800 	and	r4, r4, r3
     324:	14640000 	rsubk	r3, r4, r0
     328:	80632000 	or	r3, r3, r4
     32c:	10801800 	addk	r4, r0, r3
     330:	90830041 	srl	r4, r3
     334:	90840041 	srl	r4, r4
     338:	90840041 	srl	r4, r4
     33c:	90840041 	srl	r4, r4
     340:	90840041 	srl	r4, r4
     344:	90840041 	srl	r4, r4
     348:	90840041 	srl	r4, r4
     34c:	90840041 	srl	r4, r4
     350:	90840041 	srl	r4, r4
     354:	90840041 	srl	r4, r4
     358:	90840041 	srl	r4, r4
     35c:	90840041 	srl	r4, r4
     360:	90840041 	srl	r4, r4
     364:	90840041 	srl	r4, r4
     368:	90840041 	srl	r4, r4
     36c:	90840041 	srl	r4, r4
     370:	90840041 	srl	r4, r4
     374:	90840041 	srl	r4, r4
     378:	90840041 	srl	r4, r4
     37c:	90840041 	srl	r4, r4
     380:	90840041 	srl	r4, r4
     384:	90840041 	srl	r4, r4
     388:	90840041 	srl	r4, r4
     38c:	90840041 	srl	r4, r4
     390:	90840041 	srl	r4, r4
     394:	90840041 	srl	r4, r4
     398:	90840041 	srl	r4, r4
     39c:	90840041 	srl	r4, r4
     3a0:	90840041 	srl	r4, r4
     3a4:	90840041 	srl	r4, r4
     3a8:	90840041 	srl	r4, r4
     3ac:	f8930048 	swi	r4, r19, 72
     3b0:	e8730048 	lwi	r3, r19, 72
     3b4:	b0000000 	imm	0
     3b8:	f86092a8 	swi	r3, r0, -27992	// 92a8 <simulation>
   xgaMode = (ioBase[statReg] & (1 << xgaModeBit))?1:0;
     3bc:	b0000000 	imm	0
     3c0:	e86088f8 	lwi	r3, r0, -30472	// 88f8 <statReg>
     3c4:	10631800 	addk	r3, r3, r3
     3c8:	10631800 	addk	r3, r3, r3
     3cc:	e8930024 	lwi	r4, r19, 36
     3d0:	10641800 	addk	r3, r4, r3
     3d4:	e8830000 	lwi	r4, r3, 0
     3d8:	b0000000 	imm	0
     3dc:	e8a0891c 	lwi	r5, r0, -30436	// 891c <xgaModeBit>
     3e0:	30c00001 	addik	r6, r0, 1
     3e4:	a645001f 	andi	r18, r5, 31
     3e8:	10603000 	addk	r3, r0, r6
     3ec:	be120014 	beqid	r18, 20	// 400 <_HEAP_SIZE>
     3f0:	10630000 	addk	r3, r3, r0
     3f4:	3252ffff 	addik	r18, r18, -1
     3f8:	be32fffc 	bneid	r18, -4		// 3f4
     3fc:	10631800 	addk	r3, r3, r3
     400:	84841800 	and	r4, r4, r3
     404:	14640000 	rsubk	r3, r4, r0
     408:	80632000 	or	r3, r3, r4
     40c:	10801800 	addk	r4, r0, r3
     410:	90830041 	srl	r4, r3
     414:	90840041 	srl	r4, r4
     418:	90840041 	srl	r4, r4
     41c:	90840041 	srl	r4, r4
     420:	90840041 	srl	r4, r4
     424:	90840041 	srl	r4, r4
     428:	90840041 	srl	r4, r4
     42c:	90840041 	srl	r4, r4
     430:	90840041 	srl	r4, r4
     434:	90840041 	srl	r4, r4
     438:	90840041 	srl	r4, r4
     43c:	90840041 	srl	r4, r4
     440:	90840041 	srl	r4, r4
     444:	90840041 	srl	r4, r4
     448:	90840041 	srl	r4, r4
     44c:	90840041 	srl	r4, r4
     450:	90840041 	srl	r4, r4
     454:	90840041 	srl	r4, r4
     458:	90840041 	srl	r4, r4
     45c:	90840041 	srl	r4, r4
     460:	90840041 	srl	r4, r4
     464:	90840041 	srl	r4, r4
     468:	90840041 	srl	r4, r4
     46c:	90840041 	srl	r4, r4
     470:	90840041 	srl	r4, r4
     474:	90840041 	srl	r4, r4
     478:	90840041 	srl	r4, r4
     47c:	90840041 	srl	r4, r4
     480:	90840041 	srl	r4, r4
     484:	90840041 	srl	r4, r4
     488:	90840041 	srl	r4, r4
     48c:	f8930048 	swi	r4, r19, 72
     490:	e8730048 	lwi	r3, r19, 72
     494:	b0000000 	imm	0
     498:	f86092b4 	swi	r3, r0, -27980	// 92b4 <xgaMode>

   vcnt = xgaMode?vcntXga:vcnt720p;
     49c:	b0000000 	imm	0
     4a0:	e86092b4 	lwi	r3, r0, -27980	// 92b4 <xgaMode>
     4a4:	bc030010 	beqi	r3, 16		// 4b4
     4a8:	b0000000 	imm	0
     4ac:	e8608920 	lwi	r3, r0, -30432	// 8920 <vcntXga>
     4b0:	b800000c 	bri	12		// 4bc
     4b4:	b0000000 	imm	0
     4b8:	e8608924 	lwi	r3, r0, -30428	// 8924 <vcnt720p>
     4bc:	b0000000 	imm	0
     4c0:	f86092c0 	swi	r3, r0, -27968	// 92c0 <vcnt.2535>
   hcnt = xgaMode?hcntXga:hcnt720p;
     4c4:	b0000000 	imm	0
     4c8:	e86092b4 	lwi	r3, r0, -27980	// 92b4 <xgaMode>
     4cc:	bc030010 	beqi	r3, 16		// 4dc
     4d0:	b0000000 	imm	0
     4d4:	e8608928 	lwi	r3, r0, -30424	// 8928 <hcntXga>
     4d8:	b800000c 	bri	12		// 4e4
     4dc:	b0000000 	imm	0
     4e0:	e860892c 	lwi	r3, r0, -30420	// 892c <hcnt720p>
     4e4:	b0000000 	imm	0
     4e8:	f86092c4 	swi	r3, r0, -27964	// 92c4 <hcnt.2536>


   toggle = 0;
     4ec:	b0000000 	imm	0
     4f0:	f80092ac 	swi	r0, r0, -27988	// 92ac <toggle>
   dramInitialized = 0;
     4f4:	b0000000 	imm	0
     4f8:	f80092b0 	swi	r0, r0, -27984	// 92b0 <dramInitialized>

   xpos = 500;
     4fc:	306001f4 	addik	r3, r0, 500
     500:	b0000000 	imm	0
     504:	f8609088 	swi	r3, r0, -28536	// 9088 <xpos>
   ypos = 500;
     508:	306001f4 	addik	r3, r0, 500
     50c:	b0000000 	imm	0
     510:	f860908c 	swi	r3, r0, -28532	// 908c <ypos>
   xdir = 1;
     514:	30600001 	addik	r3, r0, 1
     518:	b0000000 	imm	0
     51c:	f8609090 	swi	r3, r0, -28528	// 9090 <xdir>
   ydir =1;
     520:	30600001 	addik	r3, r0, 1
     524:	b0000000 	imm	0
     528:	f8609094 	swi	r3, r0, -28524	// 9094 <ydir>

   iomInitialized = 0;
     52c:	b0000000 	imm	0
     530:	f80092bc 	swi	r0, r0, -27972	// 92bc <iomInitialized>

   while(1){
	   sprint("---Entering main---\n\r");
     534:	b0000000 	imm	0
     538:	30a08934 	addik	r5, r0, -30412
     53c:	b9f4fd1c 	brlid	r15, -740	// 258 <sprint>
     540:	80000000 	or	r0, r0, r0

	   // test iobus
	   {
		   if (!simulation){
     544:	b0000000 	imm	0
     548:	e86092a8 	lwi	r3, r0, -27992	// 92a8 <simulation>
     54c:	bc230094 	bnei	r3, 148		// 5e0
			   print("---Design ID: ");
     550:	b0000000 	imm	0
     554:	30a0894c 	addik	r5, r0, -30388
     558:	b0000000 	imm	0
     55c:	b9f41e98 	brlid	r15, 7832	// 23f4 <print>
     560:	80000000 	or	r0, r0, r0
			   putnum(ioBase[idReg]);
     564:	b0000000 	imm	0
     568:	e86088f0 	lwi	r3, r0, -30480	// 88f0 <__rodata_start>
     56c:	10631800 	addk	r3, r3, r3
     570:	10631800 	addk	r3, r3, r3
     574:	e8930024 	lwi	r4, r19, 36
     578:	10641800 	addk	r3, r4, r3
     57c:	e8630000 	lwi	r3, r3, 0
     580:	10a30000 	addk	r5, r3, r0
     584:	b0000000 	imm	0
     588:	b9f41ec0 	brlid	r15, 7872	// 2448 <putnum>
     58c:	80000000 	or	r0, r0, r0
			   print("\n\r");
     590:	b0000000 	imm	0
     594:	30a0895c 	addik	r5, r0, -30372
     598:	b0000000 	imm	0
     59c:	b9f41e58 	brlid	r15, 7768	// 23f4 <print>
     5a0:	80000000 	or	r0, r0, r0
			   print("---Testing IOBUS---\n\r");
     5a4:	b0000000 	imm	0
     5a8:	30a08960 	addik	r5, r0, -30368
     5ac:	b0000000 	imm	0
     5b0:	b9f41e44 	brlid	r15, 7748	// 23f4 <print>
     5b4:	80000000 	or	r0, r0, r0
			   putnum(loop++);
     5b8:	b0000000 	imm	0
     5bc:	e86092c8 	lwi	r3, r0, -27960	// 92c8 <loop.2534>
     5c0:	10830000 	addk	r4, r3, r0
     5c4:	30630001 	addik	r3, r3, 1
     5c8:	b0000000 	imm	0
     5cc:	f86092c8 	swi	r3, r0, -27960	// 92c8 <loop.2534>
     5d0:	10a40000 	addk	r5, r4, r0
     5d4:	b0000000 	imm	0
     5d8:	b9f41e70 	brlid	r15, 7792	// 2448 <putnum>
     5dc:	80000000 	or	r0, r0, r0
		   }


		   Xuint32 id =  ioBase[0];
     5e0:	e8730024 	lwi	r3, r19, 36
     5e4:	e8630000 	lwi	r3, r3, 0
     5e8:	f8730030 	swi	r3, r19, 48
		   ioBase[miscReg] = (ioBase[miscReg] ^ 1) << 1;
     5ec:	b0000000 	imm	0
     5f0:	e86088fc 	lwi	r3, r0, -30468	// 88fc <miscReg>
     5f4:	10631800 	addk	r3, r3, r3
     5f8:	10631800 	addk	r3, r3, r3
     5fc:	e8930024 	lwi	r4, r19, 36
     600:	10841800 	addk	r4, r4, r3
     604:	b0000000 	imm	0
     608:	e86088fc 	lwi	r3, r0, -30468	// 88fc <miscReg>
     60c:	10631800 	addk	r3, r3, r3
     610:	10631800 	addk	r3, r3, r3
     614:	e8b30024 	lwi	r5, r19, 36
     618:	10651800 	addk	r3, r5, r3
     61c:	e8630000 	lwi	r3, r3, 0
     620:	a8630001 	xori	r3, r3, 1
     624:	10631800 	addk	r3, r3, r3
     628:	f8640000 	swi	r3, r4, 0

		   ioBase[ctlReg] = ~(ioBase[ctlReg]);
     62c:	b0000000 	imm	0
     630:	e86088f4 	lwi	r3, r0, -30476	// 88f4 <ctlReg>
     634:	10631800 	addk	r3, r3, r3
     638:	10631800 	addk	r3, r3, r3
     63c:	e8930024 	lwi	r4, r19, 36
     640:	10841800 	addk	r4, r4, r3
     644:	b0000000 	imm	0
     648:	e86088f4 	lwi	r3, r0, -30476	// 88f4 <ctlReg>
     64c:	10631800 	addk	r3, r3, r3
     650:	10631800 	addk	r3, r3, r3
     654:	e8b30024 	lwi	r5, r19, 36
     658:	10651800 	addk	r3, r5, r3
     65c:	e8630000 	lwi	r3, r3, 0
     660:	a863ffff 	xori	r3, r3, -1
     664:	f8640000 	swi	r3, r4, 0

		   }

		   {
			   // initialize iom
			   if (0 == iomInitialized) {
     668:	b0000000 	imm	0
     66c:	e86092bc 	lwi	r3, r0, -27972	// 92bc <iomInitialized>
     670:	bc230028 	bnei	r3, 40		// 698
				   iomInitialized = 1;
     674:	30600001 	addik	r3, r0, 1
     678:	b0000000 	imm	0
     67c:	f86092bc 	swi	r3, r0, -27972	// 92bc <iomInitialized>
				   XIOModule_Initialize(&iom , XPAR_IOMODULE_0_DEVICE_ID);
     680:	b0000000 	imm	0
     684:	30a09378 	addik	r5, r0, -27784	// 9378 <iom>
     688:	10c00000 	addk	r6, r0, r0
     68c:	b0000000 	imm	0
     690:	b9f434c0 	brlid	r15, 13504	// 3b50 <XIOModule_Initialize>
     694:	80000000 	or	r0, r0, r0
			   }
			   XIOModule_DiscreteWrite(&iom, 1, toggle? 0xf0 : 0x0f);
     698:	b0000000 	imm	0
     69c:	e86092ac 	lwi	r3, r0, -27988	// 92ac <toggle>
     6a0:	bc03000c 	beqi	r3, 12		// 6ac
     6a4:	306000f0 	addik	r3, r0, 240
     6a8:	b8000008 	bri	8		// 6b0
     6ac:	3060000f 	addik	r3, r0, 15
     6b0:	b0000000 	imm	0
     6b4:	30a09378 	addik	r5, r0, -27784	// 9378 <iom>
     6b8:	30c00001 	addik	r6, r0, 1
     6bc:	10e30000 	addk	r7, r3, r0
     6c0:	b0000000 	imm	0
     6c4:	b9f432a8 	brlid	r15, 12968	// 396c <XIOModule_DiscreteWrite>
     6c8:	80000000 	or	r0, r0, r0
			   switches = XIOModule_DiscreteRead(&iom, 1);
     6cc:	b0000000 	imm	0
     6d0:	30a09378 	addik	r5, r0, -27784	// 9378 <iom>
     6d4:	30c00001 	addik	r6, r0, 1
     6d8:	b0000000 	imm	0
     6dc:	b9f431a4 	brlid	r15, 12708	// 3880 <XIOModule_DiscreteRead>
     6e0:	80000000 	or	r0, r0, r0
     6e4:	b0000000 	imm	0
     6e8:	f86092b8 	swi	r3, r0, -27976	// 92b8 <switches>
		   }

		   {
			   int i,j;
			   int frameIdx = 0;
     6ec:	f8130034 	swi	r0, r19, 52
			   // const int blue = 0x11, red = 0x0, green = 0xf0;
			   // const int blue = 0xff, red = 0x0, green = 0x0;
			   // blue is lowest byte(0..7), green is miggle byte (8..15), red ist highest byte (16..23). MSB (23..31) is unused
			   // int blue = 0x0, red = 0x0, green = 0x0ff;
			   int blue = 0x45, red = 0x67, green = 0x89;
     6f0:	30600045 	addik	r3, r0, 69
     6f4:	f8730038 	swi	r3, r19, 56
     6f8:	30600067 	addik	r3, r0, 103
     6fc:	f873003c 	swi	r3, r19, 60
     700:	30600089 	addik	r3, r0, 137
     704:	f8730040 	swi	r3, r19, 64

			   if (switches & 0x10) {
     708:	b0000000 	imm	0
     70c:	e86092b8 	lwi	r3, r0, -27976	// 92b8 <switches>
     710:	a4630010 	andi	r3, r3, 16
     714:	bc030098 	beqi	r3, 152		// 7ac
				   for (i = 0; i< vcnt * hcnt; i++) {
     718:	f813001c 	swi	r0, r19, 28
     71c:	b800005c 	bri	92		// 778
						  // dramBase[frameIdx + i] = toggle? (~i) & 0xff : i & 0xff;
						  dramBase[frameIdx + i] = toggle? 0xff00 | (~i) & 0xff : i & 0xff;
     720:	e8930034 	lwi	r4, r19, 52
     724:	e873001c 	lwi	r3, r19, 28
     728:	10641800 	addk	r3, r4, r3
     72c:	10631800 	addk	r3, r3, r3
     730:	10631800 	addk	r3, r3, r3
     734:	e893002c 	lwi	r4, r19, 44
     738:	10841800 	addk	r4, r4, r3
     73c:	b0000000 	imm	0
     740:	e86092ac 	lwi	r3, r0, -27988	// 92ac <toggle>
     744:	bc03001c 	beqi	r3, 28		// 760
     748:	e873001c 	lwi	r3, r19, 28
     74c:	a863ffff 	xori	r3, r3, -1
     750:	a46300ff 	andi	r3, r3, 255
     754:	b0000000 	imm	0
     758:	a063ff00 	ori	r3, r3, -256
     75c:	b800000c 	bri	12		// 768
     760:	e873001c 	lwi	r3, r19, 28
     764:	a46300ff 	andi	r3, r3, 255
     768:	f8640000 	swi	r3, r4, 0
			   // blue is lowest byte(0..7), green is miggle byte (8..15), red ist highest byte (16..23). MSB (23..31) is unused
			   // int blue = 0x0, red = 0x0, green = 0x0ff;
			   int blue = 0x45, red = 0x67, green = 0x89;

			   if (switches & 0x10) {
				   for (i = 0; i< vcnt * hcnt; i++) {
     76c:	e873001c 	lwi	r3, r19, 28
     770:	30630001 	addik	r3, r3, 1
     774:	f873001c 	swi	r3, r19, 28
     778:	b0000000 	imm	0
     77c:	e88092c0 	lwi	r4, r0, -27968	// 92c0 <vcnt.2535>
     780:	b0000000 	imm	0
     784:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     788:	10a40000 	addk	r5, r4, r0
     78c:	10c30000 	addk	r6, r3, r0
     790:	b0000000 	imm	0
     794:	b9f46888 	brlid	r15, 26760	// 701c <__mulsi3>
     798:	80000000 	or	r0, r0, r0
     79c:	10830000 	addk	r4, r3, r0
     7a0:	e873001c 	lwi	r3, r19, 28
     7a4:	16441801 	cmp	r18, r4, r3
     7a8:	bc52ff78 	blti	r18, -136		// 720
						  //putnum(i & 0xff);
				   }
			   }


			   if (0 == dramInitialized) {
     7ac:	b0000000 	imm	0
     7b0:	e86092b0 	lwi	r3, r0, -27984	// 92b0 <dramInitialized>
     7b4:	bc230964 	bnei	r3, 2404		// 1118
				   while (0 == (ioBase[statReg] & (1 << calibration_stat_bit))){
     7b8:	b8000014 	bri	20		// 7cc
					   sprint("---Wait for DRAM calibration---\n\r");
     7bc:	b0000000 	imm	0
     7c0:	30a08978 	addik	r5, r0, -30344
     7c4:	b9f4fa94 	brlid	r15, -1388	// 258 <sprint>
     7c8:	80000000 	or	r0, r0, r0
				   }
			   }


			   if (0 == dramInitialized) {
				   while (0 == (ioBase[statReg] & (1 << calibration_stat_bit))){
     7cc:	b0000000 	imm	0
     7d0:	e86088f8 	lwi	r3, r0, -30472	// 88f8 <statReg>
     7d4:	10631800 	addk	r3, r3, r3
     7d8:	10631800 	addk	r3, r3, r3
     7dc:	e8930024 	lwi	r4, r19, 36
     7e0:	10641800 	addk	r3, r4, r3
     7e4:	e8830000 	lwi	r4, r3, 0
     7e8:	b0000000 	imm	0
     7ec:	e8a08918 	lwi	r5, r0, -30440	// 8918 <calibration_stat_bit>
     7f0:	30c00001 	addik	r6, r0, 1
     7f4:	a645001f 	andi	r18, r5, 31
     7f8:	10603000 	addk	r3, r0, r6
     7fc:	be120014 	beqid	r18, 20		// 810
     800:	10630000 	addk	r3, r3, r0
     804:	3252ffff 	addik	r18, r18, -1
     808:	be32fffc 	bneid	r18, -4		// 804
     80c:	10631800 	addk	r3, r3, r3
     810:	84641800 	and	r3, r4, r3
     814:	bc03ffa8 	beqi	r3, -88		// 7bc
					   sprint("---Wait for DRAM calibration---\n\r");
				   }
				   dramInitialized = 1;
     818:	30600001 	addik	r3, r0, 1
     81c:	b0000000 	imm	0
     820:	f86092b0 	swi	r3, r0, -27984	// 92b0 <dramInitialized>
				   sprint("---Init DRAM ---\n\r");
     824:	b0000000 	imm	0
     828:	30a0899c 	addik	r5, r0, -30308
     82c:	b9f4fa2c 	brlid	r15, -1492	// 258 <sprint>
     830:	80000000 	or	r0, r0, r0
				   if (xgaMode)
     834:	b0000000 	imm	0
     838:	e86092b4 	lwi	r3, r0, -27980	// 92b4 <xgaMode>
     83c:	bc030018 	beqi	r3, 24		// 854
					   sprint("XGA\r\n");
     840:	b0000000 	imm	0
     844:	30a089b0 	addik	r5, r0, -30288
     848:	b9f4fa10 	brlid	r15, -1520	// 258 <sprint>
     84c:	80000000 	or	r0, r0, r0
     850:	b8000014 	bri	20		// 864
				   else
					   sprint("720p\r\n");
     854:	b0000000 	imm	0
     858:	30a089b8 	addik	r5, r0, -30280
     85c:	b9f4f9fc 	brlid	r15, -1540	// 258 <sprint>
     860:	80000000 	or	r0, r0, r0

				   if (!simulation){
     864:	b0000000 	imm	0
     868:	e86092a8 	lwi	r3, r0, -27992	// 92a8 <simulation>
     86c:	bc230034 	bnei	r3, 52		// 8a0
					   putnum(vcnt);
     870:	b0000000 	imm	0
     874:	e86092c0 	lwi	r3, r0, -27968	// 92c0 <vcnt.2535>
     878:	10a30000 	addk	r5, r3, r0
     87c:	b0000000 	imm	0
     880:	b9f41bc8 	brlid	r15, 7112	// 2448 <putnum>
     884:	80000000 	or	r0, r0, r0
					   putnum(hcnt);
     888:	b0000000 	imm	0
     88c:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     890:	10a30000 	addk	r5, r3, r0
     894:	b0000000 	imm	0
     898:	b9f41bb0 	brlid	r15, 7088	// 2448 <putnum>
     89c:	80000000 	or	r0, r0, r0
				   }

				    if (!simulation){
     8a0:	b0000000 	imm	0
     8a4:	e86092a8 	lwi	r3, r0, -27992	// 92a8 <simulation>
     8a8:	bc23001c 	bnei	r3, 28		// 8c4
				    	xil_printf("base pointer: 0x%x\r\n",dramBase);
     8ac:	b0000000 	imm	0
     8b0:	30a089c0 	addik	r5, r0, -30272
     8b4:	e8d3002c 	lwi	r6, r19, 44
     8b8:	b0000000 	imm	0
     8bc:	b9f41e94 	brlid	r15, 7828	// 2750 <xil_printf>
     8c0:	80000000 	or	r0, r0, r0
				    }

				   for (i = 0; i< vcnt * hcnt; i++) {
     8c4:	f813001c 	swi	r0, r19, 28
     8c8:	b8000030 	bri	48		// 8f8
					  dramBase[frameIdx + i] = 0;
     8cc:	e8930034 	lwi	r4, r19, 52
     8d0:	e873001c 	lwi	r3, r19, 28
     8d4:	10641800 	addk	r3, r4, r3
     8d8:	10631800 	addk	r3, r3, r3
     8dc:	10631800 	addk	r3, r3, r3
     8e0:	e893002c 	lwi	r4, r19, 44
     8e4:	10641800 	addk	r3, r4, r3
     8e8:	f8030000 	swi	r0, r3, 0

				    if (!simulation){
				    	xil_printf("base pointer: 0x%x\r\n",dramBase);
				    }

				   for (i = 0; i< vcnt * hcnt; i++) {
     8ec:	e873001c 	lwi	r3, r19, 28
     8f0:	30630001 	addik	r3, r3, 1
     8f4:	f873001c 	swi	r3, r19, 28
     8f8:	b0000000 	imm	0
     8fc:	e88092c0 	lwi	r4, r0, -27968	// 92c0 <vcnt.2535>
     900:	b0000000 	imm	0
     904:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     908:	10a40000 	addk	r5, r4, r0
     90c:	10c30000 	addk	r6, r3, r0
     910:	b0000000 	imm	0
     914:	b9f46708 	brlid	r15, 26376	// 701c <__mulsi3>
     918:	80000000 	or	r0, r0, r0
     91c:	10830000 	addk	r4, r3, r0
     920:	e873001c 	lwi	r3, r19, 28
     924:	16441801 	cmp	r18, r4, r3
     928:	bc52ffa4 	blti	r18, -92		// 8cc
					  dramBase[frameIdx + i] = 0;
				   }
				   for (i = 0; i< vcnt * hcnt; i++) {
     92c:	f813001c 	swi	r0, r19, 28
     930:	b8000708 	bri	1800		// 1038
					  if (i < 20 * hcnt){
     934:	b0000000 	imm	0
     938:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     93c:	10640000 	addk	r3, r4, r0
     940:	10631800 	addk	r3, r3, r3
     944:	10631800 	addk	r3, r3, r3
     948:	10632000 	addk	r3, r3, r4
     94c:	10631800 	addk	r3, r3, r3
     950:	10631800 	addk	r3, r3, r3
     954:	10830000 	addk	r4, r3, r0
     958:	e873001c 	lwi	r3, r19, 28
     95c:	16441801 	cmp	r18, r4, r3
     960:	bcb200a0 	bgei	r18, 160		// a00
						  // this is the correct mapping of r,g,b
						  dramBase[frameIdx + i] = red << 16 | green << 8 | blue;
     964:	e8930034 	lwi	r4, r19, 52
     968:	e873001c 	lwi	r3, r19, 28
     96c:	10641800 	addk	r3, r4, r3
     970:	10631800 	addk	r3, r3, r3
     974:	10631800 	addk	r3, r3, r3
     978:	e893002c 	lwi	r4, r19, 44
     97c:	10841800 	addk	r4, r4, r3
     980:	e873003c 	lwi	r3, r19, 60
     984:	10631800 	addk	r3, r3, r3
     988:	10631800 	addk	r3, r3, r3
     98c:	10631800 	addk	r3, r3, r3
     990:	10631800 	addk	r3, r3, r3
     994:	10631800 	addk	r3, r3, r3
     998:	10631800 	addk	r3, r3, r3
     99c:	10631800 	addk	r3, r3, r3
     9a0:	10631800 	addk	r3, r3, r3
     9a4:	10631800 	addk	r3, r3, r3
     9a8:	10631800 	addk	r3, r3, r3
     9ac:	10631800 	addk	r3, r3, r3
     9b0:	10631800 	addk	r3, r3, r3
     9b4:	10631800 	addk	r3, r3, r3
     9b8:	10631800 	addk	r3, r3, r3
     9bc:	10631800 	addk	r3, r3, r3
     9c0:	10631800 	addk	r3, r3, r3
     9c4:	10a30000 	addk	r5, r3, r0
     9c8:	e8730040 	lwi	r3, r19, 64
     9cc:	10631800 	addk	r3, r3, r3
     9d0:	10631800 	addk	r3, r3, r3
     9d4:	10631800 	addk	r3, r3, r3
     9d8:	10631800 	addk	r3, r3, r3
     9dc:	10631800 	addk	r3, r3, r3
     9e0:	10631800 	addk	r3, r3, r3
     9e4:	10631800 	addk	r3, r3, r3
     9e8:	10631800 	addk	r3, r3, r3
     9ec:	80a51800 	or	r5, r5, r3
     9f0:	e8730038 	lwi	r3, r19, 56
     9f4:	80651800 	or	r3, r5, r3
     9f8:	f8640000 	swi	r3, r4, 0
     9fc:	b8000630 	bri	1584		// 102c
					  }  else if (i < 40 * hcnt)
     a00:	b0000000 	imm	0
     a04:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     a08:	10640000 	addk	r3, r4, r0
     a0c:	10631800 	addk	r3, r3, r3
     a10:	10631800 	addk	r3, r3, r3
     a14:	10632000 	addk	r3, r3, r4
     a18:	10631800 	addk	r3, r3, r3
     a1c:	10631800 	addk	r3, r3, r3
     a20:	10631800 	addk	r3, r3, r3
     a24:	14641800 	rsubk	r3, r4, r3
     a28:	10832000 	addk	r4, r3, r4
     a2c:	e873001c 	lwi	r3, r19, 28
     a30:	16441801 	cmp	r18, r4, r3
     a34:	bcb200a0 	bgei	r18, 160		// ad4
						  dramBase[frameIdx + i] = green << 16 | blue << 8 | red;
     a38:	e8930034 	lwi	r4, r19, 52
     a3c:	e873001c 	lwi	r3, r19, 28
     a40:	10641800 	addk	r3, r4, r3
     a44:	10631800 	addk	r3, r3, r3
     a48:	10631800 	addk	r3, r3, r3
     a4c:	e893002c 	lwi	r4, r19, 44
     a50:	10841800 	addk	r4, r4, r3
     a54:	e8730040 	lwi	r3, r19, 64
     a58:	10631800 	addk	r3, r3, r3
     a5c:	10631800 	addk	r3, r3, r3
     a60:	10631800 	addk	r3, r3, r3
     a64:	10631800 	addk	r3, r3, r3
     a68:	10631800 	addk	r3, r3, r3
     a6c:	10631800 	addk	r3, r3, r3
     a70:	10631800 	addk	r3, r3, r3
     a74:	10631800 	addk	r3, r3, r3
     a78:	10631800 	addk	r3, r3, r3
     a7c:	10631800 	addk	r3, r3, r3
     a80:	10631800 	addk	r3, r3, r3
     a84:	10631800 	addk	r3, r3, r3
     a88:	10631800 	addk	r3, r3, r3
     a8c:	10631800 	addk	r3, r3, r3
     a90:	10631800 	addk	r3, r3, r3
     a94:	10631800 	addk	r3, r3, r3
     a98:	10a30000 	addk	r5, r3, r0
     a9c:	e8730038 	lwi	r3, r19, 56
     aa0:	10631800 	addk	r3, r3, r3
     aa4:	10631800 	addk	r3, r3, r3
     aa8:	10631800 	addk	r3, r3, r3
     aac:	10631800 	addk	r3, r3, r3
     ab0:	10631800 	addk	r3, r3, r3
     ab4:	10631800 	addk	r3, r3, r3
     ab8:	10631800 	addk	r3, r3, r3
     abc:	10631800 	addk	r3, r3, r3
     ac0:	80a51800 	or	r5, r5, r3
     ac4:	e873003c 	lwi	r3, r19, 60
     ac8:	80651800 	or	r3, r5, r3
     acc:	f8640000 	swi	r3, r4, 0
     ad0:	b800055c 	bri	1372		// 102c
					  	  else if (i < 60 * hcnt)
     ad4:	b0000000 	imm	0
     ad8:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     adc:	10640000 	addk	r3, r4, r0
     ae0:	10631800 	addk	r3, r3, r3
     ae4:	10631800 	addk	r3, r3, r3
     ae8:	10631800 	addk	r3, r3, r3
     aec:	10631800 	addk	r3, r3, r3
     af0:	14641800 	rsubk	r3, r4, r3
     af4:	10631800 	addk	r3, r3, r3
     af8:	10631800 	addk	r3, r3, r3
     afc:	10830000 	addk	r4, r3, r0
     b00:	e873001c 	lwi	r3, r19, 28
     b04:	16441801 	cmp	r18, r4, r3
     b08:	bcb200a0 	bgei	r18, 160		// ba8
					  		  dramBase[frameIdx + i] = blue << 16 | red << 8 | green;
     b0c:	e8930034 	lwi	r4, r19, 52
     b10:	e873001c 	lwi	r3, r19, 28
     b14:	10641800 	addk	r3, r4, r3
     b18:	10631800 	addk	r3, r3, r3
     b1c:	10631800 	addk	r3, r3, r3
     b20:	e893002c 	lwi	r4, r19, 44
     b24:	10841800 	addk	r4, r4, r3
     b28:	e8730038 	lwi	r3, r19, 56
     b2c:	10631800 	addk	r3, r3, r3
     b30:	10631800 	addk	r3, r3, r3
     b34:	10631800 	addk	r3, r3, r3
     b38:	10631800 	addk	r3, r3, r3
     b3c:	10631800 	addk	r3, r3, r3
     b40:	10631800 	addk	r3, r3, r3
     b44:	10631800 	addk	r3, r3, r3
     b48:	10631800 	addk	r3, r3, r3
     b4c:	10631800 	addk	r3, r3, r3
     b50:	10631800 	addk	r3, r3, r3
     b54:	10631800 	addk	r3, r3, r3
     b58:	10631800 	addk	r3, r3, r3
     b5c:	10631800 	addk	r3, r3, r3
     b60:	10631800 	addk	r3, r3, r3
     b64:	10631800 	addk	r3, r3, r3
     b68:	10631800 	addk	r3, r3, r3
     b6c:	10a30000 	addk	r5, r3, r0
     b70:	e873003c 	lwi	r3, r19, 60
     b74:	10631800 	addk	r3, r3, r3
     b78:	10631800 	addk	r3, r3, r3
     b7c:	10631800 	addk	r3, r3, r3
     b80:	10631800 	addk	r3, r3, r3
     b84:	10631800 	addk	r3, r3, r3
     b88:	10631800 	addk	r3, r3, r3
     b8c:	10631800 	addk	r3, r3, r3
     b90:	10631800 	addk	r3, r3, r3
     b94:	80a51800 	or	r5, r5, r3
     b98:	e8730040 	lwi	r3, r19, 64
     b9c:	80651800 	or	r3, r5, r3
     ba0:	f8640000 	swi	r3, r4, 0
     ba4:	b8000488 	bri	1160		// 102c
					  	  else if (i < 80 * hcnt)
     ba8:	b0000000 	imm	0
     bac:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     bb0:	10640000 	addk	r3, r4, r0
     bb4:	10631800 	addk	r3, r3, r3
     bb8:	10631800 	addk	r3, r3, r3
     bbc:	10632000 	addk	r3, r3, r4
     bc0:	10631800 	addk	r3, r3, r3
     bc4:	10631800 	addk	r3, r3, r3
     bc8:	10631800 	addk	r3, r3, r3
     bcc:	10631800 	addk	r3, r3, r3
     bd0:	14641800 	rsubk	r3, r4, r3
     bd4:	10832000 	addk	r4, r3, r4
     bd8:	e873001c 	lwi	r3, r19, 28
     bdc:	16441801 	cmp	r18, r4, r3
     be0:	bcb202b0 	bgei	r18, 688		// e90
					  		  dramBase[frameIdx + i] = ((i % hcnt)/ 4) << 16 | ((i % hcnt) / 4) << 8 | ((i % hcnt)/ 4);
     be4:	e8930034 	lwi	r4, r19, 52
     be8:	e873001c 	lwi	r3, r19, 28
     bec:	10641800 	addk	r3, r4, r3
     bf0:	10631800 	addk	r3, r3, r3
     bf4:	10631800 	addk	r3, r3, r3
     bf8:	e893002c 	lwi	r4, r19, 44
     bfc:	12c41800 	addk	r22, r4, r3
     c00:	b0000000 	imm	0
     c04:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     c08:	e893001c 	lwi	r4, r19, 28
     c0c:	10a40000 	addk	r5, r4, r0
     c10:	10c30000 	addk	r6, r3, r0
     c14:	b0000000 	imm	0
     c18:	b9f46368 	brlid	r15, 25448	// 6f80 <__modsi3>
     c1c:	80000000 	or	r0, r0, r0
     c20:	10801800 	addk	r4, r0, r3
     c24:	90830001 	sra	r4, r3
     c28:	90840001 	sra	r4, r4
     c2c:	90840001 	sra	r4, r4
     c30:	90840001 	sra	r4, r4
     c34:	90840001 	sra	r4, r4
     c38:	90840001 	sra	r4, r4
     c3c:	90840001 	sra	r4, r4
     c40:	90840001 	sra	r4, r4
     c44:	90840001 	sra	r4, r4
     c48:	90840001 	sra	r4, r4
     c4c:	90840001 	sra	r4, r4
     c50:	90840001 	sra	r4, r4
     c54:	90840001 	sra	r4, r4
     c58:	90840001 	sra	r4, r4
     c5c:	90840001 	sra	r4, r4
     c60:	90840001 	sra	r4, r4
     c64:	90840001 	sra	r4, r4
     c68:	90840001 	sra	r4, r4
     c6c:	90840001 	sra	r4, r4
     c70:	90840001 	sra	r4, r4
     c74:	90840001 	sra	r4, r4
     c78:	90840001 	sra	r4, r4
     c7c:	90840001 	sra	r4, r4
     c80:	90840001 	sra	r4, r4
     c84:	90840001 	sra	r4, r4
     c88:	90840001 	sra	r4, r4
     c8c:	90840001 	sra	r4, r4
     c90:	90840001 	sra	r4, r4
     c94:	90840001 	sra	r4, r4
     c98:	90840001 	sra	r4, r4
     c9c:	90840001 	sra	r4, r4
     ca0:	a4840003 	andi	r4, r4, 3
     ca4:	10841800 	addk	r4, r4, r3
     ca8:	10602000 	addk	r3, r0, r4
     cac:	90640001 	sra	r3, r4
     cb0:	90630001 	sra	r3, r3
     cb4:	10631800 	addk	r3, r3, r3
     cb8:	10631800 	addk	r3, r3, r3
     cbc:	10631800 	addk	r3, r3, r3
     cc0:	10631800 	addk	r3, r3, r3
     cc4:	10631800 	addk	r3, r3, r3
     cc8:	10631800 	addk	r3, r3, r3
     ccc:	10631800 	addk	r3, r3, r3
     cd0:	10631800 	addk	r3, r3, r3
     cd4:	10631800 	addk	r3, r3, r3
     cd8:	10631800 	addk	r3, r3, r3
     cdc:	10631800 	addk	r3, r3, r3
     ce0:	10631800 	addk	r3, r3, r3
     ce4:	10631800 	addk	r3, r3, r3
     ce8:	10631800 	addk	r3, r3, r3
     cec:	10631800 	addk	r3, r3, r3
     cf0:	10631800 	addk	r3, r3, r3
     cf4:	12e30000 	addk	r23, r3, r0
     cf8:	b0000000 	imm	0
     cfc:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     d00:	e893001c 	lwi	r4, r19, 28
     d04:	10a40000 	addk	r5, r4, r0
     d08:	10c30000 	addk	r6, r3, r0
     d0c:	b0000000 	imm	0
     d10:	b9f46270 	brlid	r15, 25200	// 6f80 <__modsi3>
     d14:	80000000 	or	r0, r0, r0
     d18:	10801800 	addk	r4, r0, r3
     d1c:	90830001 	sra	r4, r3
     d20:	90840001 	sra	r4, r4
     d24:	90840001 	sra	r4, r4
     d28:	90840001 	sra	r4, r4
     d2c:	90840001 	sra	r4, r4
     d30:	90840001 	sra	r4, r4
     d34:	90840001 	sra	r4, r4
     d38:	90840001 	sra	r4, r4
     d3c:	90840001 	sra	r4, r4
     d40:	90840001 	sra	r4, r4
     d44:	90840001 	sra	r4, r4
     d48:	90840001 	sra	r4, r4
     d4c:	90840001 	sra	r4, r4
     d50:	90840001 	sra	r4, r4
     d54:	90840001 	sra	r4, r4
     d58:	90840001 	sra	r4, r4
     d5c:	90840001 	sra	r4, r4
     d60:	90840001 	sra	r4, r4
     d64:	90840001 	sra	r4, r4
     d68:	90840001 	sra	r4, r4
     d6c:	90840001 	sra	r4, r4
     d70:	90840001 	sra	r4, r4
     d74:	90840001 	sra	r4, r4
     d78:	90840001 	sra	r4, r4
     d7c:	90840001 	sra	r4, r4
     d80:	90840001 	sra	r4, r4
     d84:	90840001 	sra	r4, r4
     d88:	90840001 	sra	r4, r4
     d8c:	90840001 	sra	r4, r4
     d90:	90840001 	sra	r4, r4
     d94:	90840001 	sra	r4, r4
     d98:	a4840003 	andi	r4, r4, 3
     d9c:	10841800 	addk	r4, r4, r3
     da0:	10602000 	addk	r3, r0, r4
     da4:	90640001 	sra	r3, r4
     da8:	90630001 	sra	r3, r3
     dac:	10631800 	addk	r3, r3, r3
     db0:	10631800 	addk	r3, r3, r3
     db4:	10631800 	addk	r3, r3, r3
     db8:	10631800 	addk	r3, r3, r3
     dbc:	10631800 	addk	r3, r3, r3
     dc0:	10631800 	addk	r3, r3, r3
     dc4:	10631800 	addk	r3, r3, r3
     dc8:	10631800 	addk	r3, r3, r3
     dcc:	82f71800 	or	r23, r23, r3
     dd0:	b0000000 	imm	0
     dd4:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
     dd8:	e893001c 	lwi	r4, r19, 28
     ddc:	10a40000 	addk	r5, r4, r0
     de0:	10c30000 	addk	r6, r3, r0
     de4:	b0000000 	imm	0
     de8:	b9f46198 	brlid	r15, 24984	// 6f80 <__modsi3>
     dec:	80000000 	or	r0, r0, r0
     df0:	10801800 	addk	r4, r0, r3
     df4:	90830001 	sra	r4, r3
     df8:	90840001 	sra	r4, r4
     dfc:	90840001 	sra	r4, r4
     e00:	90840001 	sra	r4, r4
     e04:	90840001 	sra	r4, r4
     e08:	90840001 	sra	r4, r4
     e0c:	90840001 	sra	r4, r4
     e10:	90840001 	sra	r4, r4
     e14:	90840001 	sra	r4, r4
     e18:	90840001 	sra	r4, r4
     e1c:	90840001 	sra	r4, r4
     e20:	90840001 	sra	r4, r4
     e24:	90840001 	sra	r4, r4
     e28:	90840001 	sra	r4, r4
     e2c:	90840001 	sra	r4, r4
     e30:	90840001 	sra	r4, r4
     e34:	90840001 	sra	r4, r4
     e38:	90840001 	sra	r4, r4
     e3c:	90840001 	sra	r4, r4
     e40:	90840001 	sra	r4, r4
     e44:	90840001 	sra	r4, r4
     e48:	90840001 	sra	r4, r4
     e4c:	90840001 	sra	r4, r4
     e50:	90840001 	sra	r4, r4
     e54:	90840001 	sra	r4, r4
     e58:	90840001 	sra	r4, r4
     e5c:	90840001 	sra	r4, r4
     e60:	90840001 	sra	r4, r4
     e64:	90840001 	sra	r4, r4
     e68:	90840001 	sra	r4, r4
     e6c:	90840001 	sra	r4, r4
     e70:	a4840003 	andi	r4, r4, 3
     e74:	10841800 	addk	r4, r4, r3
     e78:	10602000 	addk	r3, r0, r4
     e7c:	90640001 	sra	r3, r4
     e80:	90630001 	sra	r3, r3
     e84:	80771800 	or	r3, r23, r3
     e88:	f8760000 	swi	r3, r22, 0
     e8c:	b80001a0 	bri	416		// 102c
					  	  else if (i < 100 * hcnt)
     e90:	b0000000 	imm	0
     e94:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     e98:	10640000 	addk	r3, r4, r0
     e9c:	10631800 	addk	r3, r3, r3
     ea0:	10632000 	addk	r3, r3, r4
     ea4:	10a31800 	addk	r5, r3, r3
     ea8:	10a52800 	addk	r5, r5, r5
     eac:	10a52800 	addk	r5, r5, r5
     eb0:	10a52800 	addk	r5, r5, r5
     eb4:	10a52800 	addk	r5, r5, r5
     eb8:	10632800 	addk	r3, r3, r5
     ebc:	10832000 	addk	r4, r3, r4
     ec0:	e873001c 	lwi	r3, r19, 28
     ec4:	16441801 	cmp	r18, r4, r3
     ec8:	bcb20030 	bgei	r18, 48		// ef8
					  		  dramBase[frameIdx + i] = 0x0000ffff;
     ecc:	e8930034 	lwi	r4, r19, 52
     ed0:	e873001c 	lwi	r3, r19, 28
     ed4:	10641800 	addk	r3, r4, r3
     ed8:	10631800 	addk	r3, r3, r3
     edc:	10631800 	addk	r3, r3, r3
     ee0:	e893002c 	lwi	r4, r19, 44
     ee4:	10641800 	addk	r3, r4, r3
     ee8:	b0000000 	imm	0
     eec:	3080ffff 	addik	r4, r0, -1
     ef0:	f8830000 	swi	r4, r3, 0
     ef4:	b8000138 	bri	312		// 102c
					  	  else if (i < 120 * hcnt)
     ef8:	b0000000 	imm	0
     efc:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
     f00:	10640000 	addk	r3, r4, r0
     f04:	10631800 	addk	r3, r3, r3
     f08:	10631800 	addk	r3, r3, r3
     f0c:	10631800 	addk	r3, r3, r3
     f10:	14641800 	rsubk	r3, r4, r3
     f14:	10a31800 	addk	r5, r3, r3
     f18:	10a52800 	addk	r5, r5, r5
     f1c:	10a52800 	addk	r5, r5, r5
     f20:	10a52800 	addk	r5, r5, r5
     f24:	10632800 	addk	r3, r3, r5
     f28:	10832000 	addk	r4, r3, r4
     f2c:	e873001c 	lwi	r3, r19, 28
     f30:	16441801 	cmp	r18, r4, r3
     f34:	bcb20030 	bgei	r18, 48		// f64
					  		  dramBase[frameIdx + i] = 0x00ffffff;
     f38:	e8930034 	lwi	r4, r19, 52
     f3c:	e873001c 	lwi	r3, r19, 28
     f40:	10641800 	addk	r3, r4, r3
     f44:	10631800 	addk	r3, r3, r3
     f48:	10631800 	addk	r3, r3, r3
     f4c:	e893002c 	lwi	r4, r19, 44
     f50:	10641800 	addk	r3, r4, r3
     f54:	b00000ff 	imm	255
     f58:	3080ffff 	addik	r4, r0, -1
     f5c:	f8830000 	swi	r4, r3, 0
     f60:	b80000cc 	bri	204		// 102c
					  	  else
					  		  dramBase[frameIdx + i] = (red | green | blue) << 16 | (red | green | blue) << 8 | (red | green | blue);
     f64:	e8930034 	lwi	r4, r19, 52
     f68:	e873001c 	lwi	r3, r19, 28
     f6c:	10641800 	addk	r3, r4, r3
     f70:	10631800 	addk	r3, r3, r3
     f74:	10631800 	addk	r3, r3, r3
     f78:	e893002c 	lwi	r4, r19, 44
     f7c:	10841800 	addk	r4, r4, r3
     f80:	e8b3003c 	lwi	r5, r19, 60
     f84:	e8730040 	lwi	r3, r19, 64
     f88:	80a51800 	or	r5, r5, r3
     f8c:	e8730038 	lwi	r3, r19, 56
     f90:	80651800 	or	r3, r5, r3
     f94:	10631800 	addk	r3, r3, r3
     f98:	10631800 	addk	r3, r3, r3
     f9c:	10631800 	addk	r3, r3, r3
     fa0:	10631800 	addk	r3, r3, r3
     fa4:	10631800 	addk	r3, r3, r3
     fa8:	10631800 	addk	r3, r3, r3
     fac:	10631800 	addk	r3, r3, r3
     fb0:	10631800 	addk	r3, r3, r3
     fb4:	10631800 	addk	r3, r3, r3
     fb8:	10631800 	addk	r3, r3, r3
     fbc:	10631800 	addk	r3, r3, r3
     fc0:	10631800 	addk	r3, r3, r3
     fc4:	10631800 	addk	r3, r3, r3
     fc8:	10631800 	addk	r3, r3, r3
     fcc:	10631800 	addk	r3, r3, r3
     fd0:	10631800 	addk	r3, r3, r3
     fd4:	10a30000 	addk	r5, r3, r0
     fd8:	e8d3003c 	lwi	r6, r19, 60
     fdc:	e8730040 	lwi	r3, r19, 64
     fe0:	80c61800 	or	r6, r6, r3
     fe4:	e8730038 	lwi	r3, r19, 56
     fe8:	80661800 	or	r3, r6, r3
     fec:	10631800 	addk	r3, r3, r3
     ff0:	10631800 	addk	r3, r3, r3
     ff4:	10631800 	addk	r3, r3, r3
     ff8:	10631800 	addk	r3, r3, r3
     ffc:	10631800 	addk	r3, r3, r3
    1000:	10631800 	addk	r3, r3, r3
    1004:	10631800 	addk	r3, r3, r3
    1008:	10631800 	addk	r3, r3, r3
    100c:	80a51800 	or	r5, r5, r3
    1010:	e8d3003c 	lwi	r6, r19, 60
    1014:	e8730040 	lwi	r3, r19, 64
    1018:	80c61800 	or	r6, r6, r3
    101c:	e8730038 	lwi	r3, r19, 56
    1020:	80661800 	or	r3, r6, r3
    1024:	80651800 	or	r3, r5, r3
    1028:	f8640000 	swi	r3, r4, 0
				    }

				   for (i = 0; i< vcnt * hcnt; i++) {
					  dramBase[frameIdx + i] = 0;
				   }
				   for (i = 0; i< vcnt * hcnt; i++) {
    102c:	e873001c 	lwi	r3, r19, 28
    1030:	30630001 	addik	r3, r3, 1
    1034:	f873001c 	swi	r3, r19, 28
    1038:	b0000000 	imm	0
    103c:	e88092c0 	lwi	r4, r0, -27968	// 92c0 <vcnt.2535>
    1040:	b0000000 	imm	0
    1044:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    1048:	10a40000 	addk	r5, r4, r0
    104c:	10c30000 	addk	r6, r3, r0
    1050:	b0000000 	imm	0
    1054:	b9f45fc8 	brlid	r15, 24520	// 701c <__mulsi3>
    1058:	80000000 	or	r0, r0, r0
    105c:	10830000 	addk	r4, r3, r0
    1060:	e873001c 	lwi	r3, r19, 28
    1064:	16441801 	cmp	r18, r4, r3
    1068:	bc52f8cc 	blti	r18, -1844		// 934
					  		  dramBase[frameIdx + i] = 0x00ffffff;
					  	  else
					  		  dramBase[frameIdx + i] = (red | green | blue) << 16 | (red | green | blue) << 8 | (red | green | blue);

				   }
				   sprint("---DRAM mbrot ---\n\r");
    106c:	b0000000 	imm	0
    1070:	30a089d8 	addik	r5, r0, -30248
    1074:	b9f4f1e4 	brlid	r15, -3612	// 258 <sprint>
    1078:	80000000 	or	r0, r0, r0
				   // mandelbrot figure
				   // use switch 4 to select compute function
				   if (switches & 0x08) {
    107c:	b0000000 	imm	0
    1080:	e86092b8 	lwi	r3, r0, -27976	// 92b8 <switches>
    1084:	a4630008 	andi	r3, r3, 8
    1088:	bc030044 	beqi	r3, 68		// 10cc
					   mbrot(80,80,512,320,hcnt,dramBase + frameIdx);
    108c:	b0000000 	imm	0
    1090:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
    1094:	e8730034 	lwi	r3, r19, 52
    1098:	10631800 	addk	r3, r3, r3
    109c:	10631800 	addk	r3, r3, r3
    10a0:	e8b3002c 	lwi	r5, r19, 44
    10a4:	10651800 	addk	r3, r5, r3
    10a8:	30a00050 	addik	r5, r0, 80	// 50 <_start1>
    10ac:	30c00050 	addik	r6, r0, 80	// 50 <_start1>
    10b0:	30e00200 	addik	r7, r0, 512
    10b4:	31000140 	addik	r8, r0, 320
    10b8:	11240000 	addk	r9, r4, r0
    10bc:	11430000 	addk	r10, r3, r0
    10c0:	b9f40394 	brlid	r15, 916	// 1454 <mbrot>
    10c4:	80000000 	or	r0, r0, r0
    10c8:	b8000040 	bri	64		// 1108
				   } else {
					   mbrotHw1(80,80,512,320,hcnt,dramBase + frameIdx);
    10cc:	b0000000 	imm	0
    10d0:	e88092c4 	lwi	r4, r0, -27964	// 92c4 <hcnt.2536>
    10d4:	e8730034 	lwi	r3, r19, 52
    10d8:	10631800 	addk	r3, r3, r3
    10dc:	10631800 	addk	r3, r3, r3
    10e0:	e8b3002c 	lwi	r5, r19, 44
    10e4:	10651800 	addk	r3, r5, r3
    10e8:	30a00050 	addik	r5, r0, 80	// 50 <_start1>
    10ec:	30c00050 	addik	r6, r0, 80	// 50 <_start1>
    10f0:	30e00200 	addik	r7, r0, 512
    10f4:	31000140 	addik	r8, r0, 320
    10f8:	11240000 	addk	r9, r4, r0
    10fc:	11430000 	addk	r10, r3, r0
    1100:	b9f408d8 	brlid	r15, 2264	// 19d8 <mbrotHw1>
    1104:	80000000 	or	r0, r0, r0
				   }
				   sprint("---DRAM mbrot finished ---\n\r");
    1108:	b0000000 	imm	0
    110c:	30a089ec 	addik	r5, r0, -30228
    1110:	b9f4f148 	brlid	r15, -3768	// 258 <sprint>
    1114:	80000000 	or	r0, r0, r0
			   }

			   // revert old box
			   for (i = 0; i < 10; i++){
    1118:	f813001c 	swi	r0, r19, 28
    111c:	b80000fc 	bri	252		// 1218
				   for (j = 0; j < 10; j++){
    1120:	f8130020 	swi	r0, r19, 32
    1124:	b80000d8 	bri	216		// 11fc
				   dramBase[frameIdx + ((ypos + i) * hcnt) + xpos + j] ^= 0xffffff;
    1128:	b0000000 	imm	0
    112c:	e880908c 	lwi	r4, r0, -28532	// 908c <ypos>
    1130:	e873001c 	lwi	r3, r19, 28
    1134:	10841800 	addk	r4, r4, r3
    1138:	b0000000 	imm	0
    113c:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    1140:	10a40000 	addk	r5, r4, r0
    1144:	10c30000 	addk	r6, r3, r0
    1148:	b0000000 	imm	0
    114c:	b9f45ed0 	brlid	r15, 24272	// 701c <__mulsi3>
    1150:	80000000 	or	r0, r0, r0
    1154:	10830000 	addk	r4, r3, r0
    1158:	e8730034 	lwi	r3, r19, 52
    115c:	10841800 	addk	r4, r4, r3
    1160:	b0000000 	imm	0
    1164:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1168:	10841800 	addk	r4, r4, r3
    116c:	e8730020 	lwi	r3, r19, 32
    1170:	10641800 	addk	r3, r4, r3
    1174:	10631800 	addk	r3, r3, r3
    1178:	10631800 	addk	r3, r3, r3
    117c:	e893002c 	lwi	r4, r19, 44
    1180:	12c41800 	addk	r22, r4, r3
    1184:	b0000000 	imm	0
    1188:	e880908c 	lwi	r4, r0, -28532	// 908c <ypos>
    118c:	e873001c 	lwi	r3, r19, 28
    1190:	10841800 	addk	r4, r4, r3
    1194:	b0000000 	imm	0
    1198:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    119c:	10a40000 	addk	r5, r4, r0
    11a0:	10c30000 	addk	r6, r3, r0
    11a4:	b0000000 	imm	0
    11a8:	b9f45e74 	brlid	r15, 24180	// 701c <__mulsi3>
    11ac:	80000000 	or	r0, r0, r0
    11b0:	10830000 	addk	r4, r3, r0
    11b4:	e8730034 	lwi	r3, r19, 52
    11b8:	10841800 	addk	r4, r4, r3
    11bc:	b0000000 	imm	0
    11c0:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    11c4:	10841800 	addk	r4, r4, r3
    11c8:	e8730020 	lwi	r3, r19, 32
    11cc:	10641800 	addk	r3, r4, r3
    11d0:	10631800 	addk	r3, r3, r3
    11d4:	10631800 	addk	r3, r3, r3
    11d8:	e893002c 	lwi	r4, r19, 44
    11dc:	10641800 	addk	r3, r4, r3
    11e0:	e8630000 	lwi	r3, r3, 0
    11e4:	b00000ff 	imm	255
    11e8:	a863ffff 	xori	r3, r3, -1
    11ec:	f8760000 	swi	r3, r22, 0
				   sprint("---DRAM mbrot finished ---\n\r");
			   }

			   // revert old box
			   for (i = 0; i < 10; i++){
				   for (j = 0; j < 10; j++){
    11f0:	e8730020 	lwi	r3, r19, 32
    11f4:	30630001 	addik	r3, r3, 1
    11f8:	f8730020 	swi	r3, r19, 32
    11fc:	e8930020 	lwi	r4, r19, 32
    1200:	30600009 	addik	r3, r0, 9
    1204:	16441801 	cmp	r18, r4, r3
    1208:	bcb2ff20 	bgei	r18, -224		// 1128
				   }
				   sprint("---DRAM mbrot finished ---\n\r");
			   }

			   // revert old box
			   for (i = 0; i < 10; i++){
    120c:	e873001c 	lwi	r3, r19, 28
    1210:	30630001 	addik	r3, r3, 1
    1214:	f873001c 	swi	r3, r19, 28
    1218:	e893001c 	lwi	r4, r19, 28
    121c:	30600009 	addik	r3, r0, 9
    1220:	16441801 	cmp	r18, r4, r3
    1224:	bcb2fefc 	bgei	r18, -260		// 1120
				   for (j = 0; j < 10; j++){
				   dramBase[frameIdx + ((ypos + i) * hcnt) + xpos + j] ^= 0xffffff;
				   }
			   }
			   // move box
			   if (xdir > 0) {
    1228:	b0000000 	imm	0
    122c:	e8609090 	lwi	r3, r0, -28528	// 9090 <xdir>
    1230:	bc630058 	blei	r3, 88		// 1288
				   if (xpos < (hcnt - 10)) xpos++;
    1234:	b0000000 	imm	0
    1238:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    123c:	3083fff6 	addik	r4, r3, -10
    1240:	b0000000 	imm	0
    1244:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1248:	16441801 	cmp	r18, r4, r3
    124c:	bcb2001c 	bgei	r18, 28		// 1268
    1250:	b0000000 	imm	0
    1254:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1258:	30630001 	addik	r3, r3, 1
    125c:	b0000000 	imm	0
    1260:	f8609088 	swi	r3, r0, -28536	// 9088 <xpos>
    1264:	b8000068 	bri	104		// 12cc
				   else {
					   xdir = 0;
    1268:	b0000000 	imm	0
    126c:	f8009090 	swi	r0, r0, -28528	// 9090 <xdir>
					   xpos--;
    1270:	b0000000 	imm	0
    1274:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1278:	3063ffff 	addik	r3, r3, -1
    127c:	b0000000 	imm	0
    1280:	f8609088 	swi	r3, r0, -28536	// 9088 <xpos>
    1284:	b8000048 	bri	72		// 12cc
				   }
			   } else {
				   if (xpos > 0) xpos--;
    1288:	b0000000 	imm	0
    128c:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1290:	bc63001c 	blei	r3, 28		// 12ac
    1294:	b0000000 	imm	0
    1298:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    129c:	3063ffff 	addik	r3, r3, -1
    12a0:	b0000000 	imm	0
    12a4:	f8609088 	swi	r3, r0, -28536	// 9088 <xpos>
    12a8:	b8000024 	bri	36		// 12cc
				   else {
					   xdir = 1;
    12ac:	30600001 	addik	r3, r0, 1
    12b0:	b0000000 	imm	0
    12b4:	f8609090 	swi	r3, r0, -28528	// 9090 <xdir>
					   xpos++;
    12b8:	b0000000 	imm	0
    12bc:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    12c0:	30630001 	addik	r3, r3, 1
    12c4:	b0000000 	imm	0
    12c8:	f8609088 	swi	r3, r0, -28536	// 9088 <xpos>
				   dramBase[frameIdx + ((ypos + i) * hcnt) + xpos + j] ^= 0xffffff;
				   }
			   }
			   */
			   // draw new box
			   for (i = 0; i < 10; i++){
    12cc:	f813001c 	swi	r0, r19, 28
    12d0:	b80000fc 	bri	252		// 13cc
				   for (j = 0; j < 10; j++){
    12d4:	f8130020 	swi	r0, r19, 32
    12d8:	b80000d8 	bri	216		// 13b0
				   dramBase[frameIdx + ((ypos + i) * hcnt) + xpos + j] ^= 0xffffff;
    12dc:	b0000000 	imm	0
    12e0:	e880908c 	lwi	r4, r0, -28532	// 908c <ypos>
    12e4:	e873001c 	lwi	r3, r19, 28
    12e8:	10841800 	addk	r4, r4, r3
    12ec:	b0000000 	imm	0
    12f0:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    12f4:	10a40000 	addk	r5, r4, r0
    12f8:	10c30000 	addk	r6, r3, r0
    12fc:	b0000000 	imm	0
    1300:	b9f45d1c 	brlid	r15, 23836	// 701c <__mulsi3>
    1304:	80000000 	or	r0, r0, r0
    1308:	10830000 	addk	r4, r3, r0
    130c:	e8730034 	lwi	r3, r19, 52
    1310:	10841800 	addk	r4, r4, r3
    1314:	b0000000 	imm	0
    1318:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    131c:	10841800 	addk	r4, r4, r3
    1320:	e8730020 	lwi	r3, r19, 32
    1324:	10641800 	addk	r3, r4, r3
    1328:	10631800 	addk	r3, r3, r3
    132c:	10631800 	addk	r3, r3, r3
    1330:	e893002c 	lwi	r4, r19, 44
    1334:	12c41800 	addk	r22, r4, r3
    1338:	b0000000 	imm	0
    133c:	e880908c 	lwi	r4, r0, -28532	// 908c <ypos>
    1340:	e873001c 	lwi	r3, r19, 28
    1344:	10841800 	addk	r4, r4, r3
    1348:	b0000000 	imm	0
    134c:	e86092c4 	lwi	r3, r0, -27964	// 92c4 <hcnt.2536>
    1350:	10a40000 	addk	r5, r4, r0
    1354:	10c30000 	addk	r6, r3, r0
    1358:	b0000000 	imm	0
    135c:	b9f45cc0 	brlid	r15, 23744	// 701c <__mulsi3>
    1360:	80000000 	or	r0, r0, r0
    1364:	10830000 	addk	r4, r3, r0
    1368:	e8730034 	lwi	r3, r19, 52
    136c:	10841800 	addk	r4, r4, r3
    1370:	b0000000 	imm	0
    1374:	e8609088 	lwi	r3, r0, -28536	// 9088 <xpos>
    1378:	10841800 	addk	r4, r4, r3
    137c:	e8730020 	lwi	r3, r19, 32
    1380:	10641800 	addk	r3, r4, r3
    1384:	10631800 	addk	r3, r3, r3
    1388:	10631800 	addk	r3, r3, r3
    138c:	e893002c 	lwi	r4, r19, 44
    1390:	10641800 	addk	r3, r4, r3
    1394:	e8630000 	lwi	r3, r3, 0
    1398:	b00000ff 	imm	255
    139c:	a863ffff 	xori	r3, r3, -1
    13a0:	f8760000 	swi	r3, r22, 0
				   }
			   }
			   */
			   // draw new box
			   for (i = 0; i < 10; i++){
				   for (j = 0; j < 10; j++){
    13a4:	e8730020 	lwi	r3, r19, 32
    13a8:	30630001 	addik	r3, r3, 1
    13ac:	f8730020 	swi	r3, r19, 32
    13b0:	e8930020 	lwi	r4, r19, 32
    13b4:	30600009 	addik	r3, r0, 9
    13b8:	16441801 	cmp	r18, r4, r3
    13bc:	bcb2ff20 	bgei	r18, -224		// 12dc
				   dramBase[frameIdx + ((ypos + i) * hcnt) + xpos + j] ^= 0xffffff;
				   }
			   }
			   */
			   // draw new box
			   for (i = 0; i < 10; i++){
    13c0:	e873001c 	lwi	r3, r19, 28
    13c4:	30630001 	addik	r3, r3, 1
    13c8:	f873001c 	swi	r3, r19, 28
    13cc:	e893001c 	lwi	r4, r19, 28
    13d0:	30600009 	addik	r3, r0, 9
    13d4:	16441801 	cmp	r18, r4, r3
    13d8:	bcb2fefc 	bgei	r18, -260		// 12d4
					   sprint("\n\r");
				   }
			   }
			   */

			   toggle = ~toggle;
    13dc:	b0000000 	imm	0
    13e0:	e86092ac 	lwi	r3, r0, -27988	// 92ac <toggle>
    13e4:	a863ffff 	xori	r3, r3, -1
    13e8:	b0000000 	imm	0
    13ec:	f86092ac 	swi	r3, r0, -27988	// 92ac <toggle>
	   }

	   {
		  XStatus status;

		  sprint("\r\nRunning IOModuleSelfTestExample() for iomodule_0...\r\n");
    13f0:	b0000000 	imm	0
    13f4:	30a08a0c 	addik	r5, r0, -30196
    13f8:	b9f4ee60 	brlid	r15, -4512	// 258 <sprint>
    13fc:	80000000 	or	r0, r0, r0

		  status = IOModuleSelfTestExample(XPAR_IOMODULE_0_DEVICE_ID);
    1400:	10a00000 	addk	r5, r0, r0
    1404:	b0000000 	imm	0
    1408:	b9f40f60 	brlid	r15, 3936	// 2368 <IOModuleSelfTestExample>
    140c:	80000000 	or	r0, r0, r0
    1410:	f8730044 	swi	r3, r19, 68

		  if (status == 0) {
    1414:	e8730044 	lwi	r3, r19, 68
    1418:	bc230018 	bnei	r3, 24		// 1430
			  sprint("IOModuleSelfTestExample PASSED\r\n");
    141c:	b0000000 	imm	0
    1420:	30a08a44 	addik	r5, r0, -30140
    1424:	b9f4ee34 	brlid	r15, -4556	// 258 <sprint>
    1428:	80000000 	or	r0, r0, r0
    142c:	b8000014 	bri	20		// 1440
		  }
		  else {
			  sprint("IOModuleSelfTestExample FAILED\r\n");
    1430:	b0000000 	imm	0
    1434:	30a08a68 	addik	r5, r0, -30104
    1438:	b9f4ee20 	brlid	r15, -4576	// 258 <sprint>
    143c:	80000000 	or	r0, r0, r0
		  }
	   }

	   sprint("---Exiting main---\n\r");
    1440:	b0000000 	imm	0
    1444:	30a08a8c 	addik	r5, r0, -30068
    1448:	b9f4ee10 	brlid	r15, -4592	// 258 <sprint>
    144c:	80000000 	or	r0, r0, r0
   }
    1450:	b800f0e4 	bri	-3868		// 534

00001454 <mbrot>:
   return 0;
}


// x0,y0: pixel offset. nx,ny: number in x,y. dy: line offset. p: pointer to frame base
void mbrot (int x0, int y0, int nx, int ny, int dy, Xuint32 *p){
    1454:	3021ff84 	addik	r1, r1, -124
    1458:	f9e10000 	swi	r15, r1, 0
    145c:	fa610070 	swi	r19, r1, 112
    1460:	fac10074 	swi	r22, r1, 116
    1464:	fae10078 	swi	r23, r1, 120
    1468:	12610000 	addk	r19, r1, r0
    146c:	f8b30080 	swi	r5, r19, 128
    1470:	f8d30084 	swi	r6, r19, 132
    1474:	f8f30088 	swi	r7, r19, 136
    1478:	f913008c 	swi	r8, r19, 140
    147c:	f9330090 	swi	r9, r19, 144
    1480:	f9530094 	swi	r10, r19, 148
	const double xCentre = -0.75;
    1484:	30800000 	addik	r4, r0, 0
    1488:	b000bfe8 	imm	-16408
    148c:	30a00000 	addik	r5, r0, 0
    1490:	f8930038 	swi	r4, r19, 56
    1494:	f8b3003c 	swi	r5, r19, 60
	const double yCentre = +0.0;
    1498:	10800000 	addk	r4, r0, r0
    149c:	10a00000 	addk	r5, r0, r0
    14a0:	f8930040 	swi	r4, r19, 64
    14a4:	f8b30044 	swi	r5, r19, 68
	const double dxy     = 0.006;
    14a8:	b000bc6a 	imm	-17302
    14ac:	30807efa 	addik	r4, r0, 32506
    14b0:	b0003f78 	imm	16248
    14b4:	30a09374 	addik	r5, r0, -27788
    14b8:	f8930048 	swi	r4, r19, 72
    14bc:	f8b3004c 	swi	r5, r19, 76
	// const int MAXIT = 16; // 32; // 255;
	const int MAXVAL = 256;
    14c0:	30600100 	addik	r3, r0, 256
    14c4:	f8730050 	swi	r3, r19, 80
    // the magnitude of z remains less than 2 for ever, then the point
    // c is in the Mandelbrot set. We write out the number of iterations
    // before the magnitude of z exceeds 2, or UCHAR_MAX, whichever is
    // smaller.

    for (j = 0; j < ny; j++) {
    14c8:	f8130034 	swi	r0, r19, 52
    14cc:	b80004cc 	bri	1228		// 1998
      cy = yCentre + (j - ny/2)*dxy;
    14d0:	e873008c 	lwi	r3, r19, 140
    14d4:	10801800 	addk	r4, r0, r3
    14d8:	90830041 	srl	r4, r3
    14dc:	90840041 	srl	r4, r4
    14e0:	90840041 	srl	r4, r4
    14e4:	90840041 	srl	r4, r4
    14e8:	90840041 	srl	r4, r4
    14ec:	90840041 	srl	r4, r4
    14f0:	90840041 	srl	r4, r4
    14f4:	90840041 	srl	r4, r4
    14f8:	90840041 	srl	r4, r4
    14fc:	90840041 	srl	r4, r4
    1500:	90840041 	srl	r4, r4
    1504:	90840041 	srl	r4, r4
    1508:	90840041 	srl	r4, r4
    150c:	90840041 	srl	r4, r4
    1510:	90840041 	srl	r4, r4
    1514:	90840041 	srl	r4, r4
    1518:	90840041 	srl	r4, r4
    151c:	90840041 	srl	r4, r4
    1520:	90840041 	srl	r4, r4
    1524:	90840041 	srl	r4, r4
    1528:	90840041 	srl	r4, r4
    152c:	90840041 	srl	r4, r4
    1530:	90840041 	srl	r4, r4
    1534:	90840041 	srl	r4, r4
    1538:	90840041 	srl	r4, r4
    153c:	90840041 	srl	r4, r4
    1540:	90840041 	srl	r4, r4
    1544:	90840041 	srl	r4, r4
    1548:	90840041 	srl	r4, r4
    154c:	90840041 	srl	r4, r4
    1550:	90840041 	srl	r4, r4
    1554:	10641800 	addk	r3, r4, r3
    1558:	90630001 	sra	r3, r3
    155c:	e8930034 	lwi	r4, r19, 52
    1560:	14632000 	rsubk	r3, r3, r4
    1564:	10a30000 	addk	r5, r3, r0
    1568:	b0000000 	imm	0
    156c:	b9f457d8 	brlid	r15, 22488	// 6d44 <__floatsidf>
    1570:	80000000 	or	r0, r0, r0
    1574:	10a40000 	addk	r5, r4, r0
    1578:	10830000 	addk	r4, r3, r0
    157c:	10c50000 	addk	r6, r5, r0
    1580:	10a40000 	addk	r5, r4, r0
    1584:	e8f30048 	lwi	r7, r19, 72
    1588:	e913004c 	lwi	r8, r19, 76
    158c:	b0000000 	imm	0
    1590:	b9f45094 	brlid	r15, 20628	// 6624 <__muldf3>
    1594:	80000000 	or	r0, r0, r0
    1598:	10a40000 	addk	r5, r4, r0
    159c:	10830000 	addk	r4, r3, r0
    15a0:	10c50000 	addk	r6, r5, r0
    15a4:	10a40000 	addk	r5, r4, r0
    15a8:	e8f30040 	lwi	r7, r19, 64
    15ac:	e9130044 	lwi	r8, r19, 68
    15b0:	b0000000 	imm	0
    15b4:	b9f44f84 	brlid	r15, 20356	// 6538 <__adddf3>
    15b8:	80000000 	or	r0, r0, r0
    15bc:	10a40000 	addk	r5, r4, r0
    15c0:	10830000 	addk	r4, r3, r0
    15c4:	f8930054 	swi	r4, r19, 84
    15c8:	f8b30058 	swi	r5, r19, 88
      for (i = 0; i < nx; i++) {
    15cc:	f8130030 	swi	r0, r19, 48
    15d0:	b800039c 	bri	924		// 196c
		cx = xCentre + (i - nx/2)*dxy;
    15d4:	e8730088 	lwi	r3, r19, 136
    15d8:	10801800 	addk	r4, r0, r3
    15dc:	90830041 	srl	r4, r3
    15e0:	90840041 	srl	r4, r4
    15e4:	90840041 	srl	r4, r4
    15e8:	90840041 	srl	r4, r4
    15ec:	90840041 	srl	r4, r4
    15f0:	90840041 	srl	r4, r4
    15f4:	90840041 	srl	r4, r4
    15f8:	90840041 	srl	r4, r4
    15fc:	90840041 	srl	r4, r4
    1600:	90840041 	srl	r4, r4
    1604:	90840041 	srl	r4, r4
    1608:	90840041 	srl	r4, r4
    160c:	90840041 	srl	r4, r4
    1610:	90840041 	srl	r4, r4
    1614:	90840041 	srl	r4, r4
    1618:	90840041 	srl	r4, r4
    161c:	90840041 	srl	r4, r4
    1620:	90840041 	srl	r4, r4
    1624:	90840041 	srl	r4, r4
    1628:	90840041 	srl	r4, r4
    162c:	90840041 	srl	r4, r4
    1630:	90840041 	srl	r4, r4
    1634:	90840041 	srl	r4, r4
    1638:	90840041 	srl	r4, r4
    163c:	90840041 	srl	r4, r4
    1640:	90840041 	srl	r4, r4
    1644:	90840041 	srl	r4, r4
    1648:	90840041 	srl	r4, r4
    164c:	90840041 	srl	r4, r4
    1650:	90840041 	srl	r4, r4
    1654:	90840041 	srl	r4, r4
    1658:	10641800 	addk	r3, r4, r3
    165c:	90630001 	sra	r3, r3
    1660:	e8930030 	lwi	r4, r19, 48
    1664:	14632000 	rsubk	r3, r3, r4
    1668:	10a30000 	addk	r5, r3, r0
    166c:	b0000000 	imm	0
    1670:	b9f456d4 	brlid	r15, 22228	// 6d44 <__floatsidf>
    1674:	80000000 	or	r0, r0, r0
    1678:	10a40000 	addk	r5, r4, r0
    167c:	10830000 	addk	r4, r3, r0
    1680:	10c50000 	addk	r6, r5, r0
    1684:	10a40000 	addk	r5, r4, r0
    1688:	e8f30048 	lwi	r7, r19, 72
    168c:	e913004c 	lwi	r8, r19, 76
    1690:	b0000000 	imm	0
    1694:	b9f44f90 	brlid	r15, 20368	// 6624 <__muldf3>
    1698:	80000000 	or	r0, r0, r0
    169c:	10a40000 	addk	r5, r4, r0
    16a0:	10830000 	addk	r4, r3, r0
    16a4:	10c50000 	addk	r6, r5, r0
    16a8:	10a40000 	addk	r5, r4, r0
    16ac:	e8f30038 	lwi	r7, r19, 56
    16b0:	e913003c 	lwi	r8, r19, 60
    16b4:	b0000000 	imm	0
    16b8:	b9f44e80 	brlid	r15, 20096	// 6538 <__adddf3>
    16bc:	80000000 	or	r0, r0, r0
    16c0:	10a40000 	addk	r5, r4, r0
    16c4:	10830000 	addk	r4, r3, r0
    16c8:	f893005c 	swi	r4, r19, 92
    16cc:	f8b30060 	swi	r5, r19, 96
		zx = 0.0;
    16d0:	10800000 	addk	r4, r0, r0
    16d4:	10a00000 	addk	r5, r0, r0
    16d8:	f893001c 	swi	r4, r19, 28
    16dc:	f8b30020 	swi	r5, r19, 32
		zy = 0.0;
    16e0:	10800000 	addk	r4, r0, r0
    16e4:	10a00000 	addk	r5, r0, r0
    16e8:	f8930024 	swi	r4, r19, 36
    16ec:	f8b30028 	swi	r5, r19, 40
		n = 0;
    16f0:	f013002c 	sbi	r0, r19, 44
		while ((zx*zx + zy*zy < 4.0) && (n != (MAXIT - 1))) {
    16f4:	b8000144 	bri	324		// 1838
		  new_zx = zx*zx - zy*zy + cx;
    16f8:	e8b3001c 	lwi	r5, r19, 28
    16fc:	e8d30020 	lwi	r6, r19, 32
    1700:	e8f3001c 	lwi	r7, r19, 28
    1704:	e9130020 	lwi	r8, r19, 32
    1708:	b0000000 	imm	0
    170c:	b9f44f18 	brlid	r15, 20248	// 6624 <__muldf3>
    1710:	80000000 	or	r0, r0, r0
    1714:	10a40000 	addk	r5, r4, r0
    1718:	10830000 	addk	r4, r3, r0
    171c:	12c40000 	addk	r22, r4, r0
    1720:	12e50000 	addk	r23, r5, r0
    1724:	e8b30024 	lwi	r5, r19, 36
    1728:	e8d30028 	lwi	r6, r19, 40
    172c:	e8f30024 	lwi	r7, r19, 36
    1730:	e9130028 	lwi	r8, r19, 40
    1734:	b0000000 	imm	0
    1738:	b9f44eec 	brlid	r15, 20204	// 6624 <__muldf3>
    173c:	80000000 	or	r0, r0, r0
    1740:	10a40000 	addk	r5, r4, r0
    1744:	10830000 	addk	r4, r3, r0
    1748:	11040000 	addk	r8, r4, r0
    174c:	11250000 	addk	r9, r5, r0
    1750:	10b60000 	addk	r5, r22, r0
    1754:	10d70000 	addk	r6, r23, r0
    1758:	10e80000 	addk	r7, r8, r0
    175c:	11090000 	addk	r8, r9, r0
    1760:	b0000000 	imm	0
    1764:	b9f44e44 	brlid	r15, 20036	// 65a8 <__subdf3>
    1768:	80000000 	or	r0, r0, r0
    176c:	10a40000 	addk	r5, r4, r0
    1770:	10830000 	addk	r4, r3, r0
    1774:	10c50000 	addk	r6, r5, r0
    1778:	10a40000 	addk	r5, r4, r0
    177c:	e8f3005c 	lwi	r7, r19, 92
    1780:	e9130060 	lwi	r8, r19, 96
    1784:	b0000000 	imm	0
    1788:	b9f44db0 	brlid	r15, 19888	// 6538 <__adddf3>
    178c:	80000000 	or	r0, r0, r0
    1790:	10a40000 	addk	r5, r4, r0
    1794:	10830000 	addk	r4, r3, r0
    1798:	f8930064 	swi	r4, r19, 100
    179c:	f8b30068 	swi	r5, r19, 104
		  zy = 2.0*zx*zy + cy;
    17a0:	e913001c 	lwi	r8, r19, 28
    17a4:	e9330020 	lwi	r9, r19, 32
    17a8:	10a80000 	addk	r5, r8, r0
    17ac:	10c90000 	addk	r6, r9, r0
    17b0:	10e80000 	addk	r7, r8, r0
    17b4:	11090000 	addk	r8, r9, r0
    17b8:	b0000000 	imm	0
    17bc:	b9f44d7c 	brlid	r15, 19836	// 6538 <__adddf3>
    17c0:	80000000 	or	r0, r0, r0
    17c4:	10a40000 	addk	r5, r4, r0
    17c8:	10830000 	addk	r4, r3, r0
    17cc:	10c50000 	addk	r6, r5, r0
    17d0:	10a40000 	addk	r5, r4, r0
    17d4:	e8f30024 	lwi	r7, r19, 36
    17d8:	e9130028 	lwi	r8, r19, 40
    17dc:	b0000000 	imm	0
    17e0:	b9f44e44 	brlid	r15, 20036	// 6624 <__muldf3>
    17e4:	80000000 	or	r0, r0, r0
    17e8:	10a40000 	addk	r5, r4, r0
    17ec:	10830000 	addk	r4, r3, r0
    17f0:	10c50000 	addk	r6, r5, r0
    17f4:	10a40000 	addk	r5, r4, r0
    17f8:	e8f30054 	lwi	r7, r19, 84
    17fc:	e9130058 	lwi	r8, r19, 88
    1800:	b0000000 	imm	0
    1804:	b9f44d34 	brlid	r15, 19764	// 6538 <__adddf3>
    1808:	80000000 	or	r0, r0, r0
    180c:	10a40000 	addk	r5, r4, r0
    1810:	10830000 	addk	r4, r3, r0
    1814:	f8930024 	swi	r4, r19, 36
    1818:	f8b30028 	swi	r5, r19, 40
		  zx = new_zx;
    181c:	e8930064 	lwi	r4, r19, 100
    1820:	e8b30068 	lwi	r5, r19, 104
    1824:	f893001c 	swi	r4, r19, 28
    1828:	f8b30020 	swi	r5, r19, 32
		  n++;
    182c:	e073002c 	lbui	r3, r19, 44
    1830:	30630001 	addik	r3, r3, 1
    1834:	f073002c 	sbi	r3, r19, 44
      for (i = 0; i < nx; i++) {
		cx = xCentre + (i - nx/2)*dxy;
		zx = 0.0;
		zy = 0.0;
		n = 0;
		while ((zx*zx + zy*zy < 4.0) && (n != (MAXIT - 1))) {
    1838:	e8b3001c 	lwi	r5, r19, 28
    183c:	e8d30020 	lwi	r6, r19, 32
    1840:	e8f3001c 	lwi	r7, r19, 28
    1844:	e9130020 	lwi	r8, r19, 32
    1848:	b0000000 	imm	0
    184c:	b9f44dd8 	brlid	r15, 19928	// 6624 <__muldf3>
    1850:	80000000 	or	r0, r0, r0
    1854:	10a40000 	addk	r5, r4, r0
    1858:	10830000 	addk	r4, r3, r0
    185c:	12c40000 	addk	r22, r4, r0
    1860:	12e50000 	addk	r23, r5, r0
    1864:	e8b30024 	lwi	r5, r19, 36
    1868:	e8d30028 	lwi	r6, r19, 40
    186c:	e8f30024 	lwi	r7, r19, 36
    1870:	e9130028 	lwi	r8, r19, 40
    1874:	b0000000 	imm	0
    1878:	b9f44dac 	brlid	r15, 19884	// 6624 <__muldf3>
    187c:	80000000 	or	r0, r0, r0
    1880:	10a40000 	addk	r5, r4, r0
    1884:	10830000 	addk	r4, r3, r0
    1888:	11040000 	addk	r8, r4, r0
    188c:	11250000 	addk	r9, r5, r0
    1890:	10b60000 	addk	r5, r22, r0
    1894:	10d70000 	addk	r6, r23, r0
    1898:	10e80000 	addk	r7, r8, r0
    189c:	11090000 	addk	r8, r9, r0
    18a0:	b0000000 	imm	0
    18a4:	b9f44c94 	brlid	r15, 19604	// 6538 <__adddf3>
    18a8:	80000000 	or	r0, r0, r0
    18ac:	10a40000 	addk	r5, r4, r0
    18b0:	10830000 	addk	r4, r3, r0
    18b4:	32c00001 	addik	r22, r0, 1
    18b8:	10c50000 	addk	r6, r5, r0
    18bc:	10a40000 	addk	r5, r4, r0
    18c0:	30e00000 	addik	r7, r0, 0
    18c4:	b0004010 	imm	16400
    18c8:	31000000 	addik	r8, r0, 0
    18cc:	b0000000 	imm	0
    18d0:	b9f453f4 	brlid	r15, 21492	// 6cc4 <__ltdf2>
    18d4:	80000000 	or	r0, r0, r0
    18d8:	bc430008 	blti	r3, 8		// 18e0
    18dc:	12c00000 	addk	r22, r0, r0
    18e0:	a47600ff 	andi	r3, r22, 255
    18e4:	bc03001c 	beqi	r3, 28		// 1900
    18e8:	e093002c 	lbui	r4, r19, 44
    18ec:	b0000000 	imm	0
    18f0:	e8608930 	lwi	r3, r0, -30416	// 8930 <MAXIT>
    18f4:	3063ffff 	addik	r3, r3, -1
    18f8:	88641800 	xor	r3, r4, r3
    18fc:	bc23fdfc 	bnei	r3, -516		// 16f8
		  new_zx = zx*zx - zy*zy + cx;
		  zy = 2.0*zx*zy + cy;
		  zx = new_zx;
		  n++;
		}
		color = mbColor(n);
    1900:	e073002c 	lbui	r3, r19, 44
    1904:	10a30000 	addk	r5, r3, r0
    1908:	b9f406a4 	brlid	r15, 1700	// 1fac <mbColor>
    190c:	80000000 	or	r0, r0, r0
    1910:	f873006c 	swi	r3, r19, 108
		p[(y0 + j)*dy + (x0 + i)] = color;
    1914:	e8930084 	lwi	r4, r19, 132
    1918:	e8730034 	lwi	r3, r19, 52
    191c:	10641800 	addk	r3, r4, r3
    1920:	10a30000 	addk	r5, r3, r0
    1924:	e8d30090 	lwi	r6, r19, 144
    1928:	b0000000 	imm	0
    192c:	b9f456f0 	brlid	r15, 22256	// 701c <__mulsi3>
    1930:	80000000 	or	r0, r0, r0
    1934:	10830000 	addk	r4, r3, r0
    1938:	e8b30080 	lwi	r5, r19, 128
    193c:	e8730030 	lwi	r3, r19, 48
    1940:	10651800 	addk	r3, r5, r3
    1944:	10641800 	addk	r3, r4, r3
    1948:	10631800 	addk	r3, r3, r3
    194c:	10631800 	addk	r3, r3, r3
    1950:	e8930094 	lwi	r4, r19, 148
    1954:	10641800 	addk	r3, r4, r3
    1958:	e893006c 	lwi	r4, r19, 108
    195c:	f8830000 	swi	r4, r3, 0
    // before the magnitude of z exceeds 2, or UCHAR_MAX, whichever is
    // smaller.

    for (j = 0; j < ny; j++) {
      cy = yCentre + (j - ny/2)*dxy;
      for (i = 0; i < nx; i++) {
    1960:	e8730030 	lwi	r3, r19, 48
    1964:	30630001 	addik	r3, r3, 1
    1968:	f8730030 	swi	r3, r19, 48
    196c:	e8930030 	lwi	r4, r19, 48
    1970:	e8730088 	lwi	r3, r19, 136
    1974:	16432001 	cmp	r18, r3, r4
    1978:	bc52fc5c 	blti	r18, -932		// 15d4
		}
		color = mbColor(n);
		p[(y0 + j)*dy + (x0 + i)] = color;
		// p[(y0 + j)*dy + (x0 + i)] = n>MAXIT/2 ? 0xff0000 | ((n * MAXVAL)/MAXIT):((n * MAXVAL)/MAXIT); // write (1, &n, sizeof(n)); // Write the result to stdout
      }
	  sprint("m");
    197c:	b0000000 	imm	0
    1980:	30a08aa4 	addik	r5, r0, -30044
    1984:	b9f4e8d4 	brlid	r15, -5932	// 258 <sprint>
    1988:	80000000 	or	r0, r0, r0
    // the magnitude of z remains less than 2 for ever, then the point
    // c is in the Mandelbrot set. We write out the number of iterations
    // before the magnitude of z exceeds 2, or UCHAR_MAX, whichever is
    // smaller.

    for (j = 0; j < ny; j++) {
    198c:	e8730034 	lwi	r3, r19, 52
    1990:	30630001 	addik	r3, r3, 1
    1994:	f8730034 	swi	r3, r19, 52
    1998:	e8930034 	lwi	r4, r19, 52
    199c:	e873008c 	lwi	r3, r19, 140
    19a0:	16432001 	cmp	r18, r3, r4
    19a4:	bc52fb2c 	blti	r18, -1236		// 14d0
		// p[(y0 + j)*dy + (x0 + i)] = n>MAXIT/2 ? 0xff0000 | ((n * MAXVAL)/MAXIT):((n * MAXVAL)/MAXIT); // write (1, &n, sizeof(n)); // Write the result to stdout
      }
	  sprint("m");

    }
    sprint("\n\r");
    19a8:	b0000000 	imm	0
    19ac:	30a0895c 	addik	r5, r0, -30372
    19b0:	b9f4e8a8 	brlid	r15, -5976	// 258 <sprint>
    19b4:	80000000 	or	r0, r0, r0

}
    19b8:	e9e10000 	lwi	r15, r1, 0
    19bc:	10330000 	addk	r1, r19, r0
    19c0:	ea610070 	lwi	r19, r1, 112
    19c4:	eac10074 	lwi	r22, r1, 116
    19c8:	eae10078 	lwi	r23, r1, 120
    19cc:	3021007c 	addik	r1, r1, 124
    19d0:	b60f0008 	rtsd	r15, 8
    19d4:	80000000 	or	r0, r0, r0

000019d8 <mbrotHw1>:

void mbrotHw1 (int x0, int y0, int nx, int ny, int dy, Xuint32 *p){
    19d8:	3021ffb4 	addik	r1, r1, -76
    19dc:	f9e10000 	swi	r15, r1, 0
    19e0:	fa610048 	swi	r19, r1, 72
    19e4:	12610000 	addk	r19, r1, r0
    19e8:	f8b30050 	swi	r5, r19, 80
    19ec:	f8d30054 	swi	r6, r19, 84
    19f0:	f8f30058 	swi	r7, r19, 88
    19f4:	f913005c 	swi	r8, r19, 92
    19f8:	f9330060 	swi	r9, r19, 96
    19fc:	f9530064 	swi	r10, r19, 100
	const float xCentre = -0.75;
    1a00:	b000bf40 	imm	-16576
    1a04:	30600000 	addik	r3, r0, 0
    1a08:	f8730024 	swi	r3, r19, 36
	const float yCentre = +0.0;
    1a0c:	10600000 	addk	r3, r0, r0
    1a10:	f8730028 	swi	r3, r19, 40
	const float dxy     = 0.006;
    1a14:	b0003bc4 	imm	15300
    1a18:	30609ba6 	addik	r3, r0, -25690
    1a1c:	f873002c 	swi	r3, r19, 44
    unsigned int n;
    int i, j;
    int color;

    // pointer to iobus area
    volatile Xuint32 *ioBase = (volatile Xuint32 *)XPAR_IOMODULE_0_IO_BASEADDR;
    1a20:	b000c000 	imm	-16384
    1a24:	30600000 	addik	r3, r0, 0
    1a28:	f8730030 	swi	r3, r19, 48
    // need also float pointer for cx,cy!!!!
    volatile float *ioBaseReal = (volatile float *)XPAR_IOMODULE_0_IO_BASEADDR;
    1a2c:	b000c000 	imm	-16384
    1a30:	30600000 	addik	r3, r0, 0
    1a34:	f8730034 	swi	r3, r19, 52
    // the magnitude of z remains less than 2 for ever, then the point
    // c is in the Mandelbrot set. We write out the number of iterations
    // before the magnitude of z exceeds 2, or UCHAR_MAX, whichever is
    // smaller.

    sprint("---FPGA mbrot ---\n\r");
    1a38:	b0000000 	imm	0
    1a3c:	30a08aa8 	addik	r5, r0, -30040
    1a40:	b9f4e818 	brlid	r15, -6120	// 258 <sprint>
    1a44:	80000000 	or	r0, r0, r0
    if (!simulation){
    1a48:	b0000000 	imm	0
    1a4c:	e86092a8 	lwi	r3, r0, -27992	// 92a8 <simulation>
    1a50:	bc23001c 	bnei	r3, 28		// 1a6c
    	xil_printf("base pointer: 0x%x\r\n",p);
    1a54:	b0000000 	imm	0
    1a58:	30a089c0 	addik	r5, r0, -30272
    1a5c:	e8d30064 	lwi	r6, r19, 100
    1a60:	b0000000 	imm	0
    1a64:	b9f40cec 	brlid	r15, 3308	// 2750 <xil_printf>
    1a68:	80000000 	or	r0, r0, r0
    }

    ioBase[cnReg] = MAXIT;
    1a6c:	b0000000 	imm	0
    1a70:	e8608908 	lwi	r3, r0, -30456	// 8908 <cnReg>
    1a74:	10631800 	addk	r3, r3, r3
    1a78:	10631800 	addk	r3, r3, r3
    1a7c:	e8930030 	lwi	r4, r19, 48
    1a80:	10641800 	addk	r3, r4, r3
    1a84:	b0000000 	imm	0
    1a88:	e8808930 	lwi	r4, r0, -30416	// 8930 <MAXIT>
    1a8c:	f8830000 	swi	r4, r3, 0

    for (j = 0; j < ny; j++) {
    1a90:	f8130020 	swi	r0, r19, 32
    1a94:	b80002e4 	bri	740		// 1d78
      cy = yCentre + (j - ny/2)*dxy;
    1a98:	e873005c 	lwi	r3, r19, 92
    1a9c:	10801800 	addk	r4, r0, r3
    1aa0:	90830041 	srl	r4, r3
    1aa4:	90840041 	srl	r4, r4
    1aa8:	90840041 	srl	r4, r4
    1aac:	90840041 	srl	r4, r4
    1ab0:	90840041 	srl	r4, r4
    1ab4:	90840041 	srl	r4, r4
    1ab8:	90840041 	srl	r4, r4
    1abc:	90840041 	srl	r4, r4
    1ac0:	90840041 	srl	r4, r4
    1ac4:	90840041 	srl	r4, r4
    1ac8:	90840041 	srl	r4, r4
    1acc:	90840041 	srl	r4, r4
    1ad0:	90840041 	srl	r4, r4
    1ad4:	90840041 	srl	r4, r4
    1ad8:	90840041 	srl	r4, r4
    1adc:	90840041 	srl	r4, r4
    1ae0:	90840041 	srl	r4, r4
    1ae4:	90840041 	srl	r4, r4
    1ae8:	90840041 	srl	r4, r4
    1aec:	90840041 	srl	r4, r4
    1af0:	90840041 	srl	r4, r4
    1af4:	90840041 	srl	r4, r4
    1af8:	90840041 	srl	r4, r4
    1afc:	90840041 	srl	r4, r4
    1b00:	90840041 	srl	r4, r4
    1b04:	90840041 	srl	r4, r4
    1b08:	90840041 	srl	r4, r4
    1b0c:	90840041 	srl	r4, r4
    1b10:	90840041 	srl	r4, r4
    1b14:	90840041 	srl	r4, r4
    1b18:	90840041 	srl	r4, r4
    1b1c:	10641800 	addk	r3, r4, r3
    1b20:	90630001 	sra	r3, r3
    1b24:	e8930020 	lwi	r4, r19, 32
    1b28:	14632000 	rsubk	r3, r3, r4
    1b2c:	10a30000 	addk	r5, r3, r0
    1b30:	b0000000 	imm	0
    1b34:	b9f441a0 	brlid	r15, 16800	// 5cd4 <__floatsisf>
    1b38:	80000000 	or	r0, r0, r0
    1b3c:	10a30000 	addk	r5, r3, r0
    1b40:	e8d3002c 	lwi	r6, r19, 44
    1b44:	b0000000 	imm	0
    1b48:	b9f43e18 	brlid	r15, 15896	// 5960 <__mulsf3>
    1b4c:	80000000 	or	r0, r0, r0
    1b50:	10a30000 	addk	r5, r3, r0
    1b54:	e8d30028 	lwi	r6, r19, 40
    1b58:	b0000000 	imm	0
    1b5c:	b9f43d48 	brlid	r15, 15688	// 58a4 <__addsf3>
    1b60:	80000000 	or	r0, r0, r0
    1b64:	f8730038 	swi	r3, r19, 56
      ioBaseReal[cyReg] = cy; // cy first
    1b68:	b0000000 	imm	0
    1b6c:	e8608904 	lwi	r3, r0, -30460	// 8904 <cyReg>
    1b70:	10631800 	addk	r3, r3, r3
    1b74:	10631800 	addk	r3, r3, r3
    1b78:	e8930034 	lwi	r4, r19, 52
    1b7c:	10641800 	addk	r3, r4, r3
    1b80:	e8930038 	lwi	r4, r19, 56
    1b84:	f8830000 	swi	r4, r3, 0
      for (i = 0; i < nx; i++) {
    1b88:	f813001c 	swi	r0, r19, 28
    1b8c:	b80001d0 	bri	464		// 1d5c
		cx = xCentre + (i - nx/2)*dxy;
    1b90:	e8730058 	lwi	r3, r19, 88
    1b94:	10801800 	addk	r4, r0, r3
    1b98:	90830041 	srl	r4, r3
    1b9c:	90840041 	srl	r4, r4
    1ba0:	90840041 	srl	r4, r4
    1ba4:	90840041 	srl	r4, r4
    1ba8:	90840041 	srl	r4, r4
    1bac:	90840041 	srl	r4, r4
    1bb0:	90840041 	srl	r4, r4
    1bb4:	90840041 	srl	r4, r4
    1bb8:	90840041 	srl	r4, r4
    1bbc:	90840041 	srl	r4, r4
    1bc0:	90840041 	srl	r4, r4
    1bc4:	90840041 	srl	r4, r4
    1bc8:	90840041 	srl	r4, r4
    1bcc:	90840041 	srl	r4, r4
    1bd0:	90840041 	srl	r4, r4
    1bd4:	90840041 	srl	r4, r4
    1bd8:	90840041 	srl	r4, r4
    1bdc:	90840041 	srl	r4, r4
    1be0:	90840041 	srl	r4, r4
    1be4:	90840041 	srl	r4, r4
    1be8:	90840041 	srl	r4, r4
    1bec:	90840041 	srl	r4, r4
    1bf0:	90840041 	srl	r4, r4
    1bf4:	90840041 	srl	r4, r4
    1bf8:	90840041 	srl	r4, r4
    1bfc:	90840041 	srl	r4, r4
    1c00:	90840041 	srl	r4, r4
    1c04:	90840041 	srl	r4, r4
    1c08:	90840041 	srl	r4, r4
    1c0c:	90840041 	srl	r4, r4
    1c10:	90840041 	srl	r4, r4
    1c14:	10641800 	addk	r3, r4, r3
    1c18:	90630001 	sra	r3, r3
    1c1c:	e893001c 	lwi	r4, r19, 28
    1c20:	14632000 	rsubk	r3, r3, r4
    1c24:	10a30000 	addk	r5, r3, r0
    1c28:	b0000000 	imm	0
    1c2c:	b9f440a8 	brlid	r15, 16552	// 5cd4 <__floatsisf>
    1c30:	80000000 	or	r0, r0, r0
    1c34:	10a30000 	addk	r5, r3, r0
    1c38:	e8d3002c 	lwi	r6, r19, 44
    1c3c:	b0000000 	imm	0
    1c40:	b9f43d20 	brlid	r15, 15648	// 5960 <__mulsf3>
    1c44:	80000000 	or	r0, r0, r0
    1c48:	10a30000 	addk	r5, r3, r0
    1c4c:	e8d30024 	lwi	r6, r19, 36
    1c50:	b0000000 	imm	0
    1c54:	b9f43c50 	brlid	r15, 15440	// 58a4 <__addsf3>
    1c58:	80000000 	or	r0, r0, r0
    1c5c:	f873003c 	swi	r3, r19, 60
		ioBaseReal[cxReg] = cx;
    1c60:	b0000000 	imm	0
    1c64:	e8608900 	lwi	r3, r0, -30464	// 8900 <cxReg>
    1c68:	10631800 	addk	r3, r3, r3
    1c6c:	10631800 	addk	r3, r3, r3
    1c70:	e8930034 	lwi	r4, r19, 52
    1c74:	10641800 	addk	r3, r4, r3
    1c78:	e893003c 	lwi	r4, r19, 60
    1c7c:	f8830000 	swi	r4, r3, 0
		while (0 == (ioBase[statReg] & (1 << doneStatBit))) ; // wait for done
    1c80:	80000000 	or	r0, r0, r0
    1c84:	b0000000 	imm	0
    1c88:	e86088f8 	lwi	r3, r0, -30472	// 88f8 <statReg>
    1c8c:	10631800 	addk	r3, r3, r3
    1c90:	10631800 	addk	r3, r3, r3
    1c94:	e8930030 	lwi	r4, r19, 48
    1c98:	10641800 	addk	r3, r4, r3
    1c9c:	e8830000 	lwi	r4, r3, 0
    1ca0:	b0000000 	imm	0
    1ca4:	e8a08914 	lwi	r5, r0, -30444	// 8914 <doneStatBit>
    1ca8:	30c00001 	addik	r6, r0, 1
    1cac:	a645001f 	andi	r18, r5, 31
    1cb0:	10603000 	addk	r3, r0, r6
    1cb4:	be120014 	beqid	r18, 20		// 1cc8
    1cb8:	10630000 	addk	r3, r3, r0
    1cbc:	3252ffff 	addik	r18, r18, -1
    1cc0:	be32fffc 	bneid	r18, -4		// 1cbc
    1cc4:	10631800 	addk	r3, r3, r3
    1cc8:	84641800 	and	r3, r4, r3
    1ccc:	bc03ffb8 	beqi	r3, -72		// 1c84
		n = ioBase[crReg];
    1cd0:	b0000000 	imm	0
    1cd4:	e860890c 	lwi	r3, r0, -30452	// 890c <crReg>
    1cd8:	10631800 	addk	r3, r3, r3
    1cdc:	10631800 	addk	r3, r3, r3
    1ce0:	e8930030 	lwi	r4, r19, 48
    1ce4:	10641800 	addk	r3, r4, r3
    1ce8:	e8630000 	lwi	r3, r3, 0
    1cec:	f8730040 	swi	r3, r19, 64
		// color = ((n * MAXVAL)/ MAXIT) | (((n >> 3) * MAXVAL) / (MAXIT >> 3)) << 8 | (((n >> 6) * MAXVAL) / (MAXIT >> 6)) << 16 ;
		// color = ((n * MAXVAL)/ MAXIT) | ((((n / 4) * MAXVAL) / (MAXIT / 4)) << 8) | ((((n >> 4) * MAXVAL) ) << 16) ;
		// color = ((n * MAXVAL)/ MAXIT) | ((((n / 4) * MAXVAL) / (MAXIT / 4)) << 8) | ((~((((n / 64 ) * MAXVAL) / (MAXIT / 64 ))) & 0xff) << 16) ;
		color = mbColor(n);
    1cf0:	e8730040 	lwi	r3, r19, 64
    1cf4:	10a30000 	addk	r5, r3, r0
    1cf8:	b9f402b4 	brlid	r15, 692	// 1fac <mbColor>
    1cfc:	80000000 	or	r0, r0, r0
    1d00:	f8730044 	swi	r3, r19, 68
		// color =  ((((n / 4) * MAXVAL) / (MAXIT / 4)) << 8) | ((((n / 64 ) * MAXVAL) / (MAXIT / 64 )) << 16) ;
		// p[(y0 + j)*dy + (x0 + i)] = n>MAXIT/2 ? 0xff0000 | ((n * MAXVAL)/MAXIT):((n * MAXVAL)/MAXIT); // write (1, &n, sizeof(n)); // Write the result to stdout
		p[(y0 + j)*dy + (x0 + i)] = color;
    1d04:	e8930054 	lwi	r4, r19, 84
    1d08:	e8730020 	lwi	r3, r19, 32
    1d0c:	10641800 	addk	r3, r4, r3
    1d10:	10a30000 	addk	r5, r3, r0
    1d14:	e8d30060 	lwi	r6, r19, 96
    1d18:	b0000000 	imm	0
    1d1c:	b9f45300 	brlid	r15, 21248	// 701c <__mulsi3>
    1d20:	80000000 	or	r0, r0, r0
    1d24:	10830000 	addk	r4, r3, r0
    1d28:	e8b30050 	lwi	r5, r19, 80
    1d2c:	e873001c 	lwi	r3, r19, 28
    1d30:	10651800 	addk	r3, r5, r3
    1d34:	10641800 	addk	r3, r4, r3
    1d38:	10631800 	addk	r3, r3, r3
    1d3c:	10631800 	addk	r3, r3, r3
    1d40:	e8930064 	lwi	r4, r19, 100
    1d44:	10641800 	addk	r3, r4, r3
    1d48:	e8930044 	lwi	r4, r19, 68
    1d4c:	f8830000 	swi	r4, r3, 0
    ioBase[cnReg] = MAXIT;

    for (j = 0; j < ny; j++) {
      cy = yCentre + (j - ny/2)*dxy;
      ioBaseReal[cyReg] = cy; // cy first
      for (i = 0; i < nx; i++) {
    1d50:	e873001c 	lwi	r3, r19, 28
    1d54:	30630001 	addik	r3, r3, 1
    1d58:	f873001c 	swi	r3, r19, 28
    1d5c:	e893001c 	lwi	r4, r19, 28
    1d60:	e8730058 	lwi	r3, r19, 88
    1d64:	16432001 	cmp	r18, r3, r4
    1d68:	bc52fe28 	blti	r18, -472		// 1b90
    	xil_printf("base pointer: 0x%x\r\n",p);
    }

    ioBase[cnReg] = MAXIT;

    for (j = 0; j < ny; j++) {
    1d6c:	e8730020 	lwi	r3, r19, 32
    1d70:	30630001 	addik	r3, r3, 1
    1d74:	f8730020 	swi	r3, r19, 32
    1d78:	e8930020 	lwi	r4, r19, 32
    1d7c:	e873005c 	lwi	r3, r19, 92
    1d80:	16432001 	cmp	r18, r3, r4
    1d84:	bc52fd14 	blti	r18, -748		// 1a98
		// p[(y0 + j)*dy + (x0 + i)] = n>MAXIT/2 ? 0xff0000 | ((n * MAXVAL)/MAXIT):((n * MAXVAL)/MAXIT); // write (1, &n, sizeof(n)); // Write the result to stdout
		p[(y0 + j)*dy + (x0 + i)] = color;
      }
    }

}
    1d88:	e9e10000 	lwi	r15, r1, 0
    1d8c:	10330000 	addk	r1, r19, r0
    1d90:	ea610048 	lwi	r19, r1, 72
    1d94:	3021004c 	addik	r1, r1, 76
    1d98:	b60f0008 	rtsd	r15, 8
    1d9c:	80000000 	or	r0, r0, r0

00001da0 <mbrotTest>:


void mbrotTest(void) {
    1da0:	3021ff9c 	addik	r1, r1, -100
    1da4:	f9e10000 	swi	r15, r1, 0
    1da8:	fa610060 	swi	r19, r1, 96
    1dac:	12610000 	addk	r19, r1, r0
    --bddd2f18 bf75c290 (-0.108000, -0.960000) :21
    --bd9fbe78 bf75c290 (-0.078000, -0.960000) :f
    --bde978d8 bf743958 (-0.114000, -0.954000) :e
    --bdd0e560 bf743958 (-0.102000, -0.954000) :26
    */
	const int MAXIT = 64; // 255;
    1db0:	30600040 	addik	r3, r0, 64
    1db4:	f8730020 	swi	r3, r19, 32
    float cx[] = {-0.108000,-0.144000,-0.108000,-0.078000,-0.114000,-0.102000};
    1db8:	b0000000 	imm	0
    1dbc:	e9008ad8 	lwi	r8, r0, -29992
    1dc0:	b0000000 	imm	0
    1dc4:	e8e08adc 	lwi	r7, r0, -29988
    1dc8:	b0000000 	imm	0
    1dcc:	e8c08ae0 	lwi	r6, r0, -29984
    1dd0:	b0000000 	imm	0
    1dd4:	e8a08ae4 	lwi	r5, r0, -29980
    1dd8:	b0000000 	imm	0
    1ddc:	e8808ae8 	lwi	r4, r0, -29976
    1de0:	b0000000 	imm	0
    1de4:	e8608aec 	lwi	r3, r0, -29972
    1de8:	f9130030 	swi	r8, r19, 48
    1dec:	f8f30034 	swi	r7, r19, 52
    1df0:	f8d30038 	swi	r6, r19, 56
    1df4:	f8b3003c 	swi	r5, r19, 60
    1df8:	f8930040 	swi	r4, r19, 64
    1dfc:	f8730044 	swi	r3, r19, 68
    float cy[] = {-0.954000,-0.960000,-0.960000,-0.960000,-0.954000,-0.954000};
    1e00:	b0000000 	imm	0
    1e04:	e9008af0 	lwi	r8, r0, -29968
    1e08:	b0000000 	imm	0
    1e0c:	e8e08af4 	lwi	r7, r0, -29964
    1e10:	b0000000 	imm	0
    1e14:	e8c08af8 	lwi	r6, r0, -29960
    1e18:	b0000000 	imm	0
    1e1c:	e8a08afc 	lwi	r5, r0, -29956
    1e20:	b0000000 	imm	0
    1e24:	e8808b00 	lwi	r4, r0, -29952
    1e28:	b0000000 	imm	0
    1e2c:	e8608b04 	lwi	r3, r0, -29948
    1e30:	f9130048 	swi	r8, r19, 72
    1e34:	f8f3004c 	swi	r7, r19, 76
    1e38:	f8d30050 	swi	r6, r19, 80
    1e3c:	f8b30054 	swi	r5, r19, 84
    1e40:	f8930058 	swi	r4, r19, 88
    1e44:	f873005c 	swi	r3, r19, 92
    unsigned int n;
    int i;

    // pointer to iobus area. We need floats for cx,cy!!!!
    volatile Xuint32 *ioBase = (volatile Xuint32 *)XPAR_IOMODULE_0_IO_BASEADDR;
    1e48:	b000c000 	imm	-16384
    1e4c:	30600000 	addik	r3, r0, 0
    1e50:	f8730024 	swi	r3, r19, 36
    volatile float *ioBaseReal = (volatile float *)XPAR_IOMODULE_0_IO_BASEADDR;
    1e54:	b000c000 	imm	-16384
    1e58:	30600000 	addik	r3, r0, 0
    1e5c:	f8730028 	swi	r3, r19, 40
    sprint("---FPGA mbrot test ---\n\r");
    1e60:	b0000000 	imm	0
    1e64:	30a08abc 	addik	r5, r0, -30020
    1e68:	b9f4e3f0 	brlid	r15, -7184	// 258 <sprint>
    1e6c:	80000000 	or	r0, r0, r0

    ioBase[cnReg] = MAXIT;
    1e70:	b0000000 	imm	0
    1e74:	e8608908 	lwi	r3, r0, -30456	// 8908 <cnReg>
    1e78:	10631800 	addk	r3, r3, r3
    1e7c:	10631800 	addk	r3, r3, r3
    1e80:	e8930024 	lwi	r4, r19, 36
    1e84:	10641800 	addk	r3, r4, r3
    1e88:	e8930020 	lwi	r4, r19, 32
    1e8c:	f8830000 	swi	r4, r3, 0
    for (i=0; i < sizeof(cx)/sizeof(float); i++ ){
    1e90:	f813001c 	swi	r0, r19, 28
    1e94:	b80000f0 	bri	240		// 1f84
    	//ioBase[cyReg] = *((unsigned int*)&(cy[i]));
    	//ioBase[cxReg] = *((unsigned int*)&(cx[i]));
    	ioBaseReal[cyReg] = cy[i];
    1e98:	b0000000 	imm	0
    1e9c:	e8608904 	lwi	r3, r0, -30460	// 8904 <cyReg>
    1ea0:	10631800 	addk	r3, r3, r3
    1ea4:	10631800 	addk	r3, r3, r3
    1ea8:	e8930028 	lwi	r4, r19, 40
    1eac:	10841800 	addk	r4, r4, r3
    1eb0:	e873001c 	lwi	r3, r19, 28
    1eb4:	10631800 	addk	r3, r3, r3
    1eb8:	10631800 	addk	r3, r3, r3
    1ebc:	30b3001c 	addik	r5, r19, 28
    1ec0:	10651800 	addk	r3, r5, r3
    1ec4:	3063002c 	addik	r3, r3, 44
    1ec8:	e8630000 	lwi	r3, r3, 0
    1ecc:	f8640000 	swi	r3, r4, 0
    	ioBaseReal[cxReg] = cx[i];
    1ed0:	b0000000 	imm	0
    1ed4:	e8608900 	lwi	r3, r0, -30464	// 8900 <cxReg>
    1ed8:	10631800 	addk	r3, r3, r3
    1edc:	10631800 	addk	r3, r3, r3
    1ee0:	e8930028 	lwi	r4, r19, 40
    1ee4:	10841800 	addk	r4, r4, r3
    1ee8:	e873001c 	lwi	r3, r19, 28
    1eec:	10631800 	addk	r3, r3, r3
    1ef0:	10631800 	addk	r3, r3, r3
    1ef4:	30b3001c 	addik	r5, r19, 28
    1ef8:	10651800 	addk	r3, r5, r3
    1efc:	30630014 	addik	r3, r3, 20
    1f00:	e8630000 	lwi	r3, r3, 0
    1f04:	f8640000 	swi	r3, r4, 0
    	while (0 == (ioBase[statReg] & (1 << doneStatBit))) ; // wait for done
    1f08:	80000000 	or	r0, r0, r0
    1f0c:	b0000000 	imm	0
    1f10:	e86088f8 	lwi	r3, r0, -30472	// 88f8 <statReg>
    1f14:	10631800 	addk	r3, r3, r3
    1f18:	10631800 	addk	r3, r3, r3
    1f1c:	e8930024 	lwi	r4, r19, 36
    1f20:	10641800 	addk	r3, r4, r3
    1f24:	e8830000 	lwi	r4, r3, 0
    1f28:	b0000000 	imm	0
    1f2c:	e8a08914 	lwi	r5, r0, -30444	// 8914 <doneStatBit>
    1f30:	30c00001 	addik	r6, r0, 1
    1f34:	a645001f 	andi	r18, r5, 31
    1f38:	10603000 	addk	r3, r0, r6
    1f3c:	be120014 	beqid	r18, 20		// 1f50
    1f40:	10630000 	addk	r3, r3, r0
    1f44:	3252ffff 	addik	r18, r18, -1
    1f48:	be32fffc 	bneid	r18, -4		// 1f44
    1f4c:	10631800 	addk	r3, r3, r3
    1f50:	84641800 	and	r3, r4, r3
    1f54:	bc03ffb8 	beqi	r3, -72		// 1f0c
    	n = ioBase[crReg];
    1f58:	b0000000 	imm	0
    1f5c:	e860890c 	lwi	r3, r0, -30452	// 890c <crReg>
    1f60:	10631800 	addk	r3, r3, r3
    1f64:	10631800 	addk	r3, r3, r3
    1f68:	e8930024 	lwi	r4, r19, 36
    1f6c:	10641800 	addk	r3, r4, r3
    1f70:	e8630000 	lwi	r3, r3, 0
    1f74:	f873002c 	swi	r3, r19, 44
    volatile Xuint32 *ioBase = (volatile Xuint32 *)XPAR_IOMODULE_0_IO_BASEADDR;
    volatile float *ioBaseReal = (volatile float *)XPAR_IOMODULE_0_IO_BASEADDR;
    sprint("---FPGA mbrot test ---\n\r");

    ioBase[cnReg] = MAXIT;
    for (i=0; i < sizeof(cx)/sizeof(float); i++ ){
    1f78:	e873001c 	lwi	r3, r19, 28
    1f7c:	30630001 	addik	r3, r3, 1
    1f80:	f873001c 	swi	r3, r19, 28
    1f84:	e893001c 	lwi	r4, r19, 28
    1f88:	30600005 	addik	r3, r0, 5
    1f8c:	16441803 	cmpu	r18, r4, r3
    1f90:	bcb2ff08 	bgei	r18, -248		// 1e98
    	n = ioBase[crReg];

    }


}
    1f94:	e9e10000 	lwi	r15, r1, 0
    1f98:	10330000 	addk	r1, r19, r0
    1f9c:	ea610060 	lwi	r19, r1, 96
    1fa0:	30210064 	addik	r1, r1, 100
    1fa4:	b60f0008 	rtsd	r15, 8
    1fa8:	80000000 	or	r0, r0, r0

00001fac <mbColor>:

inline int mbColor(int n){
    1fac:	3021ffd8 	addik	r1, r1, -40
    1fb0:	f9e10000 	swi	r15, r1, 0
    1fb4:	fa610020 	swi	r19, r1, 32
    1fb8:	fac10024 	swi	r22, r1, 36
    1fbc:	12610000 	addk	r19, r1, r0
    1fc0:	f8b3002c 	swi	r5, r19, 44
	const int MAXVAL = 256;
    1fc4:	30600100 	addik	r3, r0, 256
    1fc8:	f873001c 	swi	r3, r19, 28
	return (((n * MAXVAL)/ MAXIT) | ((((n / 4) * MAXVAL) / (MAXIT / 4)) << 8) | (((((n / 64 ) * MAXVAL) / (MAXIT / 64 ))) << 16)) ;
    1fcc:	e8b3002c 	lwi	r5, r19, 44
    1fd0:	e8d3001c 	lwi	r6, r19, 28
    1fd4:	b0000000 	imm	0
    1fd8:	b9f45044 	brlid	r15, 20548	// 701c <__mulsi3>
    1fdc:	80000000 	or	r0, r0, r0
    1fe0:	10830000 	addk	r4, r3, r0
    1fe4:	b0000000 	imm	0
    1fe8:	e8608930 	lwi	r3, r0, -30416	// 8930 <MAXIT>
    1fec:	10a40000 	addk	r5, r4, r0
    1ff0:	10c30000 	addk	r6, r3, r0
    1ff4:	b0000000 	imm	0
    1ff8:	b9f44eec 	brlid	r15, 20204	// 6ee4 <__divsi3>
    1ffc:	80000000 	or	r0, r0, r0
    2000:	12c30000 	addk	r22, r3, r0
    2004:	e873002c 	lwi	r3, r19, 44
    2008:	10801800 	addk	r4, r0, r3
    200c:	90830001 	sra	r4, r3
    2010:	90840001 	sra	r4, r4
    2014:	90840001 	sra	r4, r4
    2018:	90840001 	sra	r4, r4
    201c:	90840001 	sra	r4, r4
    2020:	90840001 	sra	r4, r4
    2024:	90840001 	sra	r4, r4
    2028:	90840001 	sra	r4, r4
    202c:	90840001 	sra	r4, r4
    2030:	90840001 	sra	r4, r4
    2034:	90840001 	sra	r4, r4
    2038:	90840001 	sra	r4, r4
    203c:	90840001 	sra	r4, r4
    2040:	90840001 	sra	r4, r4
    2044:	90840001 	sra	r4, r4
    2048:	90840001 	sra	r4, r4
    204c:	90840001 	sra	r4, r4
    2050:	90840001 	sra	r4, r4
    2054:	90840001 	sra	r4, r4
    2058:	90840001 	sra	r4, r4
    205c:	90840001 	sra	r4, r4
    2060:	90840001 	sra	r4, r4
    2064:	90840001 	sra	r4, r4
    2068:	90840001 	sra	r4, r4
    206c:	90840001 	sra	r4, r4
    2070:	90840001 	sra	r4, r4
    2074:	90840001 	sra	r4, r4
    2078:	90840001 	sra	r4, r4
    207c:	90840001 	sra	r4, r4
    2080:	90840001 	sra	r4, r4
    2084:	90840001 	sra	r4, r4
    2088:	a4840003 	andi	r4, r4, 3
    208c:	10841800 	addk	r4, r4, r3
    2090:	10602000 	addk	r3, r0, r4
    2094:	90640001 	sra	r3, r4
    2098:	90630001 	sra	r3, r3
    209c:	10a30000 	addk	r5, r3, r0
    20a0:	e8d3001c 	lwi	r6, r19, 28
    20a4:	b0000000 	imm	0
    20a8:	b9f44f74 	brlid	r15, 20340	// 701c <__mulsi3>
    20ac:	80000000 	or	r0, r0, r0
    20b0:	10830000 	addk	r4, r3, r0
    20b4:	b0000000 	imm	0
    20b8:	e8608930 	lwi	r3, r0, -30416	// 8930 <MAXIT>
    20bc:	10a01800 	addk	r5, r0, r3
    20c0:	90a30001 	sra	r5, r3
    20c4:	90a50001 	sra	r5, r5
    20c8:	90a50001 	sra	r5, r5
    20cc:	90a50001 	sra	r5, r5
    20d0:	90a50001 	sra	r5, r5
    20d4:	90a50001 	sra	r5, r5
    20d8:	90a50001 	sra	r5, r5
    20dc:	90a50001 	sra	r5, r5
    20e0:	90a50001 	sra	r5, r5
    20e4:	90a50001 	sra	r5, r5
    20e8:	90a50001 	sra	r5, r5
    20ec:	90a50001 	sra	r5, r5
    20f0:	90a50001 	sra	r5, r5
    20f4:	90a50001 	sra	r5, r5
    20f8:	90a50001 	sra	r5, r5
    20fc:	90a50001 	sra	r5, r5
    2100:	90a50001 	sra	r5, r5
    2104:	90a50001 	sra	r5, r5
    2108:	90a50001 	sra	r5, r5
    210c:	90a50001 	sra	r5, r5
    2110:	90a50001 	sra	r5, r5
    2114:	90a50001 	sra	r5, r5
    2118:	90a50001 	sra	r5, r5
    211c:	90a50001 	sra	r5, r5
    2120:	90a50001 	sra	r5, r5
    2124:	90a50001 	sra	r5, r5
    2128:	90a50001 	sra	r5, r5
    212c:	90a50001 	sra	r5, r5
    2130:	90a50001 	sra	r5, r5
    2134:	90a50001 	sra	r5, r5
    2138:	90a50001 	sra	r5, r5
    213c:	a4a50003 	andi	r5, r5, 3
    2140:	10a51800 	addk	r5, r5, r3
    2144:	10602800 	addk	r3, r0, r5
    2148:	90650001 	sra	r3, r5
    214c:	90630001 	sra	r3, r3
    2150:	10a40000 	addk	r5, r4, r0
    2154:	10c30000 	addk	r6, r3, r0
    2158:	b0000000 	imm	0
    215c:	b9f44d88 	brlid	r15, 19848	// 6ee4 <__divsi3>
    2160:	80000000 	or	r0, r0, r0
    2164:	10631800 	addk	r3, r3, r3
    2168:	10631800 	addk	r3, r3, r3
    216c:	10631800 	addk	r3, r3, r3
    2170:	10631800 	addk	r3, r3, r3
    2174:	10631800 	addk	r3, r3, r3
    2178:	10631800 	addk	r3, r3, r3
    217c:	10631800 	addk	r3, r3, r3
    2180:	10631800 	addk	r3, r3, r3
    2184:	82d61800 	or	r22, r22, r3
    2188:	e873002c 	lwi	r3, r19, 44
    218c:	10801800 	addk	r4, r0, r3
    2190:	90830001 	sra	r4, r3
    2194:	90840001 	sra	r4, r4
    2198:	90840001 	sra	r4, r4
    219c:	90840001 	sra	r4, r4
    21a0:	90840001 	sra	r4, r4
    21a4:	90840001 	sra	r4, r4
    21a8:	90840001 	sra	r4, r4
    21ac:	90840001 	sra	r4, r4
    21b0:	90840001 	sra	r4, r4
    21b4:	90840001 	sra	r4, r4
    21b8:	90840001 	sra	r4, r4
    21bc:	90840001 	sra	r4, r4
    21c0:	90840001 	sra	r4, r4
    21c4:	90840001 	sra	r4, r4
    21c8:	90840001 	sra	r4, r4
    21cc:	90840001 	sra	r4, r4
    21d0:	90840001 	sra	r4, r4
    21d4:	90840001 	sra	r4, r4
    21d8:	90840001 	sra	r4, r4
    21dc:	90840001 	sra	r4, r4
    21e0:	90840001 	sra	r4, r4
    21e4:	90840001 	sra	r4, r4
    21e8:	90840001 	sra	r4, r4
    21ec:	90840001 	sra	r4, r4
    21f0:	90840001 	sra	r4, r4
    21f4:	90840001 	sra	r4, r4
    21f8:	90840001 	sra	r4, r4
    21fc:	90840001 	sra	r4, r4
    2200:	90840001 	sra	r4, r4
    2204:	90840001 	sra	r4, r4
    2208:	90840001 	sra	r4, r4
    220c:	a484003f 	andi	r4, r4, 63
    2210:	10841800 	addk	r4, r4, r3
    2214:	10602000 	addk	r3, r0, r4
    2218:	90640001 	sra	r3, r4
    221c:	90630001 	sra	r3, r3
    2220:	90630001 	sra	r3, r3
    2224:	90630001 	sra	r3, r3
    2228:	90630001 	sra	r3, r3
    222c:	90630001 	sra	r3, r3
    2230:	10a30000 	addk	r5, r3, r0
    2234:	e8d3001c 	lwi	r6, r19, 28
    2238:	b0000000 	imm	0
    223c:	b9f44de0 	brlid	r15, 19936	// 701c <__mulsi3>
    2240:	80000000 	or	r0, r0, r0
    2244:	10830000 	addk	r4, r3, r0
    2248:	b0000000 	imm	0
    224c:	e8608930 	lwi	r3, r0, -30416	// 8930 <MAXIT>
    2250:	10a01800 	addk	r5, r0, r3
    2254:	90a30001 	sra	r5, r3
    2258:	90a50001 	sra	r5, r5
    225c:	90a50001 	sra	r5, r5
    2260:	90a50001 	sra	r5, r5
    2264:	90a50001 	sra	r5, r5
    2268:	90a50001 	sra	r5, r5
    226c:	90a50001 	sra	r5, r5
    2270:	90a50001 	sra	r5, r5
    2274:	90a50001 	sra	r5, r5
    2278:	90a50001 	sra	r5, r5
    227c:	90a50001 	sra	r5, r5
    2280:	90a50001 	sra	r5, r5
    2284:	90a50001 	sra	r5, r5
    2288:	90a50001 	sra	r5, r5
    228c:	90a50001 	sra	r5, r5
    2290:	90a50001 	sra	r5, r5
    2294:	90a50001 	sra	r5, r5
    2298:	90a50001 	sra	r5, r5
    229c:	90a50001 	sra	r5, r5
    22a0:	90a50001 	sra	r5, r5
    22a4:	90a50001 	sra	r5, r5
    22a8:	90a50001 	sra	r5, r5
    22ac:	90a50001 	sra	r5, r5
    22b0:	90a50001 	sra	r5, r5
    22b4:	90a50001 	sra	r5, r5
    22b8:	90a50001 	sra	r5, r5
    22bc:	90a50001 	sra	r5, r5
    22c0:	90a50001 	sra	r5, r5
    22c4:	90a50001 	sra	r5, r5
    22c8:	90a50001 	sra	r5, r5
    22cc:	90a50001 	sra	r5, r5
    22d0:	a4a5003f 	andi	r5, r5, 63
    22d4:	10a51800 	addk	r5, r5, r3
    22d8:	10602800 	addk	r3, r0, r5
    22dc:	90650001 	sra	r3, r5
    22e0:	90630001 	sra	r3, r3
    22e4:	90630001 	sra	r3, r3
    22e8:	90630001 	sra	r3, r3
    22ec:	90630001 	sra	r3, r3
    22f0:	90630001 	sra	r3, r3
    22f4:	10a40000 	addk	r5, r4, r0
    22f8:	10c30000 	addk	r6, r3, r0
    22fc:	b0000000 	imm	0
    2300:	b9f44be4 	brlid	r15, 19428	// 6ee4 <__divsi3>
    2304:	80000000 	or	r0, r0, r0
    2308:	10631800 	addk	r3, r3, r3
    230c:	10631800 	addk	r3, r3, r3
    2310:	10631800 	addk	r3, r3, r3
    2314:	10631800 	addk	r3, r3, r3
    2318:	10631800 	addk	r3, r3, r3
    231c:	10631800 	addk	r3, r3, r3
    2320:	10631800 	addk	r3, r3, r3
    2324:	10631800 	addk	r3, r3, r3
    2328:	10631800 	addk	r3, r3, r3
    232c:	10631800 	addk	r3, r3, r3
    2330:	10631800 	addk	r3, r3, r3
    2334:	10631800 	addk	r3, r3, r3
    2338:	10631800 	addk	r3, r3, r3
    233c:	10631800 	addk	r3, r3, r3
    2340:	10631800 	addk	r3, r3, r3
    2344:	10631800 	addk	r3, r3, r3
    2348:	80761800 	or	r3, r22, r3
}
    234c:	e9e10000 	lwi	r15, r1, 0
    2350:	10330000 	addk	r1, r19, r0
    2354:	ea610020 	lwi	r19, r1, 32
    2358:	eac10024 	lwi	r22, r1, 36
    235c:	30210028 	addik	r1, r1, 40
    2360:	b60f0008 	rtsd	r15, 8
    2364:	80000000 	or	r0, r0, r0

00002368 <IOModuleSelfTestExample>:
*
* @note     None.
*
******************************************************************************/
XStatus IOModuleSelfTestExample(Xuint16 DeviceId)
{
    2368:	3021ffdc 	addik	r1, r1, -36
    236c:	f9e10000 	swi	r15, r1, 0
    2370:	fa610020 	swi	r19, r1, 32
    2374:	12610000 	addk	r19, r1, r0
    2378:	10650000 	addk	r3, r5, r0
    237c:	f4730028 	shi	r3, r19, 40
    XStatus Status;

    /*
     * Initialize the IO Module driver so that it is ready to use.
     */
    Status = XIOModule_Initialize(&IOModule, DeviceId);
    2380:	e4730028 	lhui	r3, r19, 40
    2384:	b0000000 	imm	0
    2388:	30a092cc 	addik	r5, r0, -27956	// 92cc <IOModule>
    238c:	10c30000 	addk	r6, r3, r0
    2390:	b0000000 	imm	0
    2394:	b9f417bc 	brlid	r15, 6076	// 3b50 <XIOModule_Initialize>
    2398:	80000000 	or	r0, r0, r0
    239c:	f873001c 	swi	r3, r19, 28
    if (Status != XST_SUCCESS)
    23a0:	e873001c 	lwi	r3, r19, 28
    23a4:	bc03000c 	beqi	r3, 12		// 23b0
    {
        return XST_FAILURE;
    23a8:	30600001 	addik	r3, r0, 1
    23ac:	b8000030 	bri	48		// 23dc
    }

    /*
     * Perform a self-test to ensure that the hardware was built correctly.
     */
    Status = XIOModule_SelfTest(&IOModule);
    23b0:	b0000000 	imm	0
    23b4:	30a092cc 	addik	r5, r0, -27956	// 92cc <IOModule>
    23b8:	b0000000 	imm	0
    23bc:	b9f4280c 	brlid	r15, 10252	// 4bc8 <XIOModule_SelfTest>
    23c0:	80000000 	or	r0, r0, r0
    23c4:	f873001c 	swi	r3, r19, 28
    if (Status != XST_SUCCESS)
    23c8:	e873001c 	lwi	r3, r19, 28
    23cc:	bc03000c 	beqi	r3, 12		// 23d8
    {
        return XST_FAILURE;
    23d0:	30600001 	addik	r3, r0, 1
    23d4:	b8000008 	bri	8		// 23dc
    }

    return XST_SUCCESS;
    23d8:	10600000 	addk	r3, r0, r0
}
    23dc:	e9e10000 	lwi	r15, r1, 0
    23e0:	10330000 	addk	r1, r19, r0
    23e4:	ea610020 	lwi	r19, r1, 32
    23e8:	30210024 	addik	r1, r1, 36
    23ec:	b60f0008 	rtsd	r15, 8
    23f0:	80000000 	or	r0, r0, r0

000023f4 <print>:
    23f4:	3021ffdc 	addik	r1, r1, -36
    23f8:	fa61001c 	swi	r19, r1, 28
    23fc:	f9e10000 	swi	r15, r1, 0
    2400:	fac10020 	swi	r22, r1, 32
    2404:	12650000 	addk	r19, r5, r0
    2408:	e0a50000 	lbui	r5, r5, 0
    240c:	90a50060 	sext8	r5, r5
    2410:	be050028 	beqid	r5, 40		// 2438
    2414:	e9e10000 	lwi	r15, r1, 0
    2418:	b0000000 	imm	0
    241c:	b9f408ac 	brlid	r15, 2220	// 2cc8 <outbyte>
    2420:	32d30001 	addik	r22, r19, 1
    2424:	e0b30001 	lbui	r5, r19, 1
    2428:	90a50060 	sext8	r5, r5
    242c:	be25ffec 	bneid	r5, -20		// 2418
    2430:	12760000 	addk	r19, r22, r0
    2434:	e9e10000 	lwi	r15, r1, 0
    2438:	ea61001c 	lwi	r19, r1, 28
    243c:	eac10020 	lwi	r22, r1, 32
    2440:	b60f0008 	rtsd	r15, 8
    2444:	30210024 	addik	r1, r1, 36

00002448 <putnum>:
    2448:	3021ffd8 	addik	r1, r1, -40
    244c:	f9e10000 	swi	r15, r1, 0
    2450:	3061001c 	addik	r3, r1, 28
    2454:	30e00008 	addik	r7, r0, 8	// 8 <_vector_sw_exception>
    2458:	30800007 	addik	r4, r0, 7
    245c:	b810001c 	brid	28		// 2478
    2460:	31400009 	addik	r10, r0, 9
    2464:	f1230000 	sbi	r9, r3, 0
    2468:	30e7ffff 	addik	r7, r7, -1
    246c:	30630001 	addik	r3, r3, 1
    2470:	be070054 	beqid	r7, 84		// 24c4
    2474:	3084ffff 	addik	r4, r4, -1
    2478:	10c42000 	addk	r6, r4, r4
    247c:	10c63000 	addk	r6, r6, r6
    2480:	a646001f 	andi	r18, r6, 31
    2484:	11002800 	addk	r8, r0, r5
    2488:	be120014 	beqid	r18, 20		// 249c
    248c:	11080000 	addk	r8, r8, r0
    2490:	3252ffff 	addik	r18, r18, -1
    2494:	be32fffc 	bneid	r18, -4		// 2490
    2498:	91080041 	srl	r8, r8
    249c:	a4c8000f 	andi	r6, r8, 15
    24a0:	15065001 	cmp	r8, r6, r10
    24a4:	31260030 	addik	r9, r6, 48
    24a8:	bea8ffbc 	bgeid	r8, -68		// 2464
    24ac:	30c60057 	addik	r6, r6, 87
    24b0:	f0c30000 	sbi	r6, r3, 0
    24b4:	30e7ffff 	addik	r7, r7, -1
    24b8:	30630001 	addik	r3, r3, 1
    24bc:	be27ffbc 	bneid	r7, -68		// 2478
    24c0:	3084ffff 	addik	r4, r4, -1
    24c4:	30a1001c 	addik	r5, r1, 28
    24c8:	b000ffff 	imm	-1
    24cc:	b9f4ff28 	brlid	r15, -216	// 23f4 <print>
    24d0:	f0e30000 	sbi	r7, r3, 0
    24d4:	e9e10000 	lwi	r15, r1, 0
    24d8:	b60f0008 	rtsd	r15, 8
    24dc:	30210028 	addik	r1, r1, 40

000024e0 <padding>:
    24e0:	3021ffdc 	addik	r1, r1, -36
    24e4:	14650000 	rsubk	r3, r5, r0
    24e8:	fa61001c 	swi	r19, r1, 28
    24ec:	f9e10000 	swi	r15, r1, 0
    24f0:	fac10020 	swi	r22, r1, 32
    24f4:	80a32800 	or	r5, r3, r5
    24f8:	bea5004c 	bgeid	r5, 76		// 2544
    24fc:	12660000 	addk	r19, r6, r0
    2500:	e8660010 	lwi	r3, r6, 16
    2504:	14830000 	rsubk	r4, r3, r0
    2508:	80641800 	or	r3, r4, r3
    250c:	bea3003c 	bgeid	r3, 60		// 2548
    2510:	e9e10000 	lwi	r15, r1, 0
    2514:	eac60000 	lwi	r22, r6, 0
    2518:	e8660004 	lwi	r3, r6, 4
    251c:	1463b001 	cmp	r3, r3, r22
    2520:	bca30028 	bgei	r3, 40		// 2548
    2524:	e0b3000c 	lbui	r5, r19, 12
    2528:	32d60001 	addik	r22, r22, 1
    252c:	b0000000 	imm	0
    2530:	b9f40798 	brlid	r15, 1944	// 2cc8 <outbyte>
    2534:	90a50060 	sext8	r5, r5
    2538:	e8730004 	lwi	r3, r19, 4
    253c:	1463b001 	cmp	r3, r3, r22
    2540:	bc43ffe4 	blti	r3, -28		// 2524
    2544:	e9e10000 	lwi	r15, r1, 0
    2548:	ea61001c 	lwi	r19, r1, 28
    254c:	eac10020 	lwi	r22, r1, 32
    2550:	b60f0008 	rtsd	r15, 8
    2554:	30210024 	addik	r1, r1, 36

00002558 <outnum>:
    2558:	3021ff90 	addik	r1, r1, -112
    255c:	a866000a 	xori	r3, r6, 10
    2560:	fae1005c 	swi	r23, r1, 92
    2564:	12e60000 	addk	r23, r6, r0
    2568:	b0000000 	imm	0
    256c:	e8c08b08 	lwi	r6, r0, -29944
    2570:	14830000 	rsubk	r4, r3, r0
    2574:	fb410068 	swi	r26, r1, 104
    2578:	f8c1001c 	swi	r6, r1, 28
    257c:	b0000000 	imm	0
    2580:	e8c08b0c 	lwi	r6, r0, -29940
    2584:	f9e10000 	swi	r15, r1, 0
    2588:	fa610054 	swi	r19, r1, 84
    258c:	f8c10020 	swi	r6, r1, 32
    2590:	b0000000 	imm	0
    2594:	e8c08b10 	lwi	r6, r0, -29936
    2598:	fac10058 	swi	r22, r1, 88
    259c:	fb010060 	swi	r24, r1, 96
    25a0:	f8c10024 	swi	r6, r1, 36
    25a4:	b0000000 	imm	0
    25a8:	e8c08b14 	lwi	r6, r0, -29932
    25ac:	fb210064 	swi	r25, r1, 100
    25b0:	fb61006c 	swi	r27, r1, 108
    25b4:	f8c10028 	swi	r6, r1, 40
    25b8:	b0000000 	imm	0
    25bc:	e0c08b18 	lbui	r6, r0, -29928
    25c0:	80641800 	or	r3, r4, r3
    25c4:	13470000 	addk	r26, r7, r0
    25c8:	be43000c 	bltid	r3, 12		// 25d4
    25cc:	f0c1002c 	sbi	r6, r1, 44
    25d0:	bc450174 	blti	r5, 372		// 2744
    25d4:	12650000 	addk	r19, r5, r0
    25d8:	13600000 	addk	r27, r0, r0
    25dc:	33210030 	addik	r25, r1, 48
    25e0:	b810000c 	brid	12		// 25ec
    25e4:	12d90000 	addk	r22, r25, r0
    25e8:	12d80000 	addk	r22, r24, r0
    25ec:	10b30000 	addk	r5, r19, r0
    25f0:	10d70000 	addk	r6, r23, r0
    25f4:	b0000000 	imm	0
    25f8:	b9f44b24 	brlid	r15, 19236	// 711c <__umodsi3>
    25fc:	33160001 	addik	r24, r22, 1
    2600:	10611800 	addk	r3, r1, r3
    2604:	e063001c 	lbui	r3, r3, 28
    2608:	10b30000 	addk	r5, r19, r0
    260c:	10d70000 	addk	r6, r23, r0
    2610:	b0000000 	imm	0
    2614:	b9f44a60 	brlid	r15, 19040	// 7074 <__udivsi3>
    2618:	f0760000 	sbi	r3, r22, 0
    261c:	be23ffcc 	bneid	r3, -52		// 25e8
    2620:	12630000 	addk	r19, r3, r0
    2624:	be1b0014 	beqid	r27, 20		// 2638
    2628:	10b90000 	addk	r5, r25, r0
    262c:	3060002d 	addik	r3, r0, 45
    2630:	f0760001 	sbi	r3, r22, 1
    2634:	33160002 	addik	r24, r22, 2
    2638:	f0180000 	sbi	r0, r24, 0
    263c:	b0000000 	imm	0
    2640:	b9f45e3c 	brlid	r15, 24124	// 847c <strlen>
    2644:	3278ffff 	addik	r19, r24, -1
    2648:	e89a0014 	lwi	r4, r26, 20
    264c:	f87a0000 	swi	r3, r26, 0
    2650:	10da0000 	addk	r6, r26, r0
    2654:	14a40000 	rsubk	r5, r4, r0
    2658:	80a52000 	or	r5, r5, r4
    265c:	a8a5ffff 	xori	r5, r5, -1
    2660:	10602800 	addk	r3, r0, r5
    2664:	90650041 	srl	r3, r5
    2668:	90630041 	srl	r3, r3
    266c:	90630041 	srl	r3, r3
    2670:	90630041 	srl	r3, r3
    2674:	90630041 	srl	r3, r3
    2678:	90630041 	srl	r3, r3
    267c:	90630041 	srl	r3, r3
    2680:	90630041 	srl	r3, r3
    2684:	90630041 	srl	r3, r3
    2688:	90630041 	srl	r3, r3
    268c:	90630041 	srl	r3, r3
    2690:	90630041 	srl	r3, r3
    2694:	90630041 	srl	r3, r3
    2698:	90630041 	srl	r3, r3
    269c:	90630041 	srl	r3, r3
    26a0:	90630041 	srl	r3, r3
    26a4:	90630041 	srl	r3, r3
    26a8:	90630041 	srl	r3, r3
    26ac:	90630041 	srl	r3, r3
    26b0:	90630041 	srl	r3, r3
    26b4:	90630041 	srl	r3, r3
    26b8:	90630041 	srl	r3, r3
    26bc:	90630041 	srl	r3, r3
    26c0:	90630041 	srl	r3, r3
    26c4:	90630041 	srl	r3, r3
    26c8:	90630041 	srl	r3, r3
    26cc:	90630041 	srl	r3, r3
    26d0:	90630041 	srl	r3, r3
    26d4:	90630041 	srl	r3, r3
    26d8:	90630041 	srl	r3, r3
    26dc:	90630041 	srl	r3, r3
    26e0:	10a30000 	addk	r5, r3, r0
    26e4:	b9f4fdfc 	brlid	r15, -516	// 24e0 <padding>
    26e8:	f8610050 	swi	r3, r1, 80
    26ec:	14799803 	cmpu	r3, r25, r19
    26f0:	bc430020 	blti	r3, 32		// 2710
    26f4:	e0b30000 	lbui	r5, r19, 0
    26f8:	3273ffff 	addik	r19, r19, -1
    26fc:	b0000000 	imm	0
    2700:	b9f405c8 	brlid	r15, 1480	// 2cc8 <outbyte>
    2704:	90a50060 	sext8	r5, r5
    2708:	14799803 	cmpu	r3, r25, r19
    270c:	bca3ffe8 	bgei	r3, -24		// 26f4
    2710:	e8ba0014 	lwi	r5, r26, 20
    2714:	b9f4fdcc 	brlid	r15, -564	// 24e0 <padding>
    2718:	10da0000 	addk	r6, r26, r0
    271c:	e9e10000 	lwi	r15, r1, 0
    2720:	ea610054 	lwi	r19, r1, 84
    2724:	eac10058 	lwi	r22, r1, 88
    2728:	eae1005c 	lwi	r23, r1, 92
    272c:	eb010060 	lwi	r24, r1, 96
    2730:	eb210064 	lwi	r25, r1, 100
    2734:	eb410068 	lwi	r26, r1, 104
    2738:	eb61006c 	lwi	r27, r1, 108
    273c:	b60f0008 	rtsd	r15, 8
    2740:	30210070 	addik	r1, r1, 112
    2744:	16650000 	rsubk	r19, r5, r0
    2748:	b810fe94 	brid	-364		// 25dc
    274c:	33600001 	addik	r27, r0, 1

00002750 <xil_printf>:
    2750:	f8a10004 	swi	r5, r1, 4
    2754:	f8c10008 	swi	r6, r1, 8
    2758:	f8e1000c 	swi	r7, r1, 12
    275c:	f9010010 	swi	r8, r1, 16
    2760:	f9210014 	swi	r9, r1, 20
    2764:	f9410018 	swi	r10, r1, 24
    2768:	3021ffac 	addik	r1, r1, -84
    276c:	fac1003c 	swi	r22, r1, 60
    2770:	fb010044 	swi	r24, r1, 68
    2774:	f9e10000 	swi	r15, r1, 0
    2778:	fa610038 	swi	r19, r1, 56
    277c:	fae10040 	swi	r23, r1, 64
    2780:	fb210048 	swi	r25, r1, 72
    2784:	fb41004c 	swi	r26, r1, 76
    2788:	fb610050 	swi	r27, r1, 80
    278c:	12c50000 	addk	r22, r5, r0
    2790:	e0a50000 	lbui	r5, r5, 0
    2794:	90a50060 	sext8	r5, r5
    2798:	be050128 	beqid	r5, 296		// 28c0
    279c:	3301005c 	addik	r24, r1, 92
    27a0:	33400053 	addik	r26, r0, 83
    27a4:	b8100024 	brid	36		// 27c8
    27a8:	33600068 	addik	r27, r0, 104
    27ac:	b0000000 	imm	0
    27b0:	b9f40518 	brlid	r15, 1304	// 2cc8 <outbyte>
    27b4:	12760000 	addk	r19, r22, r0
    27b8:	e0b30001 	lbui	r5, r19, 1
    27bc:	90a50060 	sext8	r5, r5
    27c0:	be050100 	beqid	r5, 256		// 28c0
    27c4:	32d30001 	addik	r22, r19, 1
    27c8:	a8650025 	xori	r3, r5, 37
    27cc:	be23ffe0 	bneid	r3, -32		// 27ac
    27d0:	30807fff 	addik	r4, r0, 32767
    27d4:	e0b60001 	lbui	r5, r22, 1
    27d8:	b0000000 	imm	0
    27dc:	e8c09184 	lwi	r6, r0, -28284	// 9184 <__ctype_ptr__>
    27e0:	12e30000 	addk	r23, r3, r0
    27e4:	90a50060 	sext8	r5, r5
    27e8:	f861002c 	swi	r3, r1, 44
    27ec:	f8610030 	swi	r3, r1, 48
    27f0:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
    27f4:	f8810024 	swi	r4, r1, 36
    27f8:	f0610028 	sbi	r3, r1, 40
    27fc:	10862800 	addk	r4, r6, r5
    2800:	e0640001 	lbui	r3, r4, 1
    2804:	a4830004 	andi	r4, r3, 4
    2808:	be040060 	beqid	r4, 96		// 2868
    280c:	32760001 	addik	r19, r22, 1
    2810:	be1702bc 	beqid	r23, 700		// 2acc
    2814:	a8650030 	xori	r3, r5, 48
    2818:	10600000 	addk	r3, r0, r0
    281c:	e0930001 	lbui	r4, r19, 1
    2820:	3105ffd0 	addik	r8, r5, -48
    2824:	10e31800 	addk	r7, r3, r3
    2828:	90a40060 	sext8	r5, r4
    282c:	10862800 	addk	r4, r6, r5
    2830:	e1240001 	lbui	r9, r4, 1
    2834:	10e73800 	addk	r7, r7, r7
    2838:	10671800 	addk	r3, r7, r3
    283c:	10631800 	addk	r3, r3, r3
    2840:	a4e90004 	andi	r7, r9, 4
    2844:	10634000 	addk	r3, r3, r8
    2848:	be27ffd4 	bneid	r7, -44		// 281c
    284c:	32730001 	addik	r19, r19, 1
    2850:	f8610024 	swi	r3, r1, 36
    2854:	32d3ffff 	addik	r22, r19, -1
    2858:	e0640001 	lbui	r3, r4, 1
    285c:	a4830004 	andi	r4, r3, 4
    2860:	be24ffb0 	bneid	r4, -80		// 2810
    2864:	32760001 	addik	r19, r22, 1
    2868:	a4630003 	andi	r3, r3, 3
    286c:	a8830001 	xori	r4, r3, 1
    2870:	be0402d0 	beqid	r4, 720		// 2b40
    2874:	10650000 	addk	r3, r5, r0
    2878:	3063ffdb 	addik	r3, r3, -37
    287c:	1483d003 	cmpu	r4, r3, r26
    2880:	be44ff38 	bltid	r4, -200		// 27b8
    2884:	10631800 	addk	r3, r3, r3
    2888:	10631800 	addk	r3, r3, r3
    288c:	b0000000 	imm	0
    2890:	30638b1c 	addik	r3, r3, -29924
    2894:	e8630000 	lwi	r3, r3, 0
    2898:	98081800 	bra	r3
    289c:	e8b80000 	lwi	r5, r24, 0
    28a0:	30c00010 	addik	r6, r0, 16	// 10 <_vector_interrupt>
    28a4:	30e1001c 	addik	r7, r1, 28
    28a8:	b9f4fcb0 	brlid	r15, -848	// 2558 <outnum>
    28ac:	33180004 	addik	r24, r24, 4
    28b0:	e0b30001 	lbui	r5, r19, 1
    28b4:	90a50060 	sext8	r5, r5
    28b8:	be25ff10 	bneid	r5, -240		// 27c8
    28bc:	32d30001 	addik	r22, r19, 1
    28c0:	e9e10000 	lwi	r15, r1, 0
    28c4:	ea610038 	lwi	r19, r1, 56
    28c8:	eac1003c 	lwi	r22, r1, 60
    28cc:	eae10040 	lwi	r23, r1, 64
    28d0:	eb010044 	lwi	r24, r1, 68
    28d4:	eb210048 	lwi	r25, r1, 72
    28d8:	eb41004c 	lwi	r26, r1, 76
    28dc:	eb610050 	lwi	r27, r1, 80
    28e0:	b60f0008 	rtsd	r15, 8
    28e4:	30210054 	addik	r1, r1, 84
    28e8:	ead80000 	lwi	r22, r24, 0
    28ec:	33180004 	addik	r24, r24, 4
    28f0:	b0000000 	imm	0
    28f4:	b9f45b88 	brlid	r15, 23432	// 847c <strlen>
    28f8:	10b60000 	addk	r5, r22, r0
    28fc:	e8810030 	lwi	r4, r1, 48
    2900:	30c1001c 	addik	r6, r1, 28
    2904:	f861001c 	swi	r3, r1, 28
    2908:	14a40000 	rsubk	r5, r4, r0
    290c:	80a52000 	or	r5, r5, r4
    2910:	a8a5ffff 	xori	r5, r5, -1
    2914:	10802800 	addk	r4, r0, r5
    2918:	90850041 	srl	r4, r5
    291c:	90840041 	srl	r4, r4
    2920:	90840041 	srl	r4, r4
    2924:	90840041 	srl	r4, r4
    2928:	90840041 	srl	r4, r4
    292c:	90840041 	srl	r4, r4
    2930:	90840041 	srl	r4, r4
    2934:	90840041 	srl	r4, r4
    2938:	90840041 	srl	r4, r4
    293c:	90840041 	srl	r4, r4
    2940:	90840041 	srl	r4, r4
    2944:	90840041 	srl	r4, r4
    2948:	90840041 	srl	r4, r4
    294c:	90840041 	srl	r4, r4
    2950:	90840041 	srl	r4, r4
    2954:	90840041 	srl	r4, r4
    2958:	90840041 	srl	r4, r4
    295c:	90840041 	srl	r4, r4
    2960:	90840041 	srl	r4, r4
    2964:	90840041 	srl	r4, r4
    2968:	90840041 	srl	r4, r4
    296c:	90840041 	srl	r4, r4
    2970:	90840041 	srl	r4, r4
    2974:	90840041 	srl	r4, r4
    2978:	90840041 	srl	r4, r4
    297c:	90840041 	srl	r4, r4
    2980:	90840041 	srl	r4, r4
    2984:	90840041 	srl	r4, r4
    2988:	90840041 	srl	r4, r4
    298c:	90840041 	srl	r4, r4
    2990:	90840041 	srl	r4, r4
    2994:	10a40000 	addk	r5, r4, r0
    2998:	b9f4fb48 	brlid	r15, -1208	// 24e0 <padding>
    299c:	f8810034 	swi	r4, r1, 52
    29a0:	e0760000 	lbui	r3, r22, 0
    29a4:	be03004c 	beqid	r3, 76		// 29f0
    29a8:	e8610024 	lwi	r3, r1, 36
    29ac:	3083ffff 	addik	r4, r3, -1
    29b0:	be230020 	bneid	r3, 32		// 29d0
    29b4:	f8810024 	swi	r4, r1, 36
    29b8:	b810003c 	brid	60		// 29f4
    29bc:	e8a10030 	lwi	r5, r1, 48
    29c0:	3083ffff 	addik	r4, r3, -1
    29c4:	be03002c 	beqid	r3, 44		// 29f0
    29c8:	f8810024 	swi	r4, r1, 36
    29cc:	12d70000 	addk	r22, r23, r0
    29d0:	e0b60000 	lbui	r5, r22, 0
    29d4:	32f60001 	addik	r23, r22, 1
    29d8:	b0000000 	imm	0
    29dc:	b9f402ec 	brlid	r15, 748	// 2cc8 <outbyte>
    29e0:	90a50060 	sext8	r5, r5
    29e4:	e0760001 	lbui	r3, r22, 1
    29e8:	be23ffd8 	bneid	r3, -40		// 29c0
    29ec:	e8610024 	lwi	r3, r1, 36
    29f0:	e8a10030 	lwi	r5, r1, 48
    29f4:	b9f4faec 	brlid	r15, -1300	// 24e0 <padding>
    29f8:	30c1001c 	addik	r6, r1, 28
    29fc:	b810fdc0 	brid	-576		// 27bc
    2a00:	e0b30001 	lbui	r5, r19, 1
    2a04:	e0b60002 	lbui	r5, r22, 2
    2a08:	12d30000 	addk	r22, r19, r0
    2a0c:	90a50060 	sext8	r5, r5
    2a10:	b810fdf0 	brid	-528		// 2800
    2a14:	10862800 	addk	r4, r6, r5
    2a18:	e8b80000 	lwi	r5, r24, 0
    2a1c:	30c0000a 	addik	r6, r0, 10
    2a20:	30e1001c 	addik	r7, r1, 28
    2a24:	b9f4fb34 	brlid	r15, -1228	// 2558 <outnum>
    2a28:	33180004 	addik	r24, r24, 4
    2a2c:	b810fe88 	brid	-376		// 28b4
    2a30:	e0b30001 	lbui	r5, r19, 1
    2a34:	e8b80000 	lwi	r5, r24, 0
    2a38:	33180004 	addik	r24, r24, 4
    2a3c:	b0000000 	imm	0
    2a40:	b9f40288 	brlid	r15, 648	// 2cc8 <outbyte>
    2a44:	90a50060 	sext8	r5, r5
    2a48:	b810fd74 	brid	-652		// 27bc
    2a4c:	e0b30001 	lbui	r5, r19, 1
    2a50:	a8650068 	xori	r3, r5, 104
    2a54:	be23012c 	bneid	r3, 300		// 2b80
    2a58:	1465d801 	cmp	r3, r5, r27
    2a5c:	b0000000 	imm	0
    2a60:	b9f40268 	brlid	r15, 616	// 2cc8 <outbyte>
    2a64:	30a00008 	addik	r5, r0, 8	// 8 <_vector_sw_exception>
    2a68:	e0b60003 	lbui	r5, r22, 3
    2a6c:	b0000000 	imm	0
    2a70:	e8c09184 	lwi	r6, r0, -28284	// 9184 <__ctype_ptr__>
    2a74:	32d60002 	addik	r22, r22, 2
    2a78:	90a50060 	sext8	r5, r5
    2a7c:	b810fd84 	brid	-636		// 2800
    2a80:	10862800 	addk	r4, r6, r5
    2a84:	e0b60002 	lbui	r5, r22, 2
    2a88:	32e00001 	addik	r23, r0, 1
    2a8c:	12d30000 	addk	r22, r19, r0
    2a90:	90a50060 	sext8	r5, r5
    2a94:	b810fd6c 	brid	-660		// 2800
    2a98:	10862800 	addk	r4, r6, r5
    2a9c:	e0b60002 	lbui	r5, r22, 2
    2aa0:	30600001 	addik	r3, r0, 1
    2aa4:	f8610030 	swi	r3, r1, 48
    2aa8:	90a50060 	sext8	r5, r5
    2aac:	12d30000 	addk	r22, r19, r0
    2ab0:	b810fd50 	brid	-688		// 2800
    2ab4:	10862800 	addk	r4, r6, r5
    2ab8:	b0000000 	imm	0
    2abc:	b9f4020c 	brlid	r15, 524	// 2cc8 <outbyte>
    2ac0:	30a00025 	addik	r5, r0, 37
    2ac4:	b810fcf8 	brid	-776		// 27bc
    2ac8:	e0b30001 	lbui	r5, r19, 1
    2acc:	be03007c 	beqid	r3, 124		// 2b48
    2ad0:	30600030 	addik	r3, r0, 48
    2ad4:	e0960001 	lbui	r4, r22, 1
    2ad8:	90840060 	sext8	r4, r4
    2adc:	10662000 	addk	r3, r6, r4
    2ae0:	e0630001 	lbui	r3, r3, 1
    2ae4:	a4630004 	andi	r3, r3, 4
    2ae8:	bc03007c 	beqi	r3, 124		// 2b64
    2aec:	10600000 	addk	r3, r0, r0
    2af0:	e1130001 	lbui	r8, r19, 1
    2af4:	30e4ffd0 	addik	r7, r4, -48
    2af8:	10a31800 	addk	r5, r3, r3
    2afc:	90880060 	sext8	r4, r8
    2b00:	11062000 	addk	r8, r6, r4
    2b04:	e1080001 	lbui	r8, r8, 1
    2b08:	10a52800 	addk	r5, r5, r5
    2b0c:	10651800 	addk	r3, r5, r3
    2b10:	10631800 	addk	r3, r3, r3
    2b14:	a4a80004 	andi	r5, r8, 4
    2b18:	10633800 	addk	r3, r3, r7
    2b1c:	be25ffd4 	bneid	r5, -44		// 2af0
    2b20:	32730001 	addik	r19, r19, 1
    2b24:	10a40000 	addk	r5, r4, r0
    2b28:	30800001 	addik	r4, r0, 1
    2b2c:	f881002c 	swi	r4, r1, 44
    2b30:	f8610020 	swi	r3, r1, 32
    2b34:	10862800 	addk	r4, r6, r5
    2b38:	b810fd20 	brid	-736		// 2858
    2b3c:	32d3ffff 	addik	r22, r19, -1
    2b40:	b810fd38 	brid	-712		// 2878
    2b44:	30650020 	addik	r3, r5, 32
    2b48:	e0960001 	lbui	r4, r22, 1
    2b4c:	f0610028 	sbi	r3, r1, 40
    2b50:	90840060 	sext8	r4, r4
    2b54:	10662000 	addk	r3, r6, r4
    2b58:	e0630001 	lbui	r3, r3, 1
    2b5c:	a4630004 	andi	r3, r3, 4
    2b60:	bc23ff8c 	bnei	r3, -116		// 2aec
    2b64:	10850000 	addk	r4, r5, r0
    2b68:	f8610020 	swi	r3, r1, 32
    2b6c:	10a40000 	addk	r5, r4, r0
    2b70:	30800001 	addik	r4, r0, 1
    2b74:	f881002c 	swi	r4, r1, 44
    2b78:	b810ffc0 	brid	-64		// 2b38
    2b7c:	10862800 	addk	r4, r6, r5
    2b80:	be430020 	bltid	r3, 32		// 2ba0
    2b84:	a8650061 	xori	r3, r5, 97
    2b88:	bc230028 	bnei	r3, 40		// 2bb0
    2b8c:	b0000000 	imm	0
    2b90:	b9f40138 	brlid	r15, 312	// 2cc8 <outbyte>
    2b94:	30a00007 	addik	r5, r0, 7
    2b98:	b810fed4 	brid	-300		// 2a6c
    2b9c:	e0b60003 	lbui	r5, r22, 3
    2ba0:	a865006e 	xori	r3, r5, 110
    2ba4:	be030034 	beqid	r3, 52		// 2bd8
    2ba8:	a8650072 	xori	r3, r5, 114
    2bac:	bc030018 	beqi	r3, 24		// 2bc4
    2bb0:	b0000000 	imm	0
    2bb4:	b9f40114 	brlid	r15, 276	// 2cc8 <outbyte>
    2bb8:	80000000 	or	r0, r0, r0
    2bbc:	b810feb0 	brid	-336		// 2a6c
    2bc0:	e0b60003 	lbui	r5, r22, 3
    2bc4:	b0000000 	imm	0
    2bc8:	b9f40100 	brlid	r15, 256	// 2cc8 <outbyte>
    2bcc:	30a0000d 	addik	r5, r0, 13
    2bd0:	b810fe9c 	brid	-356		// 2a6c
    2bd4:	e0b60003 	lbui	r5, r22, 3
    2bd8:	b0000000 	imm	0
    2bdc:	b9f400ec 	brlid	r15, 236	// 2cc8 <outbyte>
    2be0:	30a0000d 	addik	r5, r0, 13
    2be4:	b0000000 	imm	0
    2be8:	b9f400e0 	brlid	r15, 224	// 2cc8 <outbyte>
    2bec:	30a0000a 	addik	r5, r0, 10
    2bf0:	b810fe7c 	brid	-388		// 2a6c
    2bf4:	e0b60003 	lbui	r5, r22, 3

00002bf8 <_exception_handler>:
    2bf8:	98089000 	bra	r18

00002bfc <_program_clean>:
    2bfc:	b60f0008 	rtsd	r15, 8
    2c00:	80000000 	or	r0, r0, r0

00002c04 <_program_init>:
    2c04:	b60f0008 	rtsd	r15, 8
    2c08:	80000000 	or	r0, r0, r0

00002c0c <_hw_exception_handler>:
.global _hw_exception_handler                               
.section .text                                          
.align 2
.ent _hw_exception_handler
_hw_exception_handler:
        bri     0; 
    2c0c:	b8000000 	bri	0	// 2c0c <_hw_exception_handler>

00002c10 <__interrupt_handler>:
*
* None.
*
******************************************************************************/
void __interrupt_handler(void)
{
    2c10:	3021ffac 	addik	r1, r1, -84
    2c14:	f9e10000 	swi	r15, r1, 0
    2c18:	f8210020 	swi	r1, r1, 32
    2c1c:	f8610024 	swi	r3, r1, 36
    2c20:	f8810028 	swi	r4, r1, 40
    2c24:	f8a1002c 	swi	r5, r1, 44
    2c28:	f8c10030 	swi	r6, r1, 48
    2c2c:	f8e10034 	swi	r7, r1, 52
    2c30:	f9010038 	swi	r8, r1, 56
    2c34:	f921003c 	swi	r9, r1, 60
    2c38:	f9410040 	swi	r10, r1, 64
	/* The compiler saves all volatiles and the MSR */
	MB_InterruptVectorTable.Handler(MB_InterruptVectorTable.CallBackRef);
    2c3c:	b0000000 	imm	0
    2c40:	30609098 	addik	r3, r0, -28520	// 9098 <MB_InterruptVectorTable>
*
* None.
*
******************************************************************************/
void __interrupt_handler(void)
{
    2c44:	f9610044 	swi	r11, r1, 68
    2c48:	f9810048 	swi	r12, r1, 72
    2c4c:	fa21004c 	swi	r17, r1, 76
    2c50:	95608001 	mfs	r11, rmsr
	/* The compiler saves all volatiles and the MSR */
	MB_InterruptVectorTable.Handler(MB_InterruptVectorTable.CallBackRef);
    2c54:	e8830000 	lwi	r4, r3, 0
    2c58:	e8a30004 	lwi	r5, r3, 4
*
* None.
*
******************************************************************************/
void __interrupt_handler(void)
{
    2c5c:	fa410050 	swi	r18, r1, 80
    2c60:	f961001c 	swi	r11, r1, 28
	/* The compiler saves all volatiles and the MSR */
	MB_InterruptVectorTable.Handler(MB_InterruptVectorTable.CallBackRef);
    2c64:	99fc2000 	brald	r15, r4
    2c68:	80000000 	or	r0, r0, r0
	/* The compiler restores all volatiles and MSR, and returns from interrupt */
}
    2c6c:	e9e10000 	lwi	r15, r1, 0
    2c70:	e961001c 	lwi	r11, r1, 28
    2c74:	e8210020 	lwi	r1, r1, 32
    2c78:	940bc001 	mts	rmsr, r11
    2c7c:	e8610024 	lwi	r3, r1, 36
    2c80:	e8810028 	lwi	r4, r1, 40
    2c84:	e8a1002c 	lwi	r5, r1, 44
    2c88:	e8c10030 	lwi	r6, r1, 48
    2c8c:	e8e10034 	lwi	r7, r1, 52
    2c90:	e9010038 	lwi	r8, r1, 56
    2c94:	e921003c 	lwi	r9, r1, 60
    2c98:	e9410040 	lwi	r10, r1, 64
    2c9c:	e9610044 	lwi	r11, r1, 68
    2ca0:	e9810048 	lwi	r12, r1, 72
    2ca4:	ea21004c 	lwi	r17, r1, 76
    2ca8:	ea410050 	lwi	r18, r1, 80
    2cac:	b62e0000 	rtid	r14, 0
    2cb0:	30210054 	addik	r1, r1, 84

00002cb4 <microblaze_register_handler>:
* None.
*
****************************************************************************/
void microblaze_register_handler(XInterruptHandler Handler, void *DataPtr)
{
   MB_InterruptVectorTable.Handler = Handler;
    2cb4:	b0000000 	imm	0
    2cb8:	30609098 	addik	r3, r0, -28520	// 9098 <MB_InterruptVectorTable>
    2cbc:	f8a30000 	swi	r5, r3, 0
   MB_InterruptVectorTable.CallBackRef = DataPtr;
}
    2cc0:	b60f0008 	rtsd	r15, 8
    2cc4:	f8c30004 	swi	r6, r3, 4

00002cc8 <outbyte>:
#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
	 XIOModule_SendByte(STDOUT_BASEADDRESS, c);
    2cc8:	a4c500ff 	andi	r6, r5, 255
    2ccc:	b0008000 	imm	-32768
    2cd0:	30a00000 	addik	r5, r0, 0

#ifdef __cplusplus
}
#endif 

void outbyte(char c) {
    2cd4:	3021ffe4 	addik	r1, r1, -28
    2cd8:	f9e10000 	swi	r15, r1, 0
	 XIOModule_SendByte(STDOUT_BASEADDRESS, c);
    2cdc:	b0000000 	imm	0
    2ce0:	b9f401a8 	brlid	r15, 424	// 2e88 <XIOModule_SendByte>
    2ce4:	80000000 	or	r0, r0, r0
}
    2ce8:	e9e10000 	lwi	r15, r1, 0
    2cec:	b60f0008 	rtsd	r15, 8
    2cf0:	3021001c 	addik	r1, r1, 28

00002cf4 <XIOModule_DeviceInterruptHandler>:
	volatile u32 Register;			/* used as bit bucket */
	XIOModule_Config *CfgPtr;
	XIOModule_VectorTableEntry *TablePtr;

	/* Get the configuration data using the device ID */
	CfgPtr = &XIOModule_ConfigTable[(u32) DeviceId];
    2cf4:	10652800 	addk	r3, r5, r5
    2cf8:	10631800 	addk	r3, r3, r3
    2cfc:	10631800 	addk	r3, r3, r3
    2d00:	14651800 	rsubk	r3, r5, r3
    2d04:	10631800 	addk	r3, r3, r3
    2d08:	10631800 	addk	r3, r3, r3
    2d0c:	10631800 	addk	r3, r3, r3
    2d10:	14a51800 	rsubk	r5, r5, r3
    2d14:	10a52800 	addk	r5, r5, r5
* for the interrupt controller. XPAR_IOMODULE_MAX_INTR_SIZE specifies the
* highest numbered interrupt input signal that is used.
*
******************************************************************************/
void XIOModule_DeviceInterruptHandler(void *DeviceId)
{
    2d18:	3021ffcc 	addik	r1, r1, -52
	volatile u32 Register;			/* used as bit bucket */
	XIOModule_Config *CfgPtr;
	XIOModule_VectorTableEntry *TablePtr;

	/* Get the configuration data using the device ID */
	CfgPtr = &XIOModule_ConfigTable[(u32) DeviceId];
    2d1c:	10a52800 	addk	r5, r5, r5
* for the interrupt controller. XPAR_IOMODULE_MAX_INTR_SIZE specifies the
* highest numbered interrupt input signal that is used.
*
******************************************************************************/
void XIOModule_DeviceInterruptHandler(void *DeviceId)
{
    2d20:	fa610020 	swi	r19, r1, 32
    2d24:	fac10024 	swi	r22, r1, 36
    2d28:	fb01002c 	swi	r24, r1, 44
    2d2c:	fb210030 	swi	r25, r1, 48
    2d30:	f9e10000 	swi	r15, r1, 0
    2d34:	fae10028 	swi	r23, r1, 40
	volatile u32 Register;			/* used as bit bucket */
	XIOModule_Config *CfgPtr;
	XIOModule_VectorTableEntry *TablePtr;

	/* Get the configuration data using the device ID */
	CfgPtr = &XIOModule_ConfigTable[(u32) DeviceId];
    2d38:	b0000000 	imm	0
    2d3c:	326590a8 	addik	r19, r5, -28504

	/* Get the interrupts that are waiting to be serviced
	 */
	IntrStatus = XIOModule_GetIntrStatus(CfgPtr->BaseAddress);
    2d40:	e8b30004 	lwi	r5, r19, 4
    2d44:	33200013 	addik	r25, r0, 19

	/* Service each interrupt that is active and enabled by checking each
	 * bit in the register from LSB to MSB which corresponds to an interrupt
	 * input signal. Skip fast interrupts, indicated by null handler.
	 */
	for (IntrNumber = 0; IntrNumber < XPAR_IOMODULE_INTC_MAX_INTR_SIZE;
    2d48:	13000000 	addk	r24, r0, r0
	/* Get the configuration data using the device ID */
	CfgPtr = &XIOModule_ConfigTable[(u32) DeviceId];

	/* Get the interrupts that are waiting to be serviced
	 */
	IntrStatus = XIOModule_GetIntrStatus(CfgPtr->BaseAddress);
    2d4c:	eae50034 	lwi	r23, r5, 52
*
******************************************************************************/
void XIOModule_DeviceInterruptHandler(void *DeviceId)
{
	u32 IntrStatus;
	u32 IntrMask = 1;
    2d50:	32c00001 	addik	r22, r0, 1
	 * bit in the register from LSB to MSB which corresponds to an interrupt
	 * input signal. Skip fast interrupts, indicated by null handler.
	 */
	for (IntrNumber = 0; IntrNumber < XPAR_IOMODULE_INTC_MAX_INTR_SIZE;
	     IntrNumber++) {
		TablePtr = &(CfgPtr->HandlerTable[IntrNumber]);
    2d54:	1078c000 	addk	r3, r24, r24
    2d58:	10631800 	addk	r3, r3, r3
    2d5c:	10631800 	addk	r3, r3, r3
		if ((IntrStatus & 1) && (TablePtr->Handler != NULL)) {
    2d60:	a4970001 	andi	r4, r23, 1
	 * bit in the register from LSB to MSB which corresponds to an interrupt
	 * input signal. Skip fast interrupts, indicated by null handler.
	 */
	for (IntrNumber = 0; IntrNumber < XPAR_IOMODULE_INTC_MAX_INTR_SIZE;
	     IntrNumber++) {
		TablePtr = &(CfgPtr->HandlerTable[IntrNumber]);
    2d64:	30630044 	addik	r3, r3, 68
			}
		}

		/* Move to the next interrupt to check */
		IntrMask <<= 1;
		IntrStatus >>= 1;
    2d68:	92f70041 	srl	r23, r23
	 * input signal. Skip fast interrupts, indicated by null handler.
	 */
	for (IntrNumber = 0; IntrNumber < XPAR_IOMODULE_INTC_MAX_INTR_SIZE;
	     IntrNumber++) {
		TablePtr = &(CfgPtr->HandlerTable[IntrNumber]);
		if ((IntrStatus & 1) && (TablePtr->Handler != NULL)) {
    2d6c:	be04005c 	beqid	r4, 92		// 2dc8
    2d70:	3339ffff 	addik	r25, r25, -1
    2d74:	c8839800 	lw	r4, r3, r19
    2d78:	be040050 	beqid	r4, 80		// 2dc8
    2d7c:	10731800 	addk	r3, r19, r3
			/* If the interrupt has been setup to acknowledge it
			 * before servicing the interrupt, then ack it
			 */
			if (CfgPtr->AckBeforeService & IntrMask) {
    2d80:	e8d30014 	lwi	r6, r19, 20
    2d84:	84d63000 	and	r6, r22, r6
    2d88:	bc060008 	beqi	r6, 8		// 2d90
			    XIOModule_AckIntr(CfgPtr->BaseAddress, IntrMask);
    2d8c:	fac5003c 	swi	r22, r5, 60

			/* The interrupt is active and enabled, call the
			 * interrupt handler that was setup with the specified
			 * parameter
			 */
			TablePtr->Handler(TablePtr->CallBackRef);
    2d90:	99fc2000 	brald	r15, r4
    2d94:	e8a30004 	lwi	r5, r3, 4

			/* If the interrupt has been setup to acknowledge it
			 * after it has been serviced then ack it
			 */
			if ((CfgPtr->AckBeforeService & IntrMask) == 0) {
    2d98:	e8730014 	lwi	r3, r19, 20
    2d9c:	84761800 	and	r3, r22, r3
    2da0:	bc23000c 	bnei	r3, 12		// 2dac
			    XIOModule_AckIntr(CfgPtr->BaseAddress, IntrMask);
    2da4:	e8730004 	lwi	r3, r19, 4
    2da8:	fac3003c 	swi	r22, r3, 60

			/*
			 * Read the ISR again to handle architectures with
			 * posted write bus access issues.
			 */
			Register = XIOModule_GetIntrStatus(CfgPtr->BaseAddress);
    2dac:	e8b30004 	lwi	r5, r19, 4
			/*
			 * If only the highest priority interrupt is to be
			 * serviced, exit loop and return after servicing
			 * the interrupt
			 */
			if (CfgPtr->Options == XIN_SVC_SGL_ISR_OPTION) {
    2db0:	e8730018 	lwi	r3, r19, 24

			/*
			 * Read the ISR again to handle architectures with
			 * posted write bus access issues.
			 */
			Register = XIOModule_GetIntrStatus(CfgPtr->BaseAddress);
    2db4:	e8850034 	lwi	r4, r5, 52
			/*
			 * If only the highest priority interrupt is to be
			 * serviced, exit loop and return after servicing
			 * the interrupt
			 */
			if (CfgPtr->Options == XIN_SVC_SGL_ISR_OPTION) {
    2db8:	a8630001 	xori	r3, r3, 1

			/*
			 * Read the ISR again to handle architectures with
			 * posted write bus access issues.
			 */
			Register = XIOModule_GetIntrStatus(CfgPtr->BaseAddress);
    2dbc:	f881001c 	swi	r4, r1, 28
			/*
			 * If only the highest priority interrupt is to be
			 * serviced, exit loop and return after servicing
			 * the interrupt
			 */
			if (CfgPtr->Options == XIN_SVC_SGL_ISR_OPTION) {
    2dc0:	be03001c 	beqid	r3, 28		// 2ddc
    2dc4:	e9e10000 	lwi	r15, r1, 0
		IntrStatus >>= 1;

		/* If there are no other bits set indicating that all interrupts
		 * have been serviced, then exit the loop
		 */
		if (IntrStatus == 0) {
    2dc8:	be170010 	beqid	r23, 16		// 2dd8
    2dcc:	12d6b000 	addk	r22, r22, r22

	/* Service each interrupt that is active and enabled by checking each
	 * bit in the register from LSB to MSB which corresponds to an interrupt
	 * input signal. Skip fast interrupts, indicated by null handler.
	 */
	for (IntrNumber = 0; IntrNumber < XPAR_IOMODULE_INTC_MAX_INTR_SIZE;
    2dd0:	be39ff84 	bneid	r25, -124		// 2d54
    2dd4:	33180001 	addik	r24, r24, 1
		 */
		if (IntrStatus == 0) {
			break;
		}
	}
}
    2dd8:	e9e10000 	lwi	r15, r1, 0
    2ddc:	ea610020 	lwi	r19, r1, 32
    2de0:	eac10024 	lwi	r22, r1, 36
    2de4:	eae10028 	lwi	r23, r1, 40
    2de8:	eb01002c 	lwi	r24, r1, 44
    2dec:	eb210030 	lwi	r25, r1, 48
    2df0:	b60f0008 	rtsd	r15, 8
    2df4:	30210034 	addik	r1, r1, 52

00002df8 <XIOModule_LowLevelInterruptHandler>:
* to be included in the driver compilation.
*
******************************************************************************/
#ifdef XPAR_IOMODULE_SINGLE_DEVICE_ID
void XIOModule_LowLevelInterruptHandler(void)
{
    2df8:	3021ffe4 	addik	r1, r1, -28
    2dfc:	f9e10000 	swi	r15, r1, 0
     * A level of indirection here because the interrupt handler used with
     * the driver interface given in this file needs to remain void - no
     * arguments.  So we need the globally defined device ID of THE
     * interrupt controller.
     */
    XIOModule_DeviceInterruptHandler((void *) XPAR_IOMODULE_SINGLE_DEVICE_ID);
    2e00:	b9f4fef4 	brlid	r15, -268	// 2cf4 <XIOModule_DeviceInterruptHandler>
    2e04:	10a00000 	addk	r5, r0, r0
}
    2e08:	e9e10000 	lwi	r15, r1, 0
    2e0c:	b60f0008 	rtsd	r15, 8
    2e10:	3021001c 	addik	r1, r1, 28

00002e14 <XIOModule_SetIntrSvcOption>:
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].BaseAddress == BaseAddress) {
    2e14:	b0000000 	imm	0
    2e18:	e86090ac 	lwi	r3, r0, -28500
    2e1c:	88a51800 	xor	r5, r5, r3
    2e20:	bc05000c 	beqi	r5, 12		// 2e2c
    2e24:	b60f0008 	rtsd	r15, 8
    2e28:	80000000 	or	r0, r0, r0
{
	XIOModule_Config *CfgPtr;

	CfgPtr = LookupConfigByBaseAddress(BaseAddress);
	if (CfgPtr != NULL) {
		CfgPtr->Options = Option;
    2e2c:	b0000000 	imm	0
    2e30:	306090ac 	addik	r3, r0, -28500
    2e34:	b60f0008 	rtsd	r15, 8
    2e38:	f8c30014 	swi	r6, r3, 20

00002e3c <XIOModule_RegisterHandler>:
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].BaseAddress == BaseAddress) {
    2e3c:	b0000000 	imm	0
    2e40:	e86090ac 	lwi	r3, r0, -28500
    2e44:	88a51800 	xor	r5, r5, r3
    2e48:	bc05000c 	beqi	r5, 12		// 2e54
    2e4c:	b60f0008 	rtsd	r15, 8
    2e50:	80000000 	or	r0, r0, r0
	XIOModule_Config *CfgPtr;

	CfgPtr = LookupConfigByBaseAddress(BaseAddress);
	if (CfgPtr != NULL) {
		CfgPtr->HandlerTable[InterruptId].Handler = Handler;
		CfgPtr->HandlerTable[InterruptId].CallBackRef = CallBackRef;
    2e54:	30660009 	addik	r3, r6, 9
    2e58:	10631800 	addk	r3, r3, r3
{
	XIOModule_Config *CfgPtr;

	CfgPtr = LookupConfigByBaseAddress(BaseAddress);
	if (CfgPtr != NULL) {
		CfgPtr->HandlerTable[InterruptId].Handler = Handler;
    2e5c:	10c63000 	addk	r6, r6, r6
    2e60:	10c63000 	addk	r6, r6, r6
		CfgPtr->HandlerTable[InterruptId].CallBackRef = CallBackRef;
    2e64:	10631800 	addk	r3, r3, r3
{
	XIOModule_Config *CfgPtr;

	CfgPtr = LookupConfigByBaseAddress(BaseAddress);
	if (CfgPtr != NULL) {
		CfgPtr->HandlerTable[InterruptId].Handler = Handler;
    2e68:	10c63000 	addk	r6, r6, r6
		CfgPtr->HandlerTable[InterruptId].CallBackRef = CallBackRef;
    2e6c:	10631800 	addk	r3, r3, r3
{
	XIOModule_Config *CfgPtr;

	CfgPtr = LookupConfigByBaseAddress(BaseAddress);
	if (CfgPtr != NULL) {
		CfgPtr->HandlerTable[InterruptId].Handler = Handler;
    2e70:	b0000000 	imm	0
    2e74:	f8e690ec 	swi	r7, r6, -28436
		CfgPtr->HandlerTable[InterruptId].CallBackRef = CallBackRef;
    2e78:	b0000000 	imm	0
    2e7c:	f90390a8 	swi	r8, r3, -28504
    2e80:	b60f0008 	rtsd	r15, 8
    2e84:	80000000 	or	r0, r0, r0

00002e88 <XIOModule_SendByte>:
*
* @note		None.
*
******************************************************************************/
void XIOModule_SendByte(u32 BaseAddress, u8 Data)
{
    2e88:	30850008 	addik	r4, r5, 8
	while (XIOModule_IsTransmitFull(BaseAddress));
    2e8c:	e8640000 	lwi	r3, r4, 0
    2e90:	a4630008 	andi	r3, r3, 8
    2e94:	bc23fff8 	bnei	r3, -8		// 2e8c

	XIomodule_Out32(BaseAddress + XUL_TX_OFFSET, Data);
    2e98:	f8c50004 	swi	r6, r5, 4
}
    2e9c:	b60f0008 	rtsd	r15, 8
    2ea0:	80000000 	or	r0, r0, r0

00002ea4 <XIOModule_RecvByte>:
*
* @note		None.
*
******************************************************************************/
u8 XIOModule_RecvByte(u32 BaseAddress)
{
    2ea4:	30850008 	addik	r4, r5, 8
	while (XIOModule_IsReceiveEmpty(BaseAddress));
    2ea8:	e8640000 	lwi	r3, r4, 0
    2eac:	a4630001 	andi	r3, r3, 1
    2eb0:	bc03fff8 	beqi	r3, -8		// 2ea8

	return (u8)XIomodule_In32(BaseAddress + XUL_RX_OFFSET);
    2eb4:	e8650000 	lwi	r3, r5, 0
}
    2eb8:	b60f0008 	rtsd	r15, 8
    2ebc:	a46300ff 	andi	r3, r3, 255

00002ec0 <StubHandler>:
*
* @note		None.
*
******************************************************************************/
static void StubHandler(void *CallBackRef)
{
    2ec0:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Verify that the inputs are valid
	 */
	XASSERT_VOID(CallBackRef != NULL);
    2ec4:	be050028 	beqid	r5, 40		// 2eec
    2ec8:	f9e10000 	swi	r15, r1, 0

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XIOModule *) CallBackRef)->UnhandledInterrupts++;
    2ecc:	e8650058 	lwi	r3, r5, 88
static void StubHandler(void *CallBackRef)
{
	/*
	 * Verify that the inputs are valid
	 */
	XASSERT_VOID(CallBackRef != NULL);
    2ed0:	b0000000 	imm	0
    2ed4:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XIOModule *) CallBackRef)->UnhandledInterrupts++;
    2ed8:	30630001 	addik	r3, r3, 1
    2edc:	f8650058 	swi	r3, r5, 88
}
    2ee0:	e9e10000 	lwi	r15, r1, 0
    2ee4:	b60f0008 	rtsd	r15, 8
    2ee8:	3021001c 	addik	r1, r1, 28
static void StubHandler(void *CallBackRef)
{
	/*
	 * Verify that the inputs are valid
	 */
	XASSERT_VOID(CallBackRef != NULL);
    2eec:	b0000000 	imm	0
    2ef0:	30a08c6c 	addik	r5, r0, -29588
    2ef4:	b0000000 	imm	0
    2ef8:	b9f42054 	brlid	r15, 8276	// 4f4c <XAssert>
    2efc:	30c00232 	addik	r6, r0, 562

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XIOModule *) CallBackRef)->UnhandledInterrupts++;
}
    2f00:	e9e10000 	lwi	r15, r1, 0
static void StubHandler(void *CallBackRef)
{
	/*
	 * Verify that the inputs are valid
	 */
	XASSERT_VOID(CallBackRef != NULL);
    2f04:	30600001 	addik	r3, r0, 1
    2f08:	b0000000 	imm	0
    2f0c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	/*
	 * Indicate another unhandled interrupt for stats
	 */
	((XIOModule *) CallBackRef)->UnhandledInterrupts++;
}
    2f10:	b60f0008 	rtsd	r15, 8
    2f14:	3021001c 	addik	r1, r1, 28

00002f18 <XIOModule_Start>:
*
* @note 	Must be called after XIOModule initialization is completed.
*
******************************************************************************/
int XIOModule_Start(XIOModule * InstancePtr)
{
    2f18:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    2f1c:	be05006c 	beqid	r5, 108		// 2f88
    2f20:	f9e10000 	swi	r15, r1, 0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    2f24:	e8650004 	lwi	r3, r5, 4
int XIOModule_Start(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    2f28:	b0000000 	imm	0
    2f2c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    2f30:	b0001111 	imm	4369
    2f34:	a8631111 	xori	r3, r3, 4369
    2f38:	bc030034 	beqi	r3, 52		// 2f6c
    2f3c:	b0000000 	imm	0
    2f40:	30a08c6c 	addik	r5, r0, -29588
    2f44:	b0000000 	imm	0
    2f48:	b9f42004 	brlid	r15, 8196	// 4f4c <XAssert>
    2f4c:	30c00115 	addik	r6, r0, 277
    2f50:	30600001 	addik	r3, r0, 1
    2f54:	b0000000 	imm	0
    2f58:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * enable the device.
	 */
	InstancePtr->IsStarted = XCOMPONENT_IS_STARTED;

	return XST_SUCCESS;
}
    2f5c:	e9e10000 	lwi	r15, r1, 0
    2f60:	10600000 	addk	r3, r0, r0
    2f64:	b60f0008 	rtsd	r15, 8
    2f68:	3021001c 	addik	r1, r1, 28

	/*
	 * Indicate the instance is ready to be used and is started before we
	 * enable the device.
	 */
	InstancePtr->IsStarted = XCOMPONENT_IS_STARTED;
    2f6c:	b0002222 	imm	8738
    2f70:	30602222 	addik	r3, r0, 8738
    2f74:	f8650008 	swi	r3, r5, 8

	return XST_SUCCESS;
}
    2f78:	e9e10000 	lwi	r15, r1, 0
    2f7c:	10600000 	addk	r3, r0, r0
    2f80:	b60f0008 	rtsd	r15, 8
    2f84:	3021001c 	addik	r1, r1, 28
int XIOModule_Start(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    2f88:	b0000000 	imm	0
    2f8c:	30a08c6c 	addik	r5, r0, -29588
    2f90:	b0000000 	imm	0
    2f94:	b9f41fb8 	brlid	r15, 8120	// 4f4c <XAssert>
    2f98:	30c00114 	addik	r6, r0, 276
    2f9c:	30600001 	addik	r3, r0, 1
    2fa0:	b0000000 	imm	0
    2fa4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    2fa8:	b810ffb8 	brid	-72		// 2f60
    2fac:	e9e10000 	lwi	r15, r1, 0

00002fb0 <XIOModule_Stop>:
*
* @note		None.
*
******************************************************************************/
void XIOModule_Stop(XIOModule * InstancePtr)
{
    2fb0:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    2fb4:	be05005c 	beqid	r5, 92		// 3010
    2fb8:	f9e10000 	swi	r15, r1, 0
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    2fbc:	e8650004 	lwi	r3, r5, 4
void XIOModule_Stop(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    2fc0:	b0000000 	imm	0
    2fc4:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    2fc8:	b0001111 	imm	4369
    2fcc:	a8631111 	xori	r3, r3, 4369
    2fd0:	bc030030 	beqi	r3, 48		// 3000
    2fd4:	b0000000 	imm	0
    2fd8:	30a08c6c 	addik	r5, r0, -29588
    2fdc:	b0000000 	imm	0
    2fe0:	b9f41f6c 	brlid	r15, 8044	// 4f4c <XAssert>
    2fe4:	30c00134 	addik	r6, r0, 308
    2fe8:	30600001 	addik	r3, r0, 1
    2fec:	b0000000 	imm	0
    2ff0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	InstancePtr->IsStarted = 0;
}
    2ff4:	e9e10000 	lwi	r15, r1, 0
    2ff8:	b60f0008 	rtsd	r15, 8
    2ffc:	3021001c 	addik	r1, r1, 28
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	InstancePtr->IsStarted = 0;
    3000:	f8650008 	swi	r3, r5, 8
}
    3004:	e9e10000 	lwi	r15, r1, 0
    3008:	b60f0008 	rtsd	r15, 8
    300c:	3021001c 	addik	r1, r1, 28
void XIOModule_Stop(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3010:	b0000000 	imm	0
    3014:	30a08c6c 	addik	r5, r0, -29588
    3018:	b0000000 	imm	0
    301c:	b9f41f30 	brlid	r15, 7984	// 4f4c <XAssert>
    3020:	30c00133 	addik	r6, r0, 307
    3024:	30600001 	addik	r3, r0, 1
    3028:	b0000000 	imm	0
    302c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3030:	b810ffc8 	brid	-56		// 2ff8
    3034:	e9e10000 	lwi	r15, r1, 0

00003038 <XIOModule_Connect>:
* that was previously connected.
*
****************************************************************************/
int XIOModule_Connect(XIOModule * InstancePtr, u8 Id,
		  XInterruptHandler Handler, void *CallBackRef)
{
    3038:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    303c:	be0500cc 	beqid	r5, 204		// 3108
    3040:	f9e10000 	swi	r15, r1, 0
    3044:	b0000000 	imm	0
    3048:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    304c:	30600012 	addik	r3, r0, 18
    3050:	16461803 	cmpu	r18, r6, r3
    3054:	bc520084 	blti	r18, 132		// 30d8
	XASSERT_NONVOID(Handler != NULL);
    3058:	bc0700d8 	beqi	r7, 216		// 3130
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    305c:	e8650004 	lwi	r3, r5, 4
    3060:	b0001111 	imm	4369
    3064:	a8631111 	xori	r3, r3, 4369
    3068:	be030038 	beqid	r3, 56		// 30a0
    306c:	10863000 	addk	r4, r6, r6
    3070:	b0000000 	imm	0
    3074:	30a08c6c 	addik	r5, r0, -29588
    3078:	b0000000 	imm	0
    307c:	b9f41ed0 	brlid	r15, 7888	// 4f4c <XAssert>
    3080:	30c0015d 	addik	r6, r0, 349
    3084:	30600001 	addik	r3, r0, 1
    3088:	b0000000 	imm	0
    308c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
	return XST_SUCCESS;
}
    3090:	e9e10000 	lwi	r15, r1, 0
    3094:	10600000 	addk	r3, r0, r0
    3098:	b60f0008 	rtsd	r15, 8
    309c:	3021001c 	addik	r1, r1, 28

	/*
	 * The Id is used as an index into the table to select the proper
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
    30a0:	e865000c 	lwi	r3, r5, 12
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
    30a4:	30c60009 	addik	r6, r6, 9

	/*
	 * The Id is used as an index into the table to select the proper
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
    30a8:	10842000 	addk	r4, r4, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
    30ac:	10c63000 	addk	r6, r6, r6

	/*
	 * The Id is used as an index into the table to select the proper
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
    30b0:	10842000 	addk	r4, r4, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
    30b4:	10c63000 	addk	r6, r6, r6

	/*
	 * The Id is used as an index into the table to select the proper
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
    30b8:	10832000 	addk	r4, r3, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
    30bc:	10c63000 	addk	r6, r6, r6
    30c0:	d9061800 	sw	r8, r6, r3

	/*
	 * The Id is used as an index into the table to select the proper
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
    30c4:	f8e40044 	swi	r7, r4, 68
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
	return XST_SUCCESS;
}
    30c8:	e9e10000 	lwi	r15, r1, 0
    30cc:	10600000 	addk	r3, r0, r0
    30d0:	b60f0008 	rtsd	r15, 8
    30d4:	3021001c 	addik	r1, r1, 28
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    30d8:	b0000000 	imm	0
    30dc:	30a08c6c 	addik	r5, r0, -29588
    30e0:	b0000000 	imm	0
    30e4:	b9f41e68 	brlid	r15, 7784	// 4f4c <XAssert>
    30e8:	30c0015b 	addik	r6, r0, 347
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
	return XST_SUCCESS;
}
    30ec:	e9e10000 	lwi	r15, r1, 0
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    30f0:	30600001 	addik	r3, r0, 1
    30f4:	b0000000 	imm	0
    30f8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * handler
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = Handler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = CallBackRef;
	return XST_SUCCESS;
}
    30fc:	10600000 	addk	r3, r0, r0
    3100:	b60f0008 	rtsd	r15, 8
    3104:	3021001c 	addik	r1, r1, 28
		  XInterruptHandler Handler, void *CallBackRef)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    3108:	b0000000 	imm	0
    310c:	30a08c6c 	addik	r5, r0, -29588
    3110:	b0000000 	imm	0
    3114:	b9f41e38 	brlid	r15, 7736	// 4f4c <XAssert>
    3118:	30c0015a 	addik	r6, r0, 346
    311c:	30600001 	addik	r3, r0, 1
    3120:	b0000000 	imm	0
    3124:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3128:	b810ff6c 	brid	-148		// 3094
    312c:	e9e10000 	lwi	r15, r1, 0
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_NONVOID(Handler != NULL);
    3130:	b0000000 	imm	0
    3134:	30a08c6c 	addik	r5, r0, -29588
    3138:	b0000000 	imm	0
    313c:	b9f41e10 	brlid	r15, 7696	// 4f4c <XAssert>
    3140:	30c0015c 	addik	r6, r0, 348
    3144:	30600001 	addik	r3, r0, 1
    3148:	b0000000 	imm	0
    314c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3150:	b810ff44 	brid	-188		// 3094
    3154:	e9e10000 	lwi	r15, r1, 0

00003158 <XIOModule_Disconnect>:
*
* @note		None.
*
****************************************************************************/
void XIOModule_Disconnect(XIOModule * InstancePtr, u8 Id)
{
    3158:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    315c:	be0500e8 	beqid	r5, 232		// 3244
    3160:	f9e10000 	swi	r15, r1, 0
    3164:	b0000000 	imm	0
    3168:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    316c:	30600012 	addik	r3, r0, 18
    3170:	16461803 	cmpu	r18, r6, r3
    3174:	bc5200a4 	blti	r18, 164		// 3218
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3178:	e8650004 	lwi	r3, r5, 4
    317c:	b0001111 	imm	4369
    3180:	a8631111 	xori	r3, r3, 4369
    3184:	be030034 	beqid	r3, 52		// 31b8
    3188:	10663000 	addk	r3, r6, r6
    318c:	b0000000 	imm	0
    3190:	30a08c6c 	addik	r5, r0, -29588
    3194:	b0000000 	imm	0
    3198:	b9f41db4 	brlid	r15, 7604	// 4f4c <XAssert>
    319c:	30c00184 	addik	r6, r0, 388
    31a0:	30600001 	addik	r3, r0, 1
    31a4:	b0000000 	imm	0
    31a8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
}
    31ac:	e9e10000 	lwi	r15, r1, 0
    31b0:	b60f0008 	rtsd	r15, 8
    31b4:	3021001c 	addik	r1, r1, 28
	/*
	 * Disable the interrupt such that it won't occur while disconnecting
	 * the handler, only disable the specified interrupt id without
	 * modifying the other interrupt ids
	 */
	Mask = XIOModule_BitPosMask[Id]; /* convert integer id to bit mask */
    31b8:	10631800 	addk	r3, r3, r3
    31bc:	b0000000 	imm	0
    31c0:	3083945c 	addik	r4, r3, -27556

	NewIER = InstancePtr->CurrentIER & ~Mask;
    31c4:	e8840000 	lwi	r4, r4, 0
    31c8:	e925005c 	lwi	r9, r5, 92
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    31cc:	e9050000 	lwi	r8, r5, 0
	 * the handler, only disable the specified interrupt id without
	 * modifying the other interrupt ids
	 */
	Mask = XIOModule_BitPosMask[Id]; /* convert integer id to bit mask */

	NewIER = InstancePtr->CurrentIER & ~Mask;
    31d0:	a884ffff 	xori	r4, r4, -1
    31d4:	84844800 	and	r4, r4, r9
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
    31d8:	e8e5000c 	lwi	r7, r5, 12
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    31dc:	30c60009 	addik	r6, r6, 9
	 * modifying the other interrupt ids
	 */
	Mask = XIOModule_BitPosMask[Id]; /* convert integer id to bit mask */

	NewIER = InstancePtr->CurrentIER & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    31e0:	f8880038 	swi	r4, r8, 56
	InstancePtr->CurrentIER = NewIER;
    31e4:	f885005c 	swi	r4, r5, 92
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    31e8:	10c63000 	addk	r6, r6, r6
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
    31ec:	b0000000 	imm	0
    31f0:	30802ec0 	addik	r4, r0, 11968	// 2ec0 <StubHandler>
    31f4:	10631800 	addk	r3, r3, r3
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    31f8:	10c63000 	addk	r6, r6, r6
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
    31fc:	10671800 	addk	r3, r7, r3
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3200:	10c63000 	addk	r6, r6, r6
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
    3204:	f8830044 	swi	r4, r3, 68
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3208:	d8a63800 	sw	r5, r6, r7
}
    320c:	e9e10000 	lwi	r15, r1, 0
    3210:	b60f0008 	rtsd	r15, 8
    3214:	3021001c 	addik	r1, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3218:	b0000000 	imm	0
    321c:	30a08c6c 	addik	r5, r0, -29588
    3220:	b0000000 	imm	0
    3224:	b9f41d28 	brlid	r15, 7464	// 4f4c <XAssert>
    3228:	30c00183 	addik	r6, r0, 387
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
}
    322c:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3230:	30800001 	addik	r4, r0, 1
    3234:	b0000000 	imm	0
    3238:	f88094a8 	swi	r4, r0, -27480	// 94a8 <XAssertStatus>
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = StubHandler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
}
    323c:	b60f0008 	rtsd	r15, 8
    3240:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3244:	b0000000 	imm	0
    3248:	30a08c6c 	addik	r5, r0, -29588
    324c:	b0000000 	imm	0
    3250:	b9f41cfc 	brlid	r15, 7420	// 4f4c <XAssert>
    3254:	30c00182 	addik	r6, r0, 386
    3258:	30600001 	addik	r3, r0, 1
    325c:	b0000000 	imm	0
    3260:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3264:	b810ff4c 	brid	-180		// 31b0
    3268:	e9e10000 	lwi	r15, r1, 0

0000326c <XIOModule_Enable>:
*
* @note		None.
*
****************************************************************************/
void XIOModule_Enable(XIOModule * InstancePtr, u8 Id)
{
    326c:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3270:	be0500b8 	beqid	r5, 184		// 3328
    3274:	f9e10000 	swi	r15, r1, 0
    3278:	b0000000 	imm	0
    327c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3280:	30600012 	addik	r3, r0, 18
    3284:	16461803 	cmpu	r18, r6, r3
    3288:	bc520074 	blti	r18, 116		// 32fc
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    328c:	e8650004 	lwi	r3, r5, 4
    3290:	b0001111 	imm	4369
    3294:	a8631111 	xori	r3, r3, 4369
    3298:	be030034 	beqid	r3, 52		// 32cc
    329c:	10c63000 	addk	r6, r6, r6
    32a0:	b0000000 	imm	0
    32a4:	30a08c6c 	addik	r5, r0, -29588
    32a8:	b0000000 	imm	0
    32ac:	b9f41ca0 	brlid	r15, 7328	// 4f4c <XAssert>
    32b0:	30c001b6 	addik	r6, r0, 438
    32b4:	30600001 	addik	r3, r0, 1
    32b8:	b0000000 	imm	0
    32bc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER | Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    32c0:	e9e10000 	lwi	r15, r1, 0
    32c4:	b60f0008 	rtsd	r15, 8
    32c8:	3021001c 	addik	r1, r1, 28

	/*
	 * The Id is used to create the appropriate mask for the
	 * desired bit position. Id currently limited to 0 - 31
	 */
	Mask = XIOModule_BitPosMask[Id];
    32cc:	10c63000 	addk	r6, r6, r6
    32d0:	b0000000 	imm	0
    32d4:	30c6945c 	addik	r6, r6, -27556

	/*
	 * Enable the selected interrupt source by using the interrupt enable
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER | Mask;
    32d8:	e8660000 	lwi	r3, r6, 0
    32dc:	e8c5005c 	lwi	r6, r5, 92
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    32e0:	e8850000 	lwi	r4, r5, 0

	/*
	 * Enable the selected interrupt source by using the interrupt enable
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER | Mask;
    32e4:	80633000 	or	r3, r3, r6
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    32e8:	f8640038 	swi	r3, r4, 56
	InstancePtr->CurrentIER = NewIER;
    32ec:	f865005c 	swi	r3, r5, 92
}
    32f0:	e9e10000 	lwi	r15, r1, 0
    32f4:	b60f0008 	rtsd	r15, 8
    32f8:	3021001c 	addik	r1, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    32fc:	b0000000 	imm	0
    3300:	30a08c6c 	addik	r5, r0, -29588
    3304:	b0000000 	imm	0
    3308:	b9f41c44 	brlid	r15, 7236	// 4f4c <XAssert>
    330c:	30c001b5 	addik	r6, r0, 437
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER | Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    3310:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3314:	30600001 	addik	r3, r0, 1
    3318:	b0000000 	imm	0
    331c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER | Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    3320:	b60f0008 	rtsd	r15, 8
    3324:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3328:	b0000000 	imm	0
    332c:	30a08c6c 	addik	r5, r0, -29588
    3330:	b0000000 	imm	0
    3334:	b9f41c18 	brlid	r15, 7192	// 4f4c <XAssert>
    3338:	30c001b4 	addik	r6, r0, 436
    333c:	30600001 	addik	r3, r0, 1
    3340:	b0000000 	imm	0
    3344:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3348:	b810ff7c 	brid	-132		// 32c4
    334c:	e9e10000 	lwi	r15, r1, 0

00003350 <XIOModule_Disable>:
*
* @note		None.
*
****************************************************************************/
void XIOModule_Disable(XIOModule * InstancePtr, u8 Id)
{
    3350:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3354:	be0500bc 	beqid	r5, 188		// 3410
    3358:	f9e10000 	swi	r15, r1, 0
    335c:	b0000000 	imm	0
    3360:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3364:	30600012 	addik	r3, r0, 18
    3368:	16461803 	cmpu	r18, r6, r3
    336c:	bc520078 	blti	r18, 120		// 33e4
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3370:	e8650004 	lwi	r3, r5, 4
    3374:	b0001111 	imm	4369
    3378:	a8631111 	xori	r3, r3, 4369
    337c:	be030034 	beqid	r3, 52		// 33b0
    3380:	10c63000 	addk	r6, r6, r6
    3384:	b0000000 	imm	0
    3388:	30a08c6c 	addik	r5, r0, -29588
    338c:	b0000000 	imm	0
    3390:	b9f41bbc 	brlid	r15, 7100	// 4f4c <XAssert>
    3394:	30c001e4 	addik	r6, r0, 484
    3398:	30600001 	addik	r3, r0, 1
    339c:	b0000000 	imm	0
    33a0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    33a4:	e9e10000 	lwi	r15, r1, 0
    33a8:	b60f0008 	rtsd	r15, 8
    33ac:	3021001c 	addik	r1, r1, 28

	/*
	 * The Id is used to create the appropriate mask for the
	 * desired bit position. Id currently limited to 0 - 31
	 */
	Mask = XIOModule_BitPosMask[Id];
    33b0:	10c63000 	addk	r6, r6, r6
    33b4:	b0000000 	imm	0
    33b8:	30c6945c 	addik	r6, r6, -27556

	/*
	 * Disable the selected interrupt source by using the interrupt enable
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER & ~Mask;
    33bc:	e8660000 	lwi	r3, r6, 0
    33c0:	e8c5005c 	lwi	r6, r5, 92
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    33c4:	e8850000 	lwi	r4, r5, 0

	/*
	 * Disable the selected interrupt source by using the interrupt enable
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER & ~Mask;
    33c8:	a863ffff 	xori	r3, r3, -1
    33cc:	84633000 	and	r3, r3, r6
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    33d0:	f8640038 	swi	r3, r4, 56
	InstancePtr->CurrentIER = NewIER;
    33d4:	f865005c 	swi	r3, r5, 92
}
    33d8:	e9e10000 	lwi	r15, r1, 0
    33dc:	b60f0008 	rtsd	r15, 8
    33e0:	3021001c 	addik	r1, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    33e4:	b0000000 	imm	0
    33e8:	30a08c6c 	addik	r5, r0, -29588
    33ec:	b0000000 	imm	0
    33f0:	b9f41b5c 	brlid	r15, 7004	// 4f4c <XAssert>
    33f4:	30c001e3 	addik	r6, r0, 483
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    33f8:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    33fc:	30600001 	addik	r3, r0, 1
    3400:	b0000000 	imm	0
    3404:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * current value and then modifying only the specified interrupt id
	 */
	NewIER = InstancePtr->CurrentIER & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
	InstancePtr->CurrentIER = NewIER;
}
    3408:	b60f0008 	rtsd	r15, 8
    340c:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3410:	b0000000 	imm	0
    3414:	30a08c6c 	addik	r5, r0, -29588
    3418:	b0000000 	imm	0
    341c:	b9f41b30 	brlid	r15, 6960	// 4f4c <XAssert>
    3420:	30c001e2 	addik	r6, r0, 482
    3424:	30600001 	addik	r3, r0, 1
    3428:	b0000000 	imm	0
    342c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3430:	b810ff78 	brid	-136		// 33a8
    3434:	e9e10000 	lwi	r15, r1, 0

00003438 <XIOModule_Acknowledge>:
*
* @note		None.
*
****************************************************************************/
void XIOModule_Acknowledge(XIOModule * InstancePtr, u8 Id)
{
    3438:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    343c:	be0500ac 	beqid	r5, 172		// 34e8
    3440:	f9e10000 	swi	r15, r1, 0
    3444:	b0000000 	imm	0
    3448:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    344c:	30600012 	addik	r3, r0, 18
    3450:	16461803 	cmpu	r18, r6, r3
    3454:	bc520068 	blti	r18, 104		// 34bc
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3458:	e8650004 	lwi	r3, r5, 4
    345c:	b0001111 	imm	4369
    3460:	a8631111 	xori	r3, r3, 4369
    3464:	be030034 	beqid	r3, 52		// 3498
    3468:	10c63000 	addk	r6, r6, r6
    346c:	b0000000 	imm	0
    3470:	30a08c6c 	addik	r5, r0, -29588
    3474:	b0000000 	imm	0
    3478:	b9f41ad4 	brlid	r15, 6868	// 4f4c <XAssert>
    347c:	30c00210 	addik	r6, r0, 528
    3480:	30600001 	addik	r3, r0, 1
    3484:	b0000000 	imm	0
    3488:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * Acknowledge the selected interrupt source, no read of the acknowledge
	 * register is necessary since only the bits set in the mask will be
	 * affected by the write
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, Mask);
}
    348c:	e9e10000 	lwi	r15, r1, 0
    3490:	b60f0008 	rtsd	r15, 8
    3494:	3021001c 	addik	r1, r1, 28

	/*
	 * The Id is used to create the appropriate mask for the
	 * desired bit position. Id currently limited to 0 - 31
	 */
	Mask = XIOModule_BitPosMask[Id];
    3498:	10c63000 	addk	r6, r6, r6
    349c:	b0000000 	imm	0
    34a0:	30c6945c 	addik	r6, r6, -27556
    34a4:	e8860000 	lwi	r4, r6, 0
	/*
	 * Acknowledge the selected interrupt source, no read of the acknowledge
	 * register is necessary since only the bits set in the mask will be
	 * affected by the write
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, Mask);
    34a8:	e8650000 	lwi	r3, r5, 0
    34ac:	f883003c 	swi	r4, r3, 60
}
    34b0:	e9e10000 	lwi	r15, r1, 0
    34b4:	b60f0008 	rtsd	r15, 8
    34b8:	3021001c 	addik	r1, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    34bc:	b0000000 	imm	0
    34c0:	30a08c6c 	addik	r5, r0, -29588
    34c4:	b0000000 	imm	0
    34c8:	b9f41a84 	brlid	r15, 6788	// 4f4c <XAssert>
    34cc:	30c0020f 	addik	r6, r0, 527
	 * Acknowledge the selected interrupt source, no read of the acknowledge
	 * register is necessary since only the bits set in the mask will be
	 * affected by the write
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, Mask);
}
    34d0:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    34d4:	30600001 	addik	r3, r0, 1
    34d8:	b0000000 	imm	0
    34dc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * Acknowledge the selected interrupt source, no read of the acknowledge
	 * register is necessary since only the bits set in the mask will be
	 * affected by the write
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, Mask);
}
    34e0:	b60f0008 	rtsd	r15, 8
    34e4:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    34e8:	b0000000 	imm	0
    34ec:	30a08c6c 	addik	r5, r0, -29588
    34f0:	b0000000 	imm	0
    34f4:	b9f41a58 	brlid	r15, 6744	// 4f4c <XAssert>
    34f8:	30c0020e 	addik	r6, r0, 526
    34fc:	30600001 	addik	r3, r0, 1
    3500:	b0000000 	imm	0
    3504:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3508:	b810ff88 	brid	-120		// 3490
    350c:	e9e10000 	lwi	r15, r1, 0

00003510 <XIOModule_LookupConfig>:
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].DeviceId == DeviceId) {
    3510:	b0000000 	imm	0
    3514:	e48090a8 	lhui	r4, r0, -28504	// 90a8 <XIOModule_ConfigTable>
    3518:	88a42800 	xor	r5, r4, r5
    351c:	be250010 	bneid	r5, 16		// 352c
    3520:	10600000 	addk	r3, r0, r0
			CfgPtr = &XIOModule_ConfigTable[i];
    3524:	b0000000 	imm	0
    3528:	306090a8 	addik	r3, r0, -28504	// 90a8 <XIOModule_ConfigTable>
			break;
		}
	}

	return CfgPtr;
}
    352c:	b60f0008 	rtsd	r15, 8
    3530:	80000000 	or	r0, r0, r0

00003534 <XIOModule_ConnectFastHandler>:
* that was previously connected.
*
****************************************************************************/
int XIOModule_ConnectFastHandler(XIOModule *InstancePtr, u8 Id,
				    XFastInterruptHandler Handler)
{
    3534:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    3538:	be050160 	beqid	r5, 352		// 3698
    353c:	f9e10000 	swi	r15, r1, 0
    3540:	b0000000 	imm	0
    3544:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3548:	30600012 	addik	r3, r0, 18
    354c:	16461803 	cmpu	r18, r6, r3
    3550:	bc5200e8 	blti	r18, 232		// 3638
	XASSERT_NONVOID(Handler != NULL);
    3554:	bc07016c 	beqi	r7, 364		// 36c0
	XASSERT_NONVOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    3558:	e8650004 	lwi	r3, r5, 4
    355c:	b0001111 	imm	4369
    3560:	a8631111 	xori	r3, r3, 4369
    3564:	bc2300a4 	bnei	r3, 164		// 3608
	XASSERT_NONVOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    3568:	e865000c 	lwi	r3, r5, 12
    356c:	e883000c 	lwi	r4, r3, 12
    3570:	a8840001 	xori	r4, r4, 1
    3574:	be2400f4 	bneid	r4, 244		// 3668
    3578:	10863000 	addk	r4, r6, r6

	/*
	 * The Id is used to create the appropriate mask for the
	 * desired bit position. Id currently limited to 0 - 31
	 */
	Mask = XIOModule_BitPosMask[Id];
    357c:	11042000 	addk	r8, r4, r4
    3580:	b0000000 	imm	0
    3584:	3108945c 	addik	r8, r8, -27556
    3588:	e9080000 	lwi	r8, r8, 0

	/*
	 * Get the Enabled Interrupts and disable the Interrupt if it was
	 * enabled before calling this function
	 */
	CurrentIER = InstancePtr->CurrentIER;
    358c:	e925005c 	lwi	r9, r5, 92
	if (CurrentIER & Mask) {
    3590:	85484800 	and	r10, r8, r9
    3594:	be0a0014 	beqid	r10, 20		// 35a8
    3598:	a968ffff 	xori	r11, r8, -1
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
    359c:	e9850000 	lwi	r12, r5, 0
    35a0:	856b4800 	and	r11, r11, r9
    35a4:	f96c0038 	swi	r11, r12, 56

	/*
	 * Assign the handler information and set the hardware vector
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = NULL;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    35a8:	30c60009 	addik	r6, r6, 9

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    35ac:	e9850000 	lwi	r12, r5, 0
	}

	/*
	 * Assign the handler information and set the hardware vector
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = NULL;
    35b0:	10842000 	addk	r4, r4, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    35b4:	10c63000 	addk	r6, r6, r6
	}

	/*
	 * Assign the handler information and set the hardware vector
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = NULL;
    35b8:	11642000 	addk	r11, r4, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    35bc:	10c63000 	addk	r6, r6, r6
	}

	/*
	 * Assign the handler information and set the hardware vector
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = NULL;
    35c0:	11635800 	addk	r11, r3, r11
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    35c4:	10c63000 	addk	r6, r6, r6
    35c8:	d8a61800 	sw	r5, r6, r3
	}

	/*
	 * Assign the handler information and set the hardware vector
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler = NULL;
    35cc:	f80b0044 	swi	r0, r11, 68
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    35d0:	306c0080 	addik	r3, r12, 128
    35d4:	d8e41800 	sw	r7, r4, r3
		    	(u32) Handler);

	/*
	 * Set the selected interrupt source to use fast interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR | Mask;
    35d8:	e8850060 	lwi	r4, r5, 96
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
    35dc:	e8650000 	lwi	r3, r5, 0
		    	(u32) Handler);

	/*
	 * Set the selected interrupt source to use fast interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR | Mask;
    35e0:	81082000 	or	r8, r8, r4
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
    35e4:	f903000c 	swi	r8, r3, 12
	InstancePtr->CurrentIMR = NewIMR;

	/*
	 * Enable Interrupt if it was enabled before calling this function
	 */
	if (CurrentIER & Mask) {
    35e8:	be0a0040 	beqid	r10, 64		// 3628
    35ec:	f9050060 	swi	r8, r5, 96
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
    35f0:	e8650000 	lwi	r3, r5, 0
    35f4:	f9230038 	swi	r9, r3, 56
				CurrentIER);
	}

	return XST_SUCCESS;
}
    35f8:	e9e10000 	lwi	r15, r1, 0
    35fc:	10600000 	addk	r3, r0, r0
    3600:	b60f0008 	rtsd	r15, 8
    3604:	3021001c 	addik	r1, r1, 28
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_NONVOID(Handler != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    3608:	b0000000 	imm	0
    360c:	30a08c6c 	addik	r5, r0, -29588
    3610:	b0000000 	imm	0
    3614:	b9f41938 	brlid	r15, 6456	// 4f4c <XAssert>
    3618:	30c0027a 	addik	r6, r0, 634
    361c:	30600001 	addik	r3, r0, 1
    3620:	b0000000 	imm	0
    3624:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}

	return XST_SUCCESS;
}
    3628:	e9e10000 	lwi	r15, r1, 0
    362c:	10600000 	addk	r3, r0, r0
    3630:	b60f0008 	rtsd	r15, 8
    3634:	3021001c 	addik	r1, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3638:	b0000000 	imm	0
    363c:	30a08c6c 	addik	r5, r0, -29588
    3640:	b0000000 	imm	0
    3644:	b9f41908 	brlid	r15, 6408	// 4f4c <XAssert>
    3648:	30c00278 	addik	r6, r0, 632
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}

	return XST_SUCCESS;
}
    364c:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3650:	30600001 	addik	r3, r0, 1
    3654:	b0000000 	imm	0
    3658:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}

	return XST_SUCCESS;
}
    365c:	10600000 	addk	r3, r0, r0
    3660:	b60f0008 	rtsd	r15, 8
    3664:	3021001c 	addik	r1, r1, 28
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_NONVOID(Handler != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	XASSERT_NONVOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    3668:	b0000000 	imm	0
    366c:	30a08c6c 	addik	r5, r0, -29588
    3670:	b0000000 	imm	0
    3674:	b9f418d8 	brlid	r15, 6360	// 4f4c <XAssert>
    3678:	30c0027b 	addik	r6, r0, 635
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}

	return XST_SUCCESS;
}
    367c:	e9e10000 	lwi	r15, r1, 0
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_NONVOID(Handler != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	XASSERT_NONVOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    3680:	30600001 	addik	r3, r0, 1
    3684:	b0000000 	imm	0
    3688:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}

	return XST_SUCCESS;
}
    368c:	10600000 	addk	r3, r0, r0
    3690:	b60f0008 	rtsd	r15, 8
    3694:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    3698:	b0000000 	imm	0
    369c:	30a08c6c 	addik	r5, r0, -29588
    36a0:	b0000000 	imm	0
    36a4:	b9f418a8 	brlid	r15, 6312	// 4f4c <XAssert>
    36a8:	30c00277 	addik	r6, r0, 631
    36ac:	30600001 	addik	r3, r0, 1
    36b0:	b0000000 	imm	0
    36b4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    36b8:	b810ff74 	brid	-140		// 362c
    36bc:	e9e10000 	lwi	r15, r1, 0
	XASSERT_NONVOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_NONVOID(Handler != NULL);
    36c0:	b0000000 	imm	0
    36c4:	30a08c6c 	addik	r5, r0, -29588
    36c8:	b0000000 	imm	0
    36cc:	b9f41880 	brlid	r15, 6272	// 4f4c <XAssert>
    36d0:	30c00279 	addik	r6, r0, 633
    36d4:	30600001 	addik	r3, r0, 1
    36d8:	b0000000 	imm	0
    36dc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    36e0:	b810ff4c 	brid	-180		// 362c
    36e4:	e9e10000 	lwi	r15, r1, 0

000036e8 <XIOModule_SetNormalIntrMode>:
*
* @note		Only used with fast interrupt mode.
*
****************************************************************************/
void XIOModule_SetNormalIntrMode(XIOModule *InstancePtr, u8 Id)
{
    36e8:	3021ffe4 	addik	r1, r1, -28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    36ec:	be05016c 	beqid	r5, 364		// 3858
    36f0:	f9e10000 	swi	r15, r1, 0
    36f4:	b0000000 	imm	0
    36f8:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    36fc:	30600012 	addik	r3, r0, 18
    3700:	16461803 	cmpu	r18, r6, r3
    3704:	bc5200fc 	blti	r18, 252		// 3800
	XASSERT_VOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    3708:	e8650004 	lwi	r3, r5, 4
    370c:	b0001111 	imm	4369
    3710:	a8631111 	xori	r3, r3, 4369
    3714:	bc2300a8 	bnei	r3, 168		// 37bc
	XASSERT_VOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    3718:	e865000c 	lwi	r3, r5, 12
    371c:	e883000c 	lwi	r4, r3, 12
    3720:	a8840001 	xori	r4, r4, 1
    3724:	be240108 	bneid	r4, 264		// 382c
    3728:	10863000 	addk	r4, r6, r6

	/*
	 * The Id is used to create the appropriate mask for the
	 * desired bit position. Id currently limited to 0 - 31
	 */
	Mask = XIOModule_BitPosMask[Id];
    372c:	10e42000 	addk	r7, r4, r4
    3730:	b0000000 	imm	0
    3734:	30e7945c 	addik	r7, r7, -27556
    3738:	e9070000 	lwi	r8, r7, 0

	/*
	 * Get the Enabled Interrupts and disable the Interrupt if it was
	 * enabled before calling this function
	 */
	CurrentIER = InstancePtr->CurrentIER;
    373c:	e8e5005c 	lwi	r7, r5, 92
	if (CurrentIER & Mask) {
    3740:	85283800 	and	r9, r8, r7
    3744:	bc2900a4 	bnei	r9, 164		// 37e8
    3748:	a908ffff 	xori	r8, r8, -1
	}

	/*
	 * Set the selected interrupt source to use normal interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR & ~Mask;
    374c:	e9650060 	lwi	r11, r5, 96
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
    3750:	e9450000 	lwi	r10, r5, 0
	InstancePtr->CurrentIMR = NewIMR;

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    3754:	10842000 	addk	r4, r4, r4
	}

	/*
	 * Set the selected interrupt source to use normal interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR & ~Mask;
    3758:	85085800 	and	r8, r8, r11
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
    375c:	f90a000c 	swi	r8, r10, 12
	InstancePtr->CurrentIMR = NewIMR;

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    3760:	e9630010 	lwi	r11, r3, 16
    3764:	e9450000 	lwi	r10, r5, 0
	/*
	 * Set the selected interrupt source to use normal interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
	InstancePtr->CurrentIMR = NewIMR;
    3768:	f9050060 	swi	r8, r5, 96

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    376c:	a56bff80 	andi	r11, r11, -128
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler =	StubHandler;
    3770:	11042000 	addk	r8, r4, r4
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3774:	30c60009 	addik	r6, r6, 9
	 */
	NewIMR = InstancePtr->CurrentIMR & ~Mask;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, NewIMR);
	InstancePtr->CurrentIMR = NewIMR;

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IVAR_OFFSET + (Id * 4),
    3778:	314a0080 	addik	r10, r10, 128
    377c:	a16b0010 	ori	r11, r11, 16
    3780:	d9645000 	sw	r11, r4, r10
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler =	StubHandler;
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3784:	10c63000 	addk	r6, r6, r6
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler =	StubHandler;
    3788:	10834000 	addk	r4, r3, r8
    378c:	b0000000 	imm	0
    3790:	31002ec0 	addik	r8, r0, 11968	// 2ec0 <StubHandler>
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3794:	10c63000 	addk	r6, r6, r6
    3798:	10c63000 	addk	r6, r6, r6
	/*
	 * Disconnect the handler and connect a stub, the callback reference
	 * must be set to this instance to allow unhandled interrupts to be
	 * tracked
	 */
	InstancePtr->CfgPtr->HandlerTable[Id].Handler =	StubHandler;
    379c:	f9040044 	swi	r8, r4, 68
	InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;

	/*
	 * Enable Interrupt if it was enabled before calling this function
	 */
	if (CurrentIER & Mask) {
    37a0:	be09003c 	beqid	r9, 60		// 37dc
    37a4:	d8a61800 	sw	r5, r6, r3
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
    37a8:	e8650000 	lwi	r3, r5, 0
    37ac:	f8e30038 	swi	r7, r3, 56
				CurrentIER);
	}
}
    37b0:	e9e10000 	lwi	r15, r1, 0
    37b4:	b60f0008 	rtsd	r15, 8
    37b8:	3021001c 	addik	r1, r1, 28
	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_VOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    37bc:	b0000000 	imm	0
    37c0:	30a08c6c 	addik	r5, r0, -29588
    37c4:	b0000000 	imm	0
    37c8:	b9f41784 	brlid	r15, 6020	// 4f4c <XAssert>
    37cc:	30c002c5 	addik	r6, r0, 709
    37d0:	30600001 	addik	r3, r0, 1
    37d4:	b0000000 	imm	0
    37d8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 */
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}
}
    37dc:	e9e10000 	lwi	r15, r1, 0
    37e0:	b60f0008 	rtsd	r15, 8
    37e4:	3021001c 	addik	r1, r1, 28
	 * Get the Enabled Interrupts and disable the Interrupt if it was
	 * enabled before calling this function
	 */
	CurrentIER = InstancePtr->CurrentIER;
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
    37e8:	e9650000 	lwi	r11, r5, 0
    37ec:	a908ffff 	xori	r8, r8, -1
    37f0:	85483800 	and	r10, r8, r7
    37f4:	f94b0038 	swi	r10, r11, 56
	}

	/*
	 * Set the selected interrupt source to use normal interrupt
	 */
	NewIMR = InstancePtr->CurrentIMR & ~Mask;
    37f8:	b810ff58 	brid	-168		// 3750
    37fc:	e9650060 	lwi	r11, r5, 96

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3800:	b0000000 	imm	0
    3804:	30a08c6c 	addik	r5, r0, -29588
    3808:	b0000000 	imm	0
    380c:	b9f41740 	brlid	r15, 5952	// 4f4c <XAssert>
    3810:	30c002c4 	addik	r6, r0, 708
	 */
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}
}
    3814:	e9e10000 	lwi	r15, r1, 0

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
    3818:	31000001 	addik	r8, r0, 1
    381c:	b0000000 	imm	0
    3820:	f90094a8 	swi	r8, r0, -27480	// 94a8 <XAssertStatus>
	 */
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}
}
    3824:	b60f0008 	rtsd	r15, 8
    3828:	3021001c 	addik	r1, r1, 28
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_VOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	XASSERT_VOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    382c:	b0000000 	imm	0
    3830:	30a08c6c 	addik	r5, r0, -29588
    3834:	b0000000 	imm	0
    3838:	b9f41714 	brlid	r15, 5908	// 4f4c <XAssert>
    383c:	30c002c6 	addik	r6, r0, 710
	 */
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}
}
    3840:	e9e10000 	lwi	r15, r1, 0
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE);
	XASSERT_VOID(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
	XASSERT_VOID(InstancePtr->CfgPtr->FastIntr == TRUE);
    3844:	31000001 	addik	r8, r0, 1
    3848:	b0000000 	imm	0
    384c:	f90094a8 	swi	r8, r0, -27480	// 94a8 <XAssertStatus>
	 */
	if (CurrentIER & Mask) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET,
				CurrentIER);
	}
}
    3850:	b60f0008 	rtsd	r15, 8
    3854:	3021001c 	addik	r1, r1, 28
	u32 Mask;

	/*
	 * Assert the arguments
	 */
	XASSERT_VOID(InstancePtr != NULL);
    3858:	b0000000 	imm	0
    385c:	30a08c6c 	addik	r5, r0, -29588
    3860:	b0000000 	imm	0
    3864:	b9f416e8 	brlid	r15, 5864	// 4f4c <XAssert>
    3868:	30c002c3 	addik	r6, r0, 707
    386c:	30600001 	addik	r3, r0, 1
    3870:	b0000000 	imm	0
    3874:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3878:	b810ff68 	brid	-152		// 37e0
    387c:	e9e10000 	lwi	r15, r1, 0

00003880 <XIOModule_DiscreteRead>:
*
* @return	Current copy of the discretes register.
*
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
    3880:	3021ffe0 	addik	r1, r1, -32
    3884:	fa61001c 	swi	r19, r1, 28
    3888:	f9e10000 	swi	r15, r1, 0
	XASSERT_NONVOID(InstancePtr != NULL);
    388c:	be0500b8 	beqid	r5, 184		// 3944
    3890:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3894:	e8650004 	lwi	r3, r5, 4
* @return	Current copy of the discretes register.
*
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    3898:	b0000000 	imm	0
    389c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    38a0:	b0001111 	imm	4369
    38a4:	a8631111 	xori	r3, r3, 4369
    38a8:	be230038 	bneid	r3, 56		// 38e0
    38ac:	3086ffff 	addik	r4, r6, -1
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPI_DEVICE_COUNT));
    38b0:	30600003 	addik	r3, r0, 3
    38b4:	16441803 	cmpu	r18, r4, r3
    38b8:	be52005c 	bltid	r18, 92		// 3914
    38bc:	30c60007 	addik	r6, r6, 7

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
    38c0:	e8650000 	lwi	r3, r5, 0
    38c4:	10c63000 	addk	r6, r6, r6
    38c8:	10c63000 	addk	r6, r6, r6
    38cc:	c8633000 	lw	r3, r3, r6
			((Channel - 1) * XGPI_CHAN_OFFSET) + XGPI_DATA_OFFSET);
}
    38d0:	e9e10000 	lwi	r15, r1, 0
    38d4:	ea61001c 	lwi	r19, r1, 28
    38d8:	b60f0008 	rtsd	r15, 8
    38dc:	30210020 	addik	r1, r1, 32
*
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    38e0:	b0000000 	imm	0
    38e4:	30a08c6c 	addik	r5, r0, -29588
    38e8:	b0000000 	imm	0
    38ec:	b9f41660 	brlid	r15, 5728	// 4f4c <XAssert>
    38f0:	30c00303 	addik	r6, r0, 771
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPI_DEVICE_COUNT));

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPI_CHAN_OFFSET) + XGPI_DATA_OFFSET);
}
    38f4:	e9e10000 	lwi	r15, r1, 0
    38f8:	ea61001c 	lwi	r19, r1, 28
*
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    38fc:	30600001 	addik	r3, r0, 1
    3900:	b0000000 	imm	0
    3904:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3908:	10600000 	addk	r3, r0, r0
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPI_DEVICE_COUNT));

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPI_CHAN_OFFSET) + XGPI_DATA_OFFSET);
}
    390c:	b60f0008 	rtsd	r15, 8
    3910:	30210020 	addik	r1, r1, 32
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPI_DEVICE_COUNT));
    3914:	b0000000 	imm	0
    3918:	30a08c6c 	addik	r5, r0, -29588
    391c:	b0000000 	imm	0
    3920:	b9f4162c 	brlid	r15, 5676	// 4f4c <XAssert>
    3924:	30c00304 	addik	r6, r0, 772

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPI_CHAN_OFFSET) + XGPI_DATA_OFFSET);
}
    3928:	e9e10000 	lwi	r15, r1, 0
    392c:	ea61001c 	lwi	r19, r1, 28
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPI_DEVICE_COUNT));
    3930:	30600001 	addik	r3, r0, 1
    3934:	b0000000 	imm	0
    3938:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPI_CHAN_OFFSET) + XGPI_DATA_OFFSET);
}
    393c:	b60f0008 	rtsd	r15, 8
    3940:	30210020 	addik	r1, r1, 32
* @return	Current copy of the discretes register.
*
*****************************************************************************/
u32 XIOModule_DiscreteRead(XIOModule * InstancePtr, unsigned Channel)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    3944:	b0000000 	imm	0
    3948:	30a08c6c 	addik	r5, r0, -29588
    394c:	b0000000 	imm	0
    3950:	b9f415fc 	brlid	r15, 5628	// 4f4c <XAssert>
    3954:	30c00302 	addik	r6, r0, 770
    3958:	30600001 	addik	r3, r0, 1
    395c:	b0000000 	imm	0
    3960:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3964:	b810ff6c 	brid	-148		// 38d0
    3968:	10730000 	addk	r3, r19, r0

0000396c <XIOModule_DiscreteWrite>:
*
*****************************************************************************/
void XIOModule_DiscreteWrite(XIOModule * InstancePtr,
			     unsigned Channel,
			     u32 Data)
{
    396c:	3021ffe4 	addik	r1, r1, -28
	XASSERT_VOID(InstancePtr != NULL);
    3970:	be0500b8 	beqid	r5, 184		// 3a28
    3974:	f9e10000 	swi	r15, r1, 0
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3978:	e8650004 	lwi	r3, r5, 4
*****************************************************************************/
void XIOModule_DiscreteWrite(XIOModule * InstancePtr,
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    397c:	b0000000 	imm	0
    3980:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3984:	b0001111 	imm	4369
    3988:	a8631111 	xori	r3, r3, 4369
    398c:	be230070 	bneid	r3, 112		// 39fc
    3990:	3086ffff 	addik	r4, r6, -1
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPO_DEVICE_COUNT));
    3994:	30600003 	addik	r3, r0, 3
    3998:	16441803 	cmpu	r18, r4, r3
    399c:	be520034 	bltid	r18, 52		// 39d0
    39a0:	30660003 	addik	r3, r6, 3

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    39a4:	e8850000 	lwi	r4, r5, 0
    39a8:	10631800 	addk	r3, r3, r3
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
    39ac:	30c60023 	addik	r6, r6, 35
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPO_DEVICE_COUNT));

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    39b0:	10631800 	addk	r3, r3, r3
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
    39b4:	10c63000 	addk	r6, r6, r6
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPO_DEVICE_COUNT));

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    39b8:	d8e41800 	sw	r7, r4, r3
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
    39bc:	10c63000 	addk	r6, r6, r6
    39c0:	d8e62800 	sw	r7, r6, r5
}
    39c4:	e9e10000 	lwi	r15, r1, 0
    39c8:	b60f0008 	rtsd	r15, 8
    39cc:	3021001c 	addik	r1, r1, 28
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPO_DEVICE_COUNT));
    39d0:	b0000000 	imm	0
    39d4:	30a08c6c 	addik	r5, r0, -29588
    39d8:	b0000000 	imm	0
    39dc:	b9f41570 	brlid	r15, 5488	// 4f4c <XAssert>
    39e0:	30c0031d 	addik	r6, r0, 797

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
}
    39e4:	e9e10000 	lwi	r15, r1, 0
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_VOID((Channel >= 1) && (Channel <= XGPO_DEVICE_COUNT));
    39e8:	30600001 	addik	r3, r0, 1
    39ec:	b0000000 	imm	0
    39f0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
}
    39f4:	b60f0008 	rtsd	r15, 8
    39f8:	3021001c 	addik	r1, r1, 28
void XIOModule_DiscreteWrite(XIOModule * InstancePtr,
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    39fc:	b0000000 	imm	0
    3a00:	30a08c6c 	addik	r5, r0, -29588
    3a04:	b0000000 	imm	0
    3a08:	b9f41544 	brlid	r15, 5444	// 4f4c <XAssert>
    3a0c:	30c0031c 	addik	r6, r0, 796

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
}
    3a10:	e9e10000 	lwi	r15, r1, 0
void XIOModule_DiscreteWrite(XIOModule * InstancePtr,
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3a14:	30600001 	addik	r3, r0, 1
    3a18:	b0000000 	imm	0
    3a1c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			((Channel - 1) * XGPO_CHAN_OFFSET) + XGPO_DATA_OFFSET,
			Data);
	InstancePtr->GpoValue[Channel - 1] = Data;
}
    3a20:	b60f0008 	rtsd	r15, 8
    3a24:	3021001c 	addik	r1, r1, 28
*****************************************************************************/
void XIOModule_DiscreteWrite(XIOModule * InstancePtr,
			     unsigned Channel,
			     u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    3a28:	b0000000 	imm	0
    3a2c:	30a08c6c 	addik	r5, r0, -29588
    3a30:	b0000000 	imm	0
    3a34:	b9f41518 	brlid	r15, 5400	// 4f4c <XAssert>
    3a38:	30c0031b 	addik	r6, r0, 795
    3a3c:	30600001 	addik	r3, r0, 1
    3a40:	b0000000 	imm	0
    3a44:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3a48:	b810ff80 	brid	-128		// 39c8
    3a4c:	e9e10000 	lwi	r15, r1, 0

00003a50 <XIOModule_Timer_Initialize>:
*
* @note		None.
*
******************************************************************************/
int XIOModule_Timer_Initialize(XIOModule * InstancePtr, u16 DeviceId)
{
    3a50:	3021ffe0 	addik	r1, r1, -32
    3a54:	fa61001c 	swi	r19, r1, 28
    3a58:	f9e10000 	swi	r15, r1, 0
	XIOModule_Config *IOModuleConfigPtr;
	int TimerNumber;
	u32 TimerOffset;
	u32 StatusReg;

	XASSERT_NONVOID(InstancePtr != NULL);
    3a5c:	be050034 	beqid	r5, 52		// 3a90
    3a60:	12650000 	addk	r19, r5, r0
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].DeviceId == DeviceId) {
    3a64:	b0000000 	imm	0
    3a68:	e48090a8 	lhui	r4, r0, -28504	// 90a8 <XIOModule_ConfigTable>
	XIOModule_Config *IOModuleConfigPtr;
	int TimerNumber;
	u32 TimerOffset;
	u32 StatusReg;

	XASSERT_NONVOID(InstancePtr != NULL);
    3a6c:	b0000000 	imm	0
    3a70:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].DeviceId == DeviceId) {
    3a74:	88c43000 	xor	r6, r4, r6
    3a78:	be060040 	beqid	r6, 64		// 3ab8
    3a7c:	30600002 	addik	r3, r0, 2
	 * Indicate the instance is ready to use, successfully initialized
	 */
	InstancePtr->IsReady = XCOMPONENT_IS_READY;

	return XST_SUCCESS;
}
    3a80:	e9e10000 	lwi	r15, r1, 0
    3a84:	ea61001c 	lwi	r19, r1, 28
    3a88:	b60f0008 	rtsd	r15, 8
    3a8c:	30210020 	addik	r1, r1, 32
	XIOModule_Config *IOModuleConfigPtr;
	int TimerNumber;
	u32 TimerOffset;
	u32 StatusReg;

	XASSERT_NONVOID(InstancePtr != NULL);
    3a90:	b0000000 	imm	0
    3a94:	30a08c6c 	addik	r5, r0, -29588
    3a98:	b0000000 	imm	0
    3a9c:	b9f414b0 	brlid	r15, 5296	// 4f4c <XAssert>
    3aa0:	30c00342 	addik	r6, r0, 834
    3aa4:	30600001 	addik	r3, r0, 1
    3aa8:	b0000000 	imm	0
    3aac:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3ab0:	b810ffd0 	brid	-48		// 3a80
    3ab4:	10730000 	addk	r3, r19, r0
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].DeviceId == DeviceId) {
			CfgPtr = &XIOModule_ConfigTable[i];
    3ab8:	30600004 	addik	r3, r0, 4
	 * user to stop the device and reinitialize, but prevents a user from
	 * inadvertently initializing.
	 */
	for (TimerNumber = 0;
	     TimerNumber < XTC_DEVICE_TIMER_COUNT; TimerNumber++) {
		TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3abc:	10863000 	addk	r4, r6, r6
    3ac0:	10842000 	addk	r4, r4, r4
    3ac4:	10842000 	addk	r4, r4, r4
		/*
		 * Use the current register contents and check if the timer
		 * counter is started and running, note that this is not
		 * destructive if the timer counter is already started
		 */
		StatusReg = InstancePtr->CurrentTCSR[TimerNumber];
    3ac8:	10f33000 	addk	r7, r19, r6
		InstancePtr->CallBackRef = NULL;

		/*
		 * Clear the statistics for this driver
		 */
		InstancePtr->Timer_Stats[TimerNumber].Interrupts = 0;
    3acc:	30a60019 	addik	r5, r6, 25
	 * user to stop the device and reinitialize, but prevents a user from
	 * inadvertently initializing.
	 */
	for (TimerNumber = 0;
	     TimerNumber < XTC_DEVICE_TIMER_COUNT; TimerNumber++) {
		TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3ad0:	11042000 	addk	r8, r4, r4
		/*
		 * Use the current register contents and check if the timer
		 * counter is started and running, note that this is not
		 * destructive if the timer counter is already started
		 */
		StatusReg = InstancePtr->CurrentTCSR[TimerNumber];
    3ad4:	e0870084 	lbui	r4, r7, 132
		InstancePtr->CallBackRef = NULL;

		/*
		 * Clear the statistics for this driver
		 */
		InstancePtr->Timer_Stats[TimerNumber].Interrupts = 0;
    3ad8:	10a52800 	addk	r5, r5, r5
    3adc:	11252800 	addk	r9, r5, r5
		/*
		 * Set the Load register to 0
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TLR_OFFSET, 0);
		InstancePtr->CurrentTLR[TimerNumber] = 0;
    3ae0:	30a6001d 	addik	r5, r6, 29
    3ae4:	10a52800 	addk	r5, r5, r5
		 * Use the current register contents and check if the timer
		 * counter is started and running, note that this is not
		 * destructive if the timer counter is already started
		 */
		StatusReg = InstancePtr->CurrentTCSR[TimerNumber];
		if (StatusReg & XTC_CSR_ENABLE_TMR_MASK) {
    3ae8:	a4840001 	andi	r4, r4, 1
		/*
		 * Set the Load register to 0
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TLR_OFFSET, 0);
		InstancePtr->CurrentTLR[TimerNumber] = 0;
    3aec:	10a52800 	addk	r5, r5, r5
		 * Use the current register contents and check if the timer
		 * counter is started and running, note that this is not
		 * destructive if the timer counter is already started
		 */
		StatusReg = InstancePtr->CurrentTCSR[TimerNumber];
		if (StatusReg & XTC_CSR_ENABLE_TMR_MASK) {
    3af0:	be24003c 	bneid	r4, 60		// 3b2c
    3af4:	3063ffff 	addik	r3, r3, -1

		/*
		 * Set some default values, including setting the callback
		 * handlers to stubs.
		 */
		InstancePtr->BaseAddress = IOModuleConfigPtr->BaseAddress;
    3af8:	b0000000 	imm	0
    3afc:	e94090ac 	lwi	r10, r0, -28500
		InstancePtr->Handler = NULL;
    3b00:	f8930088 	swi	r4, r19, 136
		InstancePtr->CallBackRef = NULL;
    3b04:	f893008c 	swi	r4, r19, 140

		/*
		 * Set some default values, including setting the callback
		 * handlers to stubs.
		 */
		InstancePtr->BaseAddress = IOModuleConfigPtr->BaseAddress;
    3b08:	f9530000 	swi	r10, r19, 0
		InstancePtr->CallBackRef = NULL;

		/*
		 * Clear the statistics for this driver
		 */
		InstancePtr->Timer_Stats[TimerNumber].Interrupts = 0;
    3b0c:	d8899800 	sw	r4, r9, r19
		/* Initialize the registers of each timer in the device */

		/*
		 * Set the Load register to 0
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    3b10:	312a0040 	addik	r9, r10, 64
    3b14:	d8884800 	sw	r4, r8, r9

		/*
		 * Set the control/status register to complete initialization
		 * by clearing the reset bit which was just set
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    3b18:	e9330000 	lwi	r9, r19, 0
		/*
		 * Set the Load register to 0
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TLR_OFFSET, 0);
		InstancePtr->CurrentTLR[TimerNumber] = 0;
    3b1c:	d8859800 	sw	r4, r5, r19

		/*
		 * Set the control/status register to complete initialization
		 * by clearing the reset bit which was just set
		 */
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    3b20:	30a90048 	addik	r5, r9, 72
    3b24:	d8882800 	sw	r4, r8, r5
				   TimerOffset + XTC_TCSR_OFFSET, 0);
		InstancePtr->CurrentTCSR[TimerNumber] = 0;
    3b28:	f0870084 	sbi	r4, r7, 132
	 * Check each of the timers of the device, if any are already
	 * running, then the device should not be initialized. This allows the
	 * user to stop the device and reinitialize, but prevents a user from
	 * inadvertently initializing.
	 */
	for (TimerNumber = 0;
    3b2c:	be23ff90 	bneid	r3, -112		// 3abc
    3b30:	30c60001 	addik	r6, r6, 1
	}

	/*
	 * Indicate the instance is ready to use, successfully initialized
	 */
	InstancePtr->IsReady = XCOMPONENT_IS_READY;
    3b34:	b0001111 	imm	4369
    3b38:	30801111 	addik	r4, r0, 4369
    3b3c:	f8930004 	swi	r4, r19, 4

	return XST_SUCCESS;
}
    3b40:	e9e10000 	lwi	r15, r1, 0
    3b44:	ea61001c 	lwi	r19, r1, 28
    3b48:	b60f0008 	rtsd	r15, 8
    3b4c:	30210020 	addik	r1, r1, 32

00003b50 <XIOModule_Initialize>:
*
* @note		None.
*
******************************************************************************/
int XIOModule_Initialize(XIOModule * InstancePtr, u16 DeviceId)
{
    3b50:	3021ffdc 	addik	r1, r1, -36
    3b54:	fa61001c 	swi	r19, r1, 28
    3b58:	f9e10000 	swi	r15, r1, 0
    3b5c:	fac10020 	swi	r22, r1, 32
	u8 Id;
	XIOModule_Config *CfgPtr;
	u32 NextBitMask = 1;
        int i;

	XASSERT_NONVOID(InstancePtr != NULL);
    3b60:	be050058 	beqid	r5, 88		// 3bb8
    3b64:	12650000 	addk	r19, r5, r0
	/*
	 * If the device is started, disallow the initialize and return a status
	 * indicating it is started.  This allows the user to stop the device
	 * and reinitialize, but prevents a user from inadvertently initializing
	 */
	if (InstancePtr->IsStarted == XCOMPONENT_IS_STARTED) {
    3b68:	e8850008 	lwi	r4, r5, 8
	u8 Id;
	XIOModule_Config *CfgPtr;
	u32 NextBitMask = 1;
        int i;

	XASSERT_NONVOID(InstancePtr != NULL);
    3b6c:	b0000000 	imm	0
    3b70:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	/*
	 * If the device is started, disallow the initialize and return a status
	 * indicating it is started.  This allows the user to stop the device
	 * and reinitialize, but prevents a user from inadvertently initializing
	 */
	if (InstancePtr->IsStarted == XCOMPONENT_IS_STARTED) {
    3b74:	b0002222 	imm	8738
    3b78:	a8842222 	xori	r4, r4, 8738
    3b7c:	be040028 	beqid	r4, 40		// 3ba4
    3b80:	30600005 	addik	r3, r0, 5
{
	XIOModule_Config *CfgPtr = NULL;
	int i;

	for (i = 0; i < XPAR_XIOMODULE_NUM_INSTANCES; i++) {
		if (XIOModule_ConfigTable[i].DeviceId == DeviceId) {
    3b84:	b0000000 	imm	0
    3b88:	e48090a8 	lhui	r4, r0, -28504	// 90a8 <XIOModule_ConfigTable>
    3b8c:	b0000000 	imm	0
    3b90:	306090a8 	addik	r3, r0, -28504	// 90a8 <XIOModule_ConfigTable>
    3b94:	88843000 	xor	r4, r4, r6
    3b98:	be040048 	beqid	r4, 72		// 3be0
    3b9c:	30e00001 	addik	r7, r0, 1
	 * Lookup the device configuration in the CROM table. Use this
	 * configuration info down below when initializing this component.
	 */
	CfgPtr = XIOModule_LookupConfig(DeviceId);
	if (CfgPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
    3ba0:	30600002 	addik	r3, r0, 2
	 * Indicate the instance is now ready to use, successfully initialized
	 */
	InstancePtr->IsReady = XCOMPONENT_IS_READY;

	return XST_SUCCESS;
}
    3ba4:	e9e10000 	lwi	r15, r1, 0
    3ba8:	ea61001c 	lwi	r19, r1, 28
    3bac:	eac10020 	lwi	r22, r1, 32
    3bb0:	b60f0008 	rtsd	r15, 8
    3bb4:	30210024 	addik	r1, r1, 36
	u8 Id;
	XIOModule_Config *CfgPtr;
	u32 NextBitMask = 1;
        int i;

	XASSERT_NONVOID(InstancePtr != NULL);
    3bb8:	b0000000 	imm	0
    3bbc:	30a08c6c 	addik	r5, r0, -29588
    3bc0:	b0000000 	imm	0
    3bc4:	b9f41388 	brlid	r15, 5000	// 4f4c <XAssert>
    3bc8:	30c00080 	addik	r6, r0, 128	// 80 <_exit>
    3bcc:	30600001 	addik	r3, r0, 1
    3bd0:	b0000000 	imm	0
    3bd4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3bd8:	b810ffcc 	brid	-52		// 3ba4
    3bdc:	10730000 	addk	r3, r19, r0
	}

	/*
	 * Set some default values
	 */
	InstancePtr->IsReady = 0;
    3be0:	f8850004 	swi	r4, r5, 4
	InstancePtr->IsStarted = 0;	/* not started */
    3be4:	f8850008 	swi	r4, r5, 8

	/*
	 * Initialize GPO value from INIT parameter
	 */
        for (i = 0; i < XGPO_DEVICE_COUNT; i++)
		InstancePtr->GpoValue[i] = CfgPtr->GpoInit[i];
    3be8:	b0000000 	imm	0
    3bec:	e90090dc 	lwi	r8, r0, -28452
	/*
	 * Set some default values
	 */
	InstancePtr->IsReady = 0;
	InstancePtr->IsStarted = 0;	/* not started */
	InstancePtr->CfgPtr = CfgPtr;
    3bf0:	f865000c 	swi	r3, r5, 12

	InstancePtr->CfgPtr->Options = XIN_SVC_SGL_ISR_OPTION;
    3bf4:	30a00001 	addik	r5, r0, 1
    3bf8:	f8a30018 	swi	r5, r3, 24

	/*
	 * Initialize GPO value from INIT parameter
	 */
        for (i = 0; i < XGPO_DEVICE_COUNT; i++)
		InstancePtr->GpoValue[i] = CfgPtr->GpoInit[i];
    3bfc:	f9130090 	swi	r8, r19, 144
    3c00:	b0000000 	imm	0
    3c04:	e86090e0 	lwi	r3, r0, -28448
		 * initialize it if the handler is 0 or XNullHandler, which
		 * means it was not initialized statically by the tools/user.
		 * Set the callback reference to this instance so that
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
    3c08:	b0000000 	imm	0
    3c0c:	31804f94 	addik	r12, r0, 20372	// 4f94 <XNullHandler>

	/*
	 * Save the base address pointer such that the registers of the
	 * IO Module can be accessed
	 */
	InstancePtr->BaseAddress = CfgPtr->BaseAddress;
    3c10:	30a00013 	addik	r5, r0, 19

	/*
	 * Initialize GPO value from INIT parameter
	 */
        for (i = 0; i < XGPO_DEVICE_COUNT; i++)
		InstancePtr->GpoValue[i] = CfgPtr->GpoInit[i];
    3c14:	f8730094 	swi	r3, r19, 148
    3c18:	b0000000 	imm	0
    3c1c:	e90090e4 	lwi	r8, r0, -28444
    3c20:	f9130098 	swi	r8, r19, 152
    3c24:	b0000000 	imm	0
    3c28:	e86090e8 	lwi	r3, r0, -28440
    3c2c:	f873009c 	swi	r3, r19, 156

	/*
	 * Save the base address pointer such that the registers of the
	 * IO Module can be accessed
	 */
	InstancePtr->BaseAddress = CfgPtr->BaseAddress;
    3c30:	b0000000 	imm	0
    3c34:	eac090ac 	lwi	r22, r0, -28500
    3c38:	b8100028 	brid	40		// 3c60
    3c3c:	fad30000 	swi	r22, r19, 0
		 * initialize it if the handler is 0 or XNullHandler, which
		 * means it was not initialized statically by the tools/user.
		 * Set the callback reference to this instance so that
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
    3c40:	bc0b0060 	beqi	r11, 96		// 3ca0
		 * Initialize the bit position mask table such that bit
		 * positions are lookups only for each interrupt id, with 0
		 * being a special case
		 * (XIOModule_BitPosMask[] = { 1, 2, 4, 8, ... })
		 */
		XIOModule_BitPosMask[Id] = NextBitMask;
    3c44:	b0000000 	imm	0
    3c48:	f8ea945c 	swi	r7, r10, -27556
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
				StubHandler;
		}
		InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3c4c:	b0000000 	imm	0
    3c50:	fa6990a8 	swi	r19, r9, -28504
		 * positions are lookups only for each interrupt id, with 0
		 * being a special case
		 * (XIOModule_BitPosMask[] = { 1, 2, 4, 8, ... })
		 */
		XIOModule_BitPosMask[Id] = NextBitMask;
		NextBitMask *= 2;
    3c54:	10e73800 	addk	r7, r7, r7

	/*
	 * Initialize all the data needed to perform interrupt processing for
	 * each interrupt ID up to the maximum used
	 */
	for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3c58:	be05007c 	beqid	r5, 124		// 3cd4
    3c5c:	a48400ff 	andi	r4, r4, 255
		 * initialize it if the handler is 0 or XNullHandler, which
		 * means it was not initialized statically by the tools/user.
		 * Set the callback reference to this instance so that
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
    3c60:	10642000 	addk	r3, r4, r4
    3c64:	11031800 	addk	r8, r3, r3
    3c68:	11084000 	addk	r8, r8, r8
    3c6c:	b0000000 	imm	0
    3c70:	310890a8 	addik	r8, r8, -28504
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
				StubHandler;
		}
		InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3c74:	31240009 	addik	r9, r4, 9
		 * initialize it if the handler is 0 or XNullHandler, which
		 * means it was not initialized statically by the tools/user.
		 * Set the callback reference to this instance so that
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
    3c78:	e9080044 	lwi	r8, r8, 68
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
				StubHandler;
		}
		InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3c7c:	11294800 	addk	r9, r9, r9
    3c80:	11294800 	addk	r9, r9, r9

	/*
	 * Initialize all the data needed to perform interrupt processing for
	 * each interrupt ID up to the maximum used
	 */
	for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3c84:	30a5ffff 	addik	r5, r5, -1
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
				StubHandler;
		}
		InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3c88:	11294800 	addk	r9, r9, r9
		 * Initialize the bit position mask table such that bit
		 * positions are lookups only for each interrupt id, with 0
		 * being a special case
		 * (XIOModule_BitPosMask[] = { 1, 2, 4, 8, ... })
		 */
		XIOModule_BitPosMask[Id] = NextBitMask;
    3c8c:	11431800 	addk	r10, r3, r3

	/*
	 * Initialize all the data needed to perform interrupt processing for
	 * each interrupt ID up to the maximum used
	 */
	for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3c90:	30840001 	addik	r4, r4, 1
    3c94:	a4a500ff 	andi	r5, r5, 255
		 * initialize it if the handler is 0 or XNullHandler, which
		 * means it was not initialized statically by the tools/user.
		 * Set the callback reference to this instance so that
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
    3c98:	be28ffa8 	bneid	r8, -88		// 3c40
    3c9c:	89686000 	xor	r11, r8, r12
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
    3ca0:	b0000000 	imm	0
    3ca4:	31002ec0 	addik	r8, r0, 11968	// 2ec0 <StubHandler>
    3ca8:	10631800 	addk	r3, r3, r3
    3cac:	10631800 	addk	r3, r3, r3
		 * Initialize the bit position mask table such that bit
		 * positions are lookups only for each interrupt id, with 0
		 * being a special case
		 * (XIOModule_BitPosMask[] = { 1, 2, 4, 8, ... })
		 */
		XIOModule_BitPosMask[Id] = NextBitMask;
    3cb0:	b0000000 	imm	0
    3cb4:	f8ea945c 	swi	r7, r10, -27556
		 * unhandled interrupts can be tracked.
		 */
		if ((InstancePtr->CfgPtr->HandlerTable[Id].Handler == 0) ||
		    (InstancePtr->CfgPtr->HandlerTable[Id].Handler ==
		     XNullHandler)) {
			InstancePtr->CfgPtr->HandlerTable[Id].Handler =
    3cb8:	b0000000 	imm	0
    3cbc:	f90390ec 	swi	r8, r3, -28436
				StubHandler;
		}
		InstancePtr->CfgPtr->HandlerTable[Id].CallBackRef = InstancePtr;
    3cc0:	b0000000 	imm	0
    3cc4:	fa6990a8 	swi	r19, r9, -28504
		 * positions are lookups only for each interrupt id, with 0
		 * being a special case
		 * (XIOModule_BitPosMask[] = { 1, 2, 4, 8, ... })
		 */
		XIOModule_BitPosMask[Id] = NextBitMask;
		NextBitMask *= 2;
    3cc8:	10e73800 	addk	r7, r7, r7

	/*
	 * Initialize all the data needed to perform interrupt processing for
	 * each interrupt ID up to the maximum used
	 */
	for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3ccc:	be25ff94 	bneid	r5, -108		// 3c60
    3cd0:	a48400ff 	andi	r4, r4, 255

	/*
	 * Disable all interrupt sources
	 * Acknowledge all sources
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, 0);
    3cd4:	f8b60038 	swi	r5, r22, 56
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, 0);
    3cd8:	e8730000 	lwi	r3, r19, 0
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, 0xFFFFFFFF);
    3cdc:	3080ffff 	addik	r4, r0, -1
	/*
	 * Disable all interrupt sources
	 * Acknowledge all sources
	 */
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, 0);
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, 0);
    3ce0:	f8a3000c 	swi	r5, r3, 12
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, 0xFFFFFFFF);
    3ce4:	e8730000 	lwi	r3, r19, 0
    3ce8:	f883003c 	swi	r4, r3, 60

	InstancePtr->CurrentIER = 0;
    3cec:	f8b3005c 	swi	r5, r19, 92
	InstancePtr->CurrentIMR = 0;
    3cf0:	f8b30060 	swi	r5, r19, 96
	/*
	 * If the fast Interrupt mode is enabled then set all the
	 * interrupts as normal mode and initialize the interrupt hardware
	 * vector table to default ((BaseVector & 0xFFFFFF80) | 0x10).
	 */
	if (InstancePtr->CfgPtr->FastIntr == TRUE) {
    3cf4:	b0000000 	imm	0
    3cf8:	e86090b4 	lwi	r3, r0, -28492
    3cfc:	a8630001 	xori	r3, r3, 1
    3d00:	be030058 	beqid	r3, 88		// 3d58
    3d04:	10650000 	addk	r3, r5, r0
	}

	/*
	 * Initialize all Programmable Interrupt Timers
	 */
        XIOModule_Timer_Initialize(InstancePtr, DeviceId);
    3d08:	b9f4fd48 	brlid	r15, -696	// 3a50 <XIOModule_Timer_Initialize>
    3d0c:	10b30000 	addk	r5, r19, r0

	/*
	 * Initialize all UART related status
	 */
        XIOModule_CfgInitialize(InstancePtr, CfgPtr, 0);
    3d10:	10b30000 	addk	r5, r19, r0
    3d14:	b0000000 	imm	0
    3d18:	30c090a8 	addik	r6, r0, -28504	// 90a8 <XIOModule_ConfigTable>
    3d1c:	b0000000 	imm	0
    3d20:	b9f41020 	brlid	r15, 4128	// 4d40 <XIOModule_CfgInitialize>
    3d24:	10e00000 	addk	r7, r0, r0

	/*
	 * Save the IO Bus base address pointer such that the memory mapped
	 * IO can be accessed
	 */
	InstancePtr->IoBaseAddress = CfgPtr->IoBaseAddress;
    3d28:	b0000000 	imm	0
    3d2c:	e8a090b0 	lwi	r5, r0, -28496

	/*
	 * Indicate the instance is now ready to use, successfully initialized
	 */
	InstancePtr->IsReady = XCOMPONENT_IS_READY;
    3d30:	b0001111 	imm	4369
    3d34:	31001111 	addik	r8, r0, 4369

	return XST_SUCCESS;
    3d38:	10600000 	addk	r3, r0, r0

	/*
	 * Save the IO Bus base address pointer such that the memory mapped
	 * IO can be accessed
	 */
	InstancePtr->IoBaseAddress = CfgPtr->IoBaseAddress;
    3d3c:	f8b300a0 	swi	r5, r19, 160

	/*
	 * Indicate the instance is now ready to use, successfully initialized
	 */
	InstancePtr->IsReady = XCOMPONENT_IS_READY;
    3d40:	f9130004 	swi	r8, r19, 4

	return XST_SUCCESS;
}
    3d44:	e9e10000 	lwi	r15, r1, 0
    3d48:	ea61001c 	lwi	r19, r1, 28
    3d4c:	eac10020 	lwi	r22, r1, 32
    3d50:	b60f0008 	rtsd	r15, 8
    3d54:	30210024 	addik	r1, r1, 36
	 * If the fast Interrupt mode is enabled then set all the
	 * interrupts as normal mode and initialize the interrupt hardware
	 * vector table to default ((BaseVector & 0xFFFFFF80) | 0x10).
	 */
	if (InstancePtr->CfgPtr->FastIntr == TRUE) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, 0);
    3d58:	e8f30000 	lwi	r7, r19, 0
    3d5c:	30800013 	addik	r4, r0, 19
    3d60:	f8a7000c 	swi	r5, r7, 12

		for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
			XIomodule_Out32(InstancePtr->BaseAddress +
    3d64:	b0000000 	imm	0
    3d68:	e90090b8 	lwi	r8, r0, -28488
    3d6c:	e8f30000 	lwi	r7, r19, 0
    3d70:	10a31800 	addk	r5, r3, r3
    3d74:	a508ff80 	andi	r8, r8, -128
    3d78:	30e70080 	addik	r7, r7, 128
    3d7c:	10a52800 	addk	r5, r5, r5
    3d80:	a1080010 	ori	r8, r8, 16
	 * vector table to default ((BaseVector & 0xFFFFFF80) | 0x10).
	 */
	if (InstancePtr->CfgPtr->FastIntr == TRUE) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, 0);

		for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3d84:	3084ffff 	addik	r4, r4, -1
    3d88:	30630001 	addik	r3, r3, 1
			XIomodule_Out32(InstancePtr->BaseAddress +
    3d8c:	d9053800 	sw	r8, r5, r7
	 * vector table to default ((BaseVector & 0xFFFFFF80) | 0x10).
	 */
	if (InstancePtr->CfgPtr->FastIntr == TRUE) {
		XIomodule_Out32(InstancePtr->BaseAddress + XIN_IMR_OFFSET, 0);

		for (Id = 0; Id < XPAR_IOMODULE_INTC_MAX_INTR_SIZE; Id++) {
    3d90:	a48400ff 	andi	r4, r4, 255
    3d94:	be24ffd0 	bneid	r4, -48		// 3d64
    3d98:	a46300ff 	andi	r3, r3, 255
    3d9c:	b800ff6c 	bri	-148		// 3d08

00003da0 <XIOModule_Timer_Start>:
*
* @note		None.
*
******************************************************************************/
void XIOModule_Timer_Start(XIOModule * InstancePtr, u8 TimerNumber)
{
    3da0:	3021ffe4 	addik	r1, r1, -28
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    3da4:	be0500c0 	beqid	r5, 192		// 3e64
    3da8:	f9e10000 	swi	r15, r1, 0
    3dac:	b0000000 	imm	0
    3db0:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3db4:	30600003 	addik	r3, r0, 3
    3db8:	16461803 	cmpu	r18, r6, r3
    3dbc:	bc52007c 	blti	r18, 124		// 3e38
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3dc0:	e8650004 	lwi	r3, r5, 4
    3dc4:	b0001111 	imm	4369
    3dc8:	a8631111 	xori	r3, r3, 4369
    3dcc:	be030034 	beqid	r3, 52		// 3e00
    3dd0:	10653000 	addk	r3, r5, r6
    3dd4:	b0000000 	imm	0
    3dd8:	30a08c6c 	addik	r5, r0, -29588
    3ddc:	b0000000 	imm	0
    3de0:	b9f4116c 	brlid	r15, 4460	// 4f4c <XAssert>
    3de4:	30c003a7 	addik	r6, r0, 935
    3de8:	30600001 	addik	r3, r0, 1
    3dec:	b0000000 	imm	0
    3df0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3df4:	e9e10000 	lwi	r15, r1, 0
    3df8:	b60f0008 	rtsd	r15, 8
    3dfc:	3021001c 	addik	r1, r1, 28

	/*
	 * Set the new value the current contents such that only the necessary
	 * bits of the register are modified in the following operations
	 */
	NewControlStatus = InstancePtr->CurrentTCSR[TimerNumber] |
    3e00:	e0830084 	lbui	r4, r3, 132

	/*
	 * Remove the reset condition such that the timer starts
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3e04:	e8a50000 	lwi	r5, r5, 0
*
******************************************************************************/
void XIOModule_Timer_Start(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3e08:	10c63000 	addk	r6, r6, r6
    3e0c:	10c63000 	addk	r6, r6, r6

	/*
	 * Set the new value the current contents such that only the necessary
	 * bits of the register are modified in the following operations
	 */
	NewControlStatus = InstancePtr->CurrentTCSR[TimerNumber] |
    3e10:	a0840001 	ori	r4, r4, 1
*
******************************************************************************/
void XIOModule_Timer_Start(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3e14:	10c63000 	addk	r6, r6, r6

	/*
	 * Set the new value the current contents such that only the necessary
	 * bits of the register are modified in the following operations
	 */
	NewControlStatus = InstancePtr->CurrentTCSR[TimerNumber] |
    3e18:	a48400ff 	andi	r4, r4, 255

	/*
	 * Remove the reset condition such that the timer starts
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3e1c:	30a50048 	addik	r5, r5, 72
*
******************************************************************************/
void XIOModule_Timer_Start(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3e20:	10c63000 	addk	r6, r6, r6

	/*
	 * Remove the reset condition such that the timer starts
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3e24:	d8862800 	sw	r4, r6, r5
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
    3e28:	f0830084 	sbi	r4, r3, 132
}
    3e2c:	e9e10000 	lwi	r15, r1, 0
    3e30:	b60f0008 	rtsd	r15, 8
    3e34:	3021001c 	addik	r1, r1, 28
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3e38:	b0000000 	imm	0
    3e3c:	30a08c6c 	addik	r5, r0, -29588
    3e40:	b0000000 	imm	0
    3e44:	b9f41108 	brlid	r15, 4360	// 4f4c <XAssert>
    3e48:	30c003a6 	addik	r6, r0, 934
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3e4c:	e9e10000 	lwi	r15, r1, 0
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3e50:	30600001 	addik	r3, r0, 1
    3e54:	b0000000 	imm	0
    3e58:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * running with the value loaded from the compare register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3e5c:	b60f0008 	rtsd	r15, 8
    3e60:	3021001c 	addik	r1, r1, 28
void XIOModule_Timer_Start(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    3e64:	b0000000 	imm	0
    3e68:	30a08c6c 	addik	r5, r0, -29588
    3e6c:	b0000000 	imm	0
    3e70:	b9f410dc 	brlid	r15, 4316	// 4f4c <XAssert>
    3e74:	30c003a5 	addik	r6, r0, 933
    3e78:	30600001 	addik	r3, r0, 1
    3e7c:	b0000000 	imm	0
    3e80:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3e84:	b810ff74 	brid	-140		// 3df8
    3e88:	e9e10000 	lwi	r15, r1, 0

00003e8c <XIOModule_Timer_Stop>:
*
* @note		None.
*
******************************************************************************/
void XIOModule_Timer_Stop(XIOModule * InstancePtr, u8 TimerNumber)
{
    3e8c:	3021ffe4 	addik	r1, r1, -28
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    3e90:	be0500bc 	beqid	r5, 188		// 3f4c
    3e94:	f9e10000 	swi	r15, r1, 0
    3e98:	b0000000 	imm	0
    3e9c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3ea0:	30600003 	addik	r3, r0, 3
    3ea4:	16461803 	cmpu	r18, r6, r3
    3ea8:	bc520078 	blti	r18, 120		// 3f20
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3eac:	e8650004 	lwi	r3, r5, 4
    3eb0:	b0001111 	imm	4369
    3eb4:	a8631111 	xori	r3, r3, 4369
    3eb8:	be030034 	beqid	r3, 52		// 3eec
    3ebc:	10653000 	addk	r3, r5, r6
    3ec0:	b0000000 	imm	0
    3ec4:	30a08c6c 	addik	r5, r0, -29588
    3ec8:	b0000000 	imm	0
    3ecc:	b9f41080 	brlid	r15, 4224	// 4f4c <XAssert>
    3ed0:	30c003d4 	addik	r6, r0, 980
    3ed4:	30600001 	addik	r3, r0, 1
    3ed8:	b0000000 	imm	0
    3edc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3ee0:	e9e10000 	lwi	r15, r1, 0
    3ee4:	b60f0008 	rtsd	r15, 8
    3ee8:	3021001c 	addik	r1, r1, 28
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	/*
	 * Set the new value based on the current contents
	 */
	NewControlStatus = InstancePtr->CurrentTCSR[TimerNumber];
    3eec:	e0830084 	lbui	r4, r3, 132
	NewControlStatus &= ~(XTC_CSR_ENABLE_TMR_MASK);

	/*
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3ef0:	e8a50000 	lwi	r5, r5, 0
*
******************************************************************************/
void XIOModule_Timer_Stop(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3ef4:	10c63000 	addk	r6, r6, r6
    3ef8:	10c63000 	addk	r6, r6, r6
    3efc:	10c63000 	addk	r6, r6, r6
	NewControlStatus = InstancePtr->CurrentTCSR[TimerNumber];

	/*
	 * Disable the timer counter such that it's not running
	 */
	NewControlStatus &= ~(XTC_CSR_ENABLE_TMR_MASK);
    3f00:	a484fffe 	andi	r4, r4, -2

	/*
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3f04:	30a50048 	addik	r5, r5, 72
*
******************************************************************************/
void XIOModule_Timer_Stop(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3f08:	10c63000 	addk	r6, r6, r6
	NewControlStatus &= ~(XTC_CSR_ENABLE_TMR_MASK);

	/*
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    3f0c:	d8862800 	sw	r4, r6, r5
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
    3f10:	f0830084 	sbi	r4, r3, 132
}
    3f14:	e9e10000 	lwi	r15, r1, 0
    3f18:	b60f0008 	rtsd	r15, 8
    3f1c:	3021001c 	addik	r1, r1, 28
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3f20:	b0000000 	imm	0
    3f24:	30a08c6c 	addik	r5, r0, -29588
    3f28:	b0000000 	imm	0
    3f2c:	b9f41020 	brlid	r15, 4128	// 4f4c <XAssert>
    3f30:	30c003d3 	addik	r6, r0, 979
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3f34:	e9e10000 	lwi	r15, r1, 0
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3f38:	30600001 	addik	r3, r0, 1
    3f3c:	b0000000 	imm	0
    3f40:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 * Write out the updated value to the actual register.
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TCSR_OFFSET, NewControlStatus);
	InstancePtr->CurrentTCSR[TimerNumber] = NewControlStatus;
}
    3f44:	b60f0008 	rtsd	r15, 8
    3f48:	3021001c 	addik	r1, r1, 28
void XIOModule_Timer_Stop(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 NewControlStatus;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    3f4c:	b0000000 	imm	0
    3f50:	30a08c6c 	addik	r5, r0, -29588
    3f54:	b0000000 	imm	0
    3f58:	b9f40ff4 	brlid	r15, 4084	// 4f4c <XAssert>
    3f5c:	30c003d2 	addik	r6, r0, 978
    3f60:	30600001 	addik	r3, r0, 1
    3f64:	b0000000 	imm	0
    3f68:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3f6c:	b810ff78 	brid	-136		// 3ee4
    3f70:	e9e10000 	lwi	r15, r1, 0

00003f74 <XIOModule_GetValue>:
*
* @note		None.
*
******************************************************************************/
u32 XIOModule_GetValue(XIOModule * InstancePtr, u8 TimerNumber)
{
    3f74:	3021ffe0 	addik	r1, r1, -32
    3f78:	fa61001c 	swi	r19, r1, 28
    3f7c:	f9e10000 	swi	r15, r1, 0
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    3f80:	be0500c0 	beqid	r5, 192		// 4040
    3f84:	12650000 	addk	r19, r5, r0
    3f88:	b0000000 	imm	0
    3f8c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    3f90:	30600003 	addik	r3, r0, 3
    3f94:	16461803 	cmpu	r18, r6, r3
    3f98:	bc520074 	blti	r18, 116		// 400c
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    3f9c:	e8650004 	lwi	r3, r5, 4
    3fa0:	b0001111 	imm	4369
    3fa4:	a8631111 	xori	r3, r3, 4369
    3fa8:	be03003c 	beqid	r3, 60		// 3fe4
    3fac:	10c63000 	addk	r6, r6, r6
    3fb0:	b0000000 	imm	0
    3fb4:	30a08c6c 	addik	r5, r0, -29588
    3fb8:	b0000000 	imm	0
    3fbc:	b9f40f90 	brlid	r15, 3984	// 4f4c <XAssert>
    3fc0:	30c00400 	addik	r6, r0, 1024	// 400 <_HEAP_SIZE>
    3fc4:	30600001 	addik	r3, r0, 1
    3fc8:	b0000000 	imm	0
    3fcc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    3fd0:	10600000 	addk	r3, r0, r0

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
				 TimerOffset + XTC_TCR_OFFSET);
}
    3fd4:	e9e10000 	lwi	r15, r1, 0
    3fd8:	ea61001c 	lwi	r19, r1, 28
    3fdc:	b60f0008 	rtsd	r15, 8
    3fe0:	30210020 	addik	r1, r1, 32

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
    3fe4:	e8650000 	lwi	r3, r5, 0
* @note		None.
*
******************************************************************************/
u32 XIOModule_GetValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    3fe8:	10c63000 	addk	r6, r6, r6
    3fec:	10c63000 	addk	r6, r6, r6
    3ff0:	10c63000 	addk	r6, r6, r6

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
    3ff4:	30630044 	addik	r3, r3, 68
    3ff8:	c8661800 	lw	r3, r6, r3
				 TimerOffset + XTC_TCR_OFFSET);
}
    3ffc:	e9e10000 	lwi	r15, r1, 0
    4000:	ea61001c 	lwi	r19, r1, 28
    4004:	b60f0008 	rtsd	r15, 8
    4008:	30210020 	addik	r1, r1, 32
u32 XIOModule_GetValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    400c:	b0000000 	imm	0
    4010:	30a08c6c 	addik	r5, r0, -29588
    4014:	b0000000 	imm	0
    4018:	b9f40f34 	brlid	r15, 3892	// 4f4c <XAssert>
    401c:	30c003ff 	addik	r6, r0, 1023
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
				 TimerOffset + XTC_TCR_OFFSET);
}
    4020:	e9e10000 	lwi	r15, r1, 0
    4024:	ea61001c 	lwi	r19, r1, 28
u32 XIOModule_GetValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4028:	30600001 	addik	r3, r0, 1
    402c:	b0000000 	imm	0
    4030:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4034:	10600000 	addk	r3, r0, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIOModule_ReadReg(InstancePtr->BaseAddress,
				 TimerOffset + XTC_TCR_OFFSET);
}
    4038:	b60f0008 	rtsd	r15, 8
    403c:	30210020 	addik	r1, r1, 32
******************************************************************************/
u32 XIOModule_GetValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    4040:	b0000000 	imm	0
    4044:	30a08c6c 	addik	r5, r0, -29588
    4048:	b0000000 	imm	0
    404c:	b9f40f00 	brlid	r15, 3840	// 4f4c <XAssert>
    4050:	30c003fe 	addik	r6, r0, 1022
    4054:	30600001 	addik	r3, r0, 1
    4058:	b0000000 	imm	0
    405c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4060:	b810ff74 	brid	-140		// 3fd4
    4064:	10730000 	addk	r3, r19, r0

00004068 <XIOModule_SetResetValue>:
* @note		None.
*
******************************************************************************/
void XIOModule_SetResetValue(XIOModule * InstancePtr, u8 TimerNumber,
			     u32 ResetValue)
{
    4068:	3021ffe4 	addik	r1, r1, -28
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    406c:	be0500bc 	beqid	r5, 188		// 4128
    4070:	f9e10000 	swi	r15, r1, 0
    4074:	b0000000 	imm	0
    4078:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    407c:	30600003 	addik	r3, r0, 3
    4080:	16461803 	cmpu	r18, r6, r3
    4084:	bc520078 	blti	r18, 120		// 40fc
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4088:	e8650004 	lwi	r3, r5, 4
    408c:	b0001111 	imm	4369
    4090:	a8631111 	xori	r3, r3, 4369
    4094:	be030034 	beqid	r3, 52		// 40c8
    4098:	10663000 	addk	r3, r6, r6
    409c:	b0000000 	imm	0
    40a0:	30a08c6c 	addik	r5, r0, -29588
    40a4:	b0000000 	imm	0
    40a8:	b9f40ea4 	brlid	r15, 3748	// 4f4c <XAssert>
    40ac:	30c00421 	addik	r6, r0, 1057
    40b0:	30600001 	addik	r3, r0, 1
    40b4:	b0000000 	imm	0
    40b8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
}
    40bc:	e9e10000 	lwi	r15, r1, 0
    40c0:	b60f0008 	rtsd	r15, 8
    40c4:	3021001c 	addik	r1, r1, 28

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    40c8:	e8850000 	lwi	r4, r5, 0
*
******************************************************************************/
void XIOModule_SetResetValue(XIOModule * InstancePtr, u8 TimerNumber,
			     u32 ResetValue)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    40cc:	10631800 	addk	r3, r3, r3
    40d0:	10631800 	addk	r3, r3, r3
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
    40d4:	30c6001d 	addik	r6, r6, 29

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    40d8:	30840040 	addik	r4, r4, 64
*
******************************************************************************/
void XIOModule_SetResetValue(XIOModule * InstancePtr, u8 TimerNumber,
			     u32 ResetValue)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    40dc:	10631800 	addk	r3, r3, r3
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
    40e0:	10c63000 	addk	r6, r6, r6

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIOModule_WriteReg(InstancePtr->BaseAddress,
    40e4:	d8e32000 	sw	r7, r3, r4
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
    40e8:	10c63000 	addk	r6, r6, r6
    40ec:	d8e62800 	sw	r7, r6, r5
}
    40f0:	e9e10000 	lwi	r15, r1, 0
    40f4:	b60f0008 	rtsd	r15, 8
    40f8:	3021001c 	addik	r1, r1, 28
			     u32 ResetValue)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    40fc:	b0000000 	imm	0
    4100:	30a08c6c 	addik	r5, r0, -29588
    4104:	b0000000 	imm	0
    4108:	b9f40e44 	brlid	r15, 3652	// 4f4c <XAssert>
    410c:	30c00420 	addik	r6, r0, 1056

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
}
    4110:	e9e10000 	lwi	r15, r1, 0
			     u32 ResetValue)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4114:	30600001 	addik	r3, r0, 1
    4118:	b0000000 	imm	0
    411c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIOModule_WriteReg(InstancePtr->BaseAddress,
			   TimerOffset + XTC_TLR_OFFSET,
			   ResetValue);
	InstancePtr->CurrentTLR[TimerNumber] = ResetValue;
}
    4120:	b60f0008 	rtsd	r15, 8
    4124:	3021001c 	addik	r1, r1, 28
void XIOModule_SetResetValue(XIOModule * InstancePtr, u8 TimerNumber,
			     u32 ResetValue)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    4128:	b0000000 	imm	0
    412c:	30a08c6c 	addik	r5, r0, -29588
    4130:	b0000000 	imm	0
    4134:	b9f40e18 	brlid	r15, 3608	// 4f4c <XAssert>
    4138:	30c0041f 	addik	r6, r0, 1055
    413c:	30600001 	addik	r3, r0, 1
    4140:	b0000000 	imm	0
    4144:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4148:	b810ff78 	brid	-136		// 40c0
    414c:	e9e10000 	lwi	r15, r1, 0

00004150 <XIOModule_GetCaptureValue>:
*
* @note		None.
*
*******************************************************************************/
u32 XIOModule_GetCaptureValue(XIOModule * InstancePtr, u8 TimerNumber)
{
    4150:	3021ffe0 	addik	r1, r1, -32
    4154:	fa61001c 	swi	r19, r1, 28
    4158:	f9e10000 	swi	r15, r1, 0
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    415c:	be0500b4 	beqid	r5, 180		// 4210
    4160:	12650000 	addk	r19, r5, r0
    4164:	b0000000 	imm	0
    4168:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    416c:	30600003 	addik	r3, r0, 3
    4170:	16461803 	cmpu	r18, r6, r3
    4174:	bc520068 	blti	r18, 104		// 41dc
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4178:	e8650004 	lwi	r3, r5, 4
    417c:	b0001111 	imm	4369
    4180:	a8631111 	xori	r3, r3, 4369
    4184:	be03003c 	beqid	r3, 60		// 41c0
    4188:	30c6001d 	addik	r6, r6, 29
    418c:	b0000000 	imm	0
    4190:	30a08c6c 	addik	r5, r0, -29588
    4194:	b0000000 	imm	0
    4198:	b9f40db4 	brlid	r15, 3508	// 4f4c <XAssert>
    419c:	30c00440 	addik	r6, r0, 1088
    41a0:	30600001 	addik	r3, r0, 1
    41a4:	b0000000 	imm	0
    41a8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    41ac:	10600000 	addk	r3, r0, r0

	return InstancePtr->CurrentTLR[TimerNumber];
}
    41b0:	e9e10000 	lwi	r15, r1, 0
    41b4:	ea61001c 	lwi	r19, r1, 28
    41b8:	b60f0008 	rtsd	r15, 8
    41bc:	30210020 	addik	r1, r1, 32

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return InstancePtr->CurrentTLR[TimerNumber];
    41c0:	10c63000 	addk	r6, r6, r6
    41c4:	10c63000 	addk	r6, r6, r6
    41c8:	c8662800 	lw	r3, r6, r5
}
    41cc:	e9e10000 	lwi	r15, r1, 0
    41d0:	ea61001c 	lwi	r19, r1, 28
    41d4:	b60f0008 	rtsd	r15, 8
    41d8:	30210020 	addik	r1, r1, 32
u32 XIOModule_GetCaptureValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    41dc:	b0000000 	imm	0
    41e0:	30a08c6c 	addik	r5, r0, -29588
    41e4:	b0000000 	imm	0
    41e8:	b9f40d64 	brlid	r15, 3428	// 4f4c <XAssert>
    41ec:	30c0043f 	addik	r6, r0, 1087
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return InstancePtr->CurrentTLR[TimerNumber];
}
    41f0:	e9e10000 	lwi	r15, r1, 0
    41f4:	ea61001c 	lwi	r19, r1, 28
u32 XIOModule_GetCaptureValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    41f8:	30600001 	addik	r3, r0, 1
    41fc:	b0000000 	imm	0
    4200:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4204:	10600000 	addk	r3, r0, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return InstancePtr->CurrentTLR[TimerNumber];
}
    4208:	b60f0008 	rtsd	r15, 8
    420c:	30210020 	addik	r1, r1, 32
*******************************************************************************/
u32 XIOModule_GetCaptureValue(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    4210:	b0000000 	imm	0
    4214:	30a08c6c 	addik	r5, r0, -29588
    4218:	b0000000 	imm	0
    421c:	b9f40d30 	brlid	r15, 3376	// 4f4c <XAssert>
    4220:	30c0043e 	addik	r6, r0, 1086
    4224:	30600001 	addik	r3, r0, 1
    4228:	b0000000 	imm	0
    422c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4230:	b810ff80 	brid	-128		// 41b0
    4234:	10730000 	addk	r3, r19, r0

00004238 <XIOModule_Reset>:
*
* @note		None.
*
******************************************************************************/
void XIOModule_Reset(XIOModule * InstancePtr, u8 TimerNumber)
{
    4238:	3021ffe4 	addik	r1, r1, -28
	u32 CounterControlReg;
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    423c:	be0500cc 	beqid	r5, 204		// 4308
    4240:	f9e10000 	swi	r15, r1, 0
    4244:	b0000000 	imm	0
    4248:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    424c:	30600003 	addik	r3, r0, 3
    4250:	16461803 	cmpu	r18, r6, r3
    4254:	bc520088 	blti	r18, 136		// 42dc
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4258:	e8650004 	lwi	r3, r5, 4
    425c:	b0001111 	imm	4369
    4260:	a8631111 	xori	r3, r3, 4369
    4264:	be23004c 	bneid	r3, 76		// 42b0
    4268:	10653000 	addk	r3, r5, r6

	/*
	 * Read current contents of the register so it won't be destroyed
	 */
	CounterControlReg = InstancePtr->CurrentTCSR[TimerNumber];
    426c:	e0630084 	lbui	r3, r3, 132
	NewCounterControl = CounterControlReg | XTC_CSR_ENABLE_TMR_MASK;

	/*
	 * Reset the timer by toggling the enable bit in the register
	 */
	if ((CounterControlReg & XTC_CSR_ENABLE_TMR_MASK) == 0) {
    4270:	a4830001 	andi	r4, r3, 1
    4274:	be240030 	bneid	r4, 48		// 42a4
    4278:	10c63000 	addk	r6, r6, r6
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    427c:	e8850000 	lwi	r4, r5, 0
******************************************************************************/
void XIOModule_Reset(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 CounterControlReg;
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    4280:	10c63000 	addk	r6, r6, r6
    4284:	10c63000 	addk	r6, r6, r6
    4288:	10c63000 	addk	r6, r6, r6

	/*
	 * Reset the timer by toggling the enable bit in the register
	 */
	if ((CounterControlReg & XTC_CSR_ENABLE_TMR_MASK) == 0) {
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    428c:	30840048 	addik	r4, r4, 72

	/*
	 * Read current contents of the register so it won't be destroyed
	 */
	CounterControlReg = InstancePtr->CurrentTCSR[TimerNumber];
	NewCounterControl = CounterControlReg | XTC_CSR_ENABLE_TMR_MASK;
    4290:	a0e30001 	ori	r7, r3, 1

	/*
	 * Reset the timer by toggling the enable bit in the register
	 */
	if ((CounterControlReg & XTC_CSR_ENABLE_TMR_MASK) == 0) {
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    4294:	d8e62000 	sw	r7, r6, r4
				   TimerOffset + XTC_TCSR_OFFSET,
				   NewCounterControl);
		XIOModule_WriteReg(InstancePtr->BaseAddress,
    4298:	e8850000 	lwi	r4, r5, 0
    429c:	30840048 	addik	r4, r4, 72
    42a0:	d8662000 	sw	r3, r6, r4
				   TimerOffset + XTC_TCSR_OFFSET,
				   CounterControlReg);
	}
}
    42a4:	e9e10000 	lwi	r15, r1, 0
    42a8:	b60f0008 	rtsd	r15, 8
    42ac:	3021001c 	addik	r1, r1, 28
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    42b0:	b0000000 	imm	0
    42b4:	30a08c6c 	addik	r5, r0, -29588
    42b8:	b0000000 	imm	0
    42bc:	b9f40c90 	brlid	r15, 3216	// 4f4c <XAssert>
    42c0:	30c0045e 	addik	r6, r0, 1118
				   NewCounterControl);
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TCSR_OFFSET,
				   CounterControlReg);
	}
}
    42c4:	e9e10000 	lwi	r15, r1, 0
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    42c8:	30600001 	addik	r3, r0, 1
    42cc:	b0000000 	imm	0
    42d0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
				   NewCounterControl);
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TCSR_OFFSET,
				   CounterControlReg);
	}
}
    42d4:	b60f0008 	rtsd	r15, 8
    42d8:	3021001c 	addik	r1, r1, 28
	u32 CounterControlReg;
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    42dc:	b0000000 	imm	0
    42e0:	30a08c6c 	addik	r5, r0, -29588
    42e4:	b0000000 	imm	0
    42e8:	b9f40c64 	brlid	r15, 3172	// 4f4c <XAssert>
    42ec:	30c0045d 	addik	r6, r0, 1117
				   NewCounterControl);
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TCSR_OFFSET,
				   CounterControlReg);
	}
}
    42f0:	e9e10000 	lwi	r15, r1, 0
	u32 CounterControlReg;
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    42f4:	30600001 	addik	r3, r0, 1
    42f8:	b0000000 	imm	0
    42fc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
				   NewCounterControl);
		XIOModule_WriteReg(InstancePtr->BaseAddress,
				   TimerOffset + XTC_TCSR_OFFSET,
				   CounterControlReg);
	}
}
    4300:	b60f0008 	rtsd	r15, 8
    4304:	3021001c 	addik	r1, r1, 28
{
	u32 CounterControlReg;
	u32 NewCounterControl;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_VOID(InstancePtr != NULL);
    4308:	b0000000 	imm	0
    430c:	30a08c6c 	addik	r5, r0, -29588
    4310:	b0000000 	imm	0
    4314:	b9f40c38 	brlid	r15, 3128	// 4f4c <XAssert>
    4318:	30c0045c 	addik	r6, r0, 1116
    431c:	30600001 	addik	r3, r0, 1
    4320:	b0000000 	imm	0
    4324:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4328:	b810ff80 	brid	-128		// 42a8
    432c:	e9e10000 	lwi	r15, r1, 0

00004330 <XIOModule_IsExpired>:
*
* @note		None.
*
******************************************************************************/
int XIOModule_IsExpired(XIOModule * InstancePtr, u8 TimerNumber)
{
    4330:	3021ffdc 	addik	r1, r1, -36
    4334:	fa61001c 	swi	r19, r1, 28
    4338:	f9e10000 	swi	r15, r1, 0
    433c:	fac10020 	swi	r22, r1, 32
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    4340:	be0501a4 	beqid	r5, 420		// 44e4
    4344:	12650000 	addk	r19, r5, r0
    4348:	b0000000 	imm	0
    434c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4350:	30600003 	addik	r3, r0, 3
    4354:	16461803 	cmpu	r18, r6, r3
    4358:	bc52012c 	blti	r18, 300		// 4484
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    435c:	e8650004 	lwi	r3, r5, 4
    4360:	b0001111 	imm	4369
    4364:	a8631111 	xori	r3, r3, 4369
    4368:	bc2300e4 	bnei	r3, 228		// 444c
	XASSERT_NONVOID(InstancePtr->CfgPtr->PitReadable[TimerNumber]);
    436c:	e865000c 	lwi	r3, r5, 12
    4370:	10633000 	addk	r3, r3, r6
    4374:	e2c30030 	lbui	r22, r3, 48
    4378:	bc160144 	beqi	r22, 324		// 44bc

	/*
	 * Check if timer is expired
	 */
	if (InstancePtr->CurrentTCSR[TimerNumber] & XTC_CSR_AUTO_RELOAD_MASK) {
    437c:	10653000 	addk	r3, r5, r6
    4380:	e0830084 	lbui	r4, r3, 132
    4384:	a4840002 	andi	r4, r4, 2
    4388:	be2400b0 	bneid	r4, 176		// 4438
    438c:	30600001 	addik	r3, r0, 1
		return 1; /* Always expired for reload */
	} else {
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
    4390:	e8650000 	lwi	r3, r5, 0
*
******************************************************************************/
int XIOModule_IsExpired(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    4394:	10c63000 	addk	r6, r6, r6
    4398:	10c63000 	addk	r6, r6, r6
    439c:	10c63000 	addk	r6, r6, r6
	 * Check if timer is expired
	 */
	if (InstancePtr->CurrentTCSR[TimerNumber] & XTC_CSR_AUTO_RELOAD_MASK) {
		return 1; /* Always expired for reload */
	} else {
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
    43a0:	30630044 	addik	r3, r3, 68
*
******************************************************************************/
int XIOModule_IsExpired(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    43a4:	10c63000 	addk	r6, r6, r6
	 * Check if timer is expired
	 */
	if (InstancePtr->CurrentTCSR[TimerNumber] & XTC_CSR_AUTO_RELOAD_MASK) {
		return 1; /* Always expired for reload */
	} else {
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
    43a8:	c8661800 	lw	r3, r6, r3
					       TimerOffset + XTC_TCR_OFFSET);

		return (CounterReg == 0);
    43ac:	14830000 	rsubk	r4, r3, r0
    43b0:	80641800 	or	r3, r4, r3
    43b4:	a883ffff 	xori	r4, r3, -1
    43b8:	10602000 	addk	r3, r0, r4
    43bc:	90640041 	srl	r3, r4
    43c0:	90630041 	srl	r3, r3
    43c4:	90630041 	srl	r3, r3
    43c8:	90630041 	srl	r3, r3
    43cc:	90630041 	srl	r3, r3
    43d0:	90630041 	srl	r3, r3
    43d4:	90630041 	srl	r3, r3
    43d8:	90630041 	srl	r3, r3
    43dc:	90630041 	srl	r3, r3
    43e0:	90630041 	srl	r3, r3
    43e4:	90630041 	srl	r3, r3
    43e8:	90630041 	srl	r3, r3
    43ec:	90630041 	srl	r3, r3
    43f0:	90630041 	srl	r3, r3
    43f4:	90630041 	srl	r3, r3
    43f8:	90630041 	srl	r3, r3
    43fc:	90630041 	srl	r3, r3
    4400:	90630041 	srl	r3, r3
    4404:	90630041 	srl	r3, r3
    4408:	90630041 	srl	r3, r3
    440c:	90630041 	srl	r3, r3
    4410:	90630041 	srl	r3, r3
    4414:	90630041 	srl	r3, r3
    4418:	90630041 	srl	r3, r3
    441c:	90630041 	srl	r3, r3
    4420:	90630041 	srl	r3, r3
    4424:	90630041 	srl	r3, r3
    4428:	90630041 	srl	r3, r3
    442c:	90630041 	srl	r3, r3
    4430:	90630041 	srl	r3, r3
    4434:	90630041 	srl	r3, r3
	}
}
    4438:	e9e10000 	lwi	r15, r1, 0
    443c:	ea61001c 	lwi	r19, r1, 28
    4440:	eac10020 	lwi	r22, r1, 32
    4444:	b60f0008 	rtsd	r15, 8
    4448:	30210024 	addik	r1, r1, 36
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    444c:	b0000000 	imm	0
    4450:	30a08c6c 	addik	r5, r0, -29588
    4454:	b0000000 	imm	0
    4458:	b9f40af4 	brlid	r15, 2804	// 4f4c <XAssert>
    445c:	30c0048f 	addik	r6, r0, 1167
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
					       TimerOffset + XTC_TCR_OFFSET);

		return (CounterReg == 0);
	}
}
    4460:	e9e10000 	lwi	r15, r1, 0
    4464:	ea61001c 	lwi	r19, r1, 28
    4468:	eac10020 	lwi	r22, r1, 32
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    446c:	30600001 	addik	r3, r0, 1
    4470:	b0000000 	imm	0
    4474:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4478:	10600000 	addk	r3, r0, r0
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
					       TimerOffset + XTC_TCR_OFFSET);

		return (CounterReg == 0);
	}
}
    447c:	b60f0008 	rtsd	r15, 8
    4480:	30210024 	addik	r1, r1, 36
{
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4484:	b0000000 	imm	0
    4488:	30a08c6c 	addik	r5, r0, -29588
    448c:	b0000000 	imm	0
    4490:	b9f40abc 	brlid	r15, 2748	// 4f4c <XAssert>
    4494:	30c0048e 	addik	r6, r0, 1166
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
					       TimerOffset + XTC_TCR_OFFSET);

		return (CounterReg == 0);
	}
}
    4498:	e9e10000 	lwi	r15, r1, 0
    449c:	ea61001c 	lwi	r19, r1, 28
    44a0:	eac10020 	lwi	r22, r1, 32
{
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    44a4:	30600001 	addik	r3, r0, 1
    44a8:	b0000000 	imm	0
    44ac:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    44b0:	10600000 	addk	r3, r0, r0
		CounterReg = XIOModule_ReadReg(InstancePtr->BaseAddress,
					       TimerOffset + XTC_TCR_OFFSET);

		return (CounterReg == 0);
	}
}
    44b4:	b60f0008 	rtsd	r15, 8
    44b8:	30210024 	addik	r1, r1, 36
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
	XASSERT_NONVOID(InstancePtr->CfgPtr->PitReadable[TimerNumber]);
    44bc:	b0000000 	imm	0
    44c0:	30a08c6c 	addik	r5, r0, -29588
    44c4:	b0000000 	imm	0
    44c8:	b9f40a84 	brlid	r15, 2692	// 4f4c <XAssert>
    44cc:	30c00490 	addik	r6, r0, 1168
    44d0:	30600001 	addik	r3, r0, 1
    44d4:	b0000000 	imm	0
    44d8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    44dc:	b810ff5c 	brid	-164		// 4438
    44e0:	10760000 	addk	r3, r22, r0
int XIOModule_IsExpired(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 CounterReg;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;

	XASSERT_NONVOID(InstancePtr != NULL);
    44e4:	b0000000 	imm	0
    44e8:	30a08c6c 	addik	r5, r0, -29588
    44ec:	b0000000 	imm	0
    44f0:	b9f40a5c 	brlid	r15, 2652	// 4f4c <XAssert>
    44f4:	30c0048d 	addik	r6, r0, 1165
    44f8:	30600001 	addik	r3, r0, 1
    44fc:	b0000000 	imm	0
    4500:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4504:	b810ff34 	brid	-204		// 4438
    4508:	10730000 	addk	r3, r19, r0

0000450c <XIOModule_IoReadWord>:
*
* @return	Value read from the IO Bus - 32-bit word
*
*****************************************************************************/
u32 XIOModule_IoReadWord(XIOModule * InstancePtr, u32 ByteOffset)
{
    450c:	3021ffe0 	addik	r1, r1, -32
    4510:	fa61001c 	swi	r19, r1, 28
    4514:	f9e10000 	swi	r15, r1, 0
	XASSERT_NONVOID(InstancePtr != NULL);
    4518:	be05006c 	beqid	r5, 108		// 4584
    451c:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4520:	e8650004 	lwi	r3, r5, 4
* @return	Value read from the IO Bus - 32-bit word
*
*****************************************************************************/
u32 XIOModule_IoReadWord(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    4524:	b0000000 	imm	0
    4528:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    452c:	b0001111 	imm	4369
    4530:	a8631111 	xori	r3, r3, 4369
    4534:	be03003c 	beqid	r3, 60		// 4570
    4538:	e9e10000 	lwi	r15, r1, 0
    453c:	b0000000 	imm	0
    4540:	30a08c6c 	addik	r5, r0, -29588
    4544:	b0000000 	imm	0
    4548:	b9f40a04 	brlid	r15, 2564	// 4f4c <XAssert>
    454c:	30c004b0 	addik	r6, r0, 1200
    4550:	30600001 	addik	r3, r0, 1
    4554:	b0000000 	imm	0
    4558:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    455c:	10600000 	addk	r3, r0, r0

	return XIomodule_In32((InstancePtr->IoBaseAddress + ByteOffset));
}
    4560:	e9e10000 	lwi	r15, r1, 0
    4564:	ea61001c 	lwi	r19, r1, 28
    4568:	b60f0008 	rtsd	r15, 8
    456c:	30210020 	addik	r1, r1, 32
u32 XIOModule_IoReadWord(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In32((InstancePtr->IoBaseAddress + ByteOffset));
    4570:	e86500a0 	lwi	r3, r5, 160
}
    4574:	ea61001c 	lwi	r19, r1, 28
u32 XIOModule_IoReadWord(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In32((InstancePtr->IoBaseAddress + ByteOffset));
    4578:	c8633000 	lw	r3, r3, r6
}
    457c:	b60f0008 	rtsd	r15, 8
    4580:	30210020 	addik	r1, r1, 32
* @return	Value read from the IO Bus - 32-bit word
*
*****************************************************************************/
u32 XIOModule_IoReadWord(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    4584:	b0000000 	imm	0
    4588:	30a08c6c 	addik	r5, r0, -29588
    458c:	b0000000 	imm	0
    4590:	b9f409bc 	brlid	r15, 2492	// 4f4c <XAssert>
    4594:	30c004af 	addik	r6, r0, 1199
    4598:	30600001 	addik	r3, r0, 1
    459c:	b0000000 	imm	0
    45a0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    45a4:	b810ffbc 	brid	-68		// 4560
    45a8:	10730000 	addk	r3, r19, r0

000045ac <XIOModule_IoReadHalfword>:
*
* @return	Value read from the IO Bus - 16-bit halfword
*
*****************************************************************************/
u16 XIOModule_IoReadHalfword(XIOModule * InstancePtr, u32 ByteOffset)
{
    45ac:	3021ffe0 	addik	r1, r1, -32
    45b0:	fa61001c 	swi	r19, r1, 28
    45b4:	f9e10000 	swi	r15, r1, 0
	XASSERT_NONVOID(InstancePtr != NULL);
    45b8:	be050074 	beqid	r5, 116		// 462c
    45bc:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    45c0:	e8650004 	lwi	r3, r5, 4
* @return	Value read from the IO Bus - 16-bit halfword
*
*****************************************************************************/
u16 XIOModule_IoReadHalfword(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    45c4:	b0000000 	imm	0
    45c8:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    45cc:	b0001111 	imm	4369
    45d0:	a8631111 	xori	r3, r3, 4369
    45d4:	be03003c 	beqid	r3, 60		// 4610
    45d8:	e9e10000 	lwi	r15, r1, 0
    45dc:	b0000000 	imm	0
    45e0:	30a08c6c 	addik	r5, r0, -29588
    45e4:	b0000000 	imm	0
    45e8:	b9f40964 	brlid	r15, 2404	// 4f4c <XAssert>
    45ec:	30c004c4 	addik	r6, r0, 1220
    45f0:	30600001 	addik	r3, r0, 1
    45f4:	b0000000 	imm	0
    45f8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    45fc:	10600000 	addk	r3, r0, r0

	return XIomodule_In16((InstancePtr->IoBaseAddress + ByteOffset));
}
    4600:	e9e10000 	lwi	r15, r1, 0
    4604:	ea61001c 	lwi	r19, r1, 28
    4608:	b60f0008 	rtsd	r15, 8
    460c:	30210020 	addik	r1, r1, 32
u16 XIOModule_IoReadHalfword(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In16((InstancePtr->IoBaseAddress + ByteOffset));
    4610:	e86500a0 	lwi	r3, r5, 160
}
    4614:	ea61001c 	lwi	r19, r1, 28
u16 XIOModule_IoReadHalfword(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In16((InstancePtr->IoBaseAddress + ByteOffset));
    4618:	c4633000 	lhu	r3, r3, r6
    461c:	b0000000 	imm	0
    4620:	a463ffff 	andi	r3, r3, -1
}
    4624:	b60f0008 	rtsd	r15, 8
    4628:	30210020 	addik	r1, r1, 32
* @return	Value read from the IO Bus - 16-bit halfword
*
*****************************************************************************/
u16 XIOModule_IoReadHalfword(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    462c:	b0000000 	imm	0
    4630:	30a08c6c 	addik	r5, r0, -29588
    4634:	b0000000 	imm	0
    4638:	b9f40914 	brlid	r15, 2324	// 4f4c <XAssert>
    463c:	30c004c3 	addik	r6, r0, 1219
    4640:	30600001 	addik	r3, r0, 1
    4644:	b0000000 	imm	0
    4648:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    464c:	b810ffb4 	brid	-76		// 4600
    4650:	10730000 	addk	r3, r19, r0

00004654 <XIOModule_IoReadByte>:
*
* @return	Value read from the IO Bus - 8-bit byte
*
*****************************************************************************/
u8 XIOModule_IoReadByte(XIOModule * InstancePtr, u32 ByteOffset)
{
    4654:	3021ffe0 	addik	r1, r1, -32
    4658:	fa61001c 	swi	r19, r1, 28
    465c:	f9e10000 	swi	r15, r1, 0
	XASSERT_NONVOID(InstancePtr != NULL);
    4660:	be050070 	beqid	r5, 112		// 46d0
    4664:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4668:	e8650004 	lwi	r3, r5, 4
* @return	Value read from the IO Bus - 8-bit byte
*
*****************************************************************************/
u8 XIOModule_IoReadByte(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    466c:	b0000000 	imm	0
    4670:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4674:	b0001111 	imm	4369
    4678:	a8631111 	xori	r3, r3, 4369
    467c:	be03003c 	beqid	r3, 60		// 46b8
    4680:	e9e10000 	lwi	r15, r1, 0
    4684:	b0000000 	imm	0
    4688:	30a08c6c 	addik	r5, r0, -29588
    468c:	b0000000 	imm	0
    4690:	b9f408bc 	brlid	r15, 2236	// 4f4c <XAssert>
    4694:	30c004d8 	addik	r6, r0, 1240
    4698:	30600001 	addik	r3, r0, 1
    469c:	b0000000 	imm	0
    46a0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    46a4:	10600000 	addk	r3, r0, r0

	return XIomodule_In8((InstancePtr->IoBaseAddress + ByteOffset));
}
    46a8:	e9e10000 	lwi	r15, r1, 0
    46ac:	ea61001c 	lwi	r19, r1, 28
    46b0:	b60f0008 	rtsd	r15, 8
    46b4:	30210020 	addik	r1, r1, 32
u8 XIOModule_IoReadByte(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In8((InstancePtr->IoBaseAddress + ByteOffset));
    46b8:	e86500a0 	lwi	r3, r5, 160
}
    46bc:	ea61001c 	lwi	r19, r1, 28
u8 XIOModule_IoReadByte(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return XIomodule_In8((InstancePtr->IoBaseAddress + ByteOffset));
    46c0:	c0633000 	lbu	r3, r3, r6
    46c4:	a46300ff 	andi	r3, r3, 255
}
    46c8:	b60f0008 	rtsd	r15, 8
    46cc:	30210020 	addik	r1, r1, 32
* @return	Value read from the IO Bus - 8-bit byte
*
*****************************************************************************/
u8 XIOModule_IoReadByte(XIOModule * InstancePtr, u32 ByteOffset)
{
	XASSERT_NONVOID(InstancePtr != NULL);
    46d0:	b0000000 	imm	0
    46d4:	30a08c6c 	addik	r5, r0, -29588
    46d8:	b0000000 	imm	0
    46dc:	b9f40870 	brlid	r15, 2160	// 4f4c <XAssert>
    46e0:	30c004d7 	addik	r6, r0, 1239
    46e4:	30600001 	addik	r3, r0, 1
    46e8:	b0000000 	imm	0
    46ec:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    46f0:	b810ffb8 	brid	-72		// 46a8
    46f4:	10730000 	addk	r3, r19, r0

000046f8 <XIOModule_IoWriteWord>:
*
*****************************************************************************/
void XIOModule_IoWriteWord(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u32 Data)
{
    46f8:	3021ffe4 	addik	r1, r1, -28
	XASSERT_VOID(InstancePtr != NULL);
    46fc:	be050060 	beqid	r5, 96		// 475c
    4700:	f9e10000 	swi	r15, r1, 0
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4704:	e8650004 	lwi	r3, r5, 4
*****************************************************************************/
void XIOModule_IoWriteWord(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    4708:	b0000000 	imm	0
    470c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4710:	b0001111 	imm	4369
    4714:	a8631111 	xori	r3, r3, 4369
    4718:	bc030030 	beqi	r3, 48		// 4748
    471c:	b0000000 	imm	0
    4720:	30a08c6c 	addik	r5, r0, -29588
    4724:	b0000000 	imm	0
    4728:	b9f40824 	brlid	r15, 2084	// 4f4c <XAssert>
    472c:	30c004ef 	addik	r6, r0, 1263
    4730:	30600001 	addik	r3, r0, 1
    4734:	b0000000 	imm	0
    4738:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIomodule_Out32((InstancePtr->IoBaseAddress + ByteOffset), Data);
}
    473c:	e9e10000 	lwi	r15, r1, 0
    4740:	b60f0008 	rtsd	r15, 8
    4744:	3021001c 	addik	r1, r1, 28
			   u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIomodule_Out32((InstancePtr->IoBaseAddress + ByteOffset), Data);
    4748:	e86500a0 	lwi	r3, r5, 160
    474c:	d8e33000 	sw	r7, r3, r6
}
    4750:	e9e10000 	lwi	r15, r1, 0
    4754:	b60f0008 	rtsd	r15, 8
    4758:	3021001c 	addik	r1, r1, 28
*****************************************************************************/
void XIOModule_IoWriteWord(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u32 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    475c:	b0000000 	imm	0
    4760:	30a08c6c 	addik	r5, r0, -29588
    4764:	b0000000 	imm	0
    4768:	b9f407e4 	brlid	r15, 2020	// 4f4c <XAssert>
    476c:	30c004ee 	addik	r6, r0, 1262
    4770:	30600001 	addik	r3, r0, 1
    4774:	b0000000 	imm	0
    4778:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    477c:	b810ffc4 	brid	-60		// 4740
    4780:	e9e10000 	lwi	r15, r1, 0

00004784 <XIOModule_IoWriteHalfword>:
*
*****************************************************************************/
void XIOModule_IoWriteHalfword(XIOModule * InstancePtr,
			       u32 ByteOffset,
			       u16 Data)
{
    4784:	3021ffe4 	addik	r1, r1, -28
	XASSERT_VOID(InstancePtr != NULL);
    4788:	be050060 	beqid	r5, 96		// 47e8
    478c:	f9e10000 	swi	r15, r1, 0
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4790:	e8650004 	lwi	r3, r5, 4
*****************************************************************************/
void XIOModule_IoWriteHalfword(XIOModule * InstancePtr,
			       u32 ByteOffset,
			       u16 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    4794:	b0000000 	imm	0
    4798:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    479c:	b0001111 	imm	4369
    47a0:	a8631111 	xori	r3, r3, 4369
    47a4:	bc030030 	beqi	r3, 48		// 47d4
    47a8:	b0000000 	imm	0
    47ac:	30a08c6c 	addik	r5, r0, -29588
    47b0:	b0000000 	imm	0
    47b4:	b9f40798 	brlid	r15, 1944	// 4f4c <XAssert>
    47b8:	30c00506 	addik	r6, r0, 1286
    47bc:	30600001 	addik	r3, r0, 1
    47c0:	b0000000 	imm	0
    47c4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIomodule_Out16((InstancePtr->IoBaseAddress + ByteOffset), Data);
}
    47c8:	e9e10000 	lwi	r15, r1, 0
    47cc:	b60f0008 	rtsd	r15, 8
    47d0:	3021001c 	addik	r1, r1, 28
			       u16 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIomodule_Out16((InstancePtr->IoBaseAddress + ByteOffset), Data);
    47d4:	e86500a0 	lwi	r3, r5, 160
    47d8:	d4e33000 	sh	r7, r3, r6
}
    47dc:	e9e10000 	lwi	r15, r1, 0
    47e0:	b60f0008 	rtsd	r15, 8
    47e4:	3021001c 	addik	r1, r1, 28
*****************************************************************************/
void XIOModule_IoWriteHalfword(XIOModule * InstancePtr,
			       u32 ByteOffset,
			       u16 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    47e8:	b0000000 	imm	0
    47ec:	30a08c6c 	addik	r5, r0, -29588
    47f0:	b0000000 	imm	0
    47f4:	b9f40758 	brlid	r15, 1880	// 4f4c <XAssert>
    47f8:	30c00505 	addik	r6, r0, 1285
    47fc:	30600001 	addik	r3, r0, 1
    4800:	b0000000 	imm	0
    4804:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4808:	b810ffc4 	brid	-60		// 47cc
    480c:	e9e10000 	lwi	r15, r1, 0

00004810 <XIOModule_IoWriteByte>:
*
*****************************************************************************/
void XIOModule_IoWriteByte(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u8 Data)
{
    4810:	3021ffe4 	addik	r1, r1, -28
	XASSERT_VOID(InstancePtr != NULL);
    4814:	be050060 	beqid	r5, 96		// 4874
    4818:	f9e10000 	swi	r15, r1, 0
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    481c:	e8650004 	lwi	r3, r5, 4
*****************************************************************************/
void XIOModule_IoWriteByte(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u8 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    4820:	b0000000 	imm	0
    4824:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4828:	b0001111 	imm	4369
    482c:	a8631111 	xori	r3, r3, 4369
    4830:	bc030030 	beqi	r3, 48		// 4860
    4834:	b0000000 	imm	0
    4838:	30a08c6c 	addik	r5, r0, -29588
    483c:	b0000000 	imm	0
    4840:	b9f4070c 	brlid	r15, 1804	// 4f4c <XAssert>
    4844:	30c0051d 	addik	r6, r0, 1309
    4848:	30600001 	addik	r3, r0, 1
    484c:	b0000000 	imm	0
    4850:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>

	XIomodule_Out8((InstancePtr->IoBaseAddress + ByteOffset), Data);
}
    4854:	e9e10000 	lwi	r15, r1, 0
    4858:	b60f0008 	rtsd	r15, 8
    485c:	3021001c 	addik	r1, r1, 28
			   u8 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	XIomodule_Out8((InstancePtr->IoBaseAddress + ByteOffset), Data);
    4860:	e86500a0 	lwi	r3, r5, 160
    4864:	d0e33000 	sb	r7, r3, r6
}
    4868:	e9e10000 	lwi	r15, r1, 0
    486c:	b60f0008 	rtsd	r15, 8
    4870:	3021001c 	addik	r1, r1, 28
*****************************************************************************/
void XIOModule_IoWriteByte(XIOModule * InstancePtr,
			   u32 ByteOffset,
			   u8 Data)
{
	XASSERT_VOID(InstancePtr != NULL);
    4874:	b0000000 	imm	0
    4878:	30a08c6c 	addik	r5, r0, -29588
    487c:	b0000000 	imm	0
    4880:	b9f406cc 	brlid	r15, 1740	// 4f4c <XAssert>
    4884:	30c0051c 	addik	r6, r0, 1308
    4888:	30600001 	addik	r3, r0, 1
    488c:	b0000000 	imm	0
    4890:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4894:	b810ffc4 	brid	-60		// 4858
    4898:	e9e10000 	lwi	r15, r1, 0

0000489c <XIOModule_Intc_SelfTest>:
*
* @note		None.
*
******************************************************************************/
int XIOModule_Intc_SelfTest(XIOModule * InstancePtr)
{
    489c:	3021ffe0 	addik	r1, r1, -32
    48a0:	fa61001c 	swi	r19, r1, 28
    48a4:	f9e10000 	swi	r15, r1, 0
	u32 Temp;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    48a8:	be05008c 	beqid	r5, 140		// 4934
    48ac:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    48b0:	e8650004 	lwi	r3, r5, 4
	u32 Temp;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    48b4:	b0000000 	imm	0
    48b8:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    48bc:	b0001111 	imm	4369
    48c0:	a8631111 	xori	r3, r3, 4369
    48c4:	bc23003c 	bnei	r3, 60		// 4900

	/*
	 * Acknowledge all pending interrupts by reading the interrupt status
	 * register and writing the value to the acknowledge register
	 */
	Temp = XIomodule_In32(InstancePtr->BaseAddress + XIN_ISR_OFFSET);
    48c8:	e8650000 	lwi	r3, r5, 0
    48cc:	e8830030 	lwi	r4, r3, 48

	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IAR_OFFSET, Temp);
    48d0:	f883003c 	swi	r4, r3, 60

	/*
	 * Verify that there are no interrupts by reading the interrupt status
	 */
	CurrentISR = XIomodule_In32(InstancePtr->BaseAddress + XIN_ISR_OFFSET);
    48d4:	e8650000 	lwi	r3, r5, 0
    48d8:	e8630030 	lwi	r3, r3, 48
	/*
	 * ISR for internal interrupts should be zero after all interrupts
	 * are acknowledged. Skip checking external interrupts, since they may
	 * occur at any time.
	 */
	if ((CurrentISR & 0xffff) != 0) {
    48dc:	b0000000 	imm	0
    48e0:	a463ffff 	andi	r3, r3, -1
    48e4:	be030010 	beqid	r3, 16		// 48f4
    48e8:	e9e10000 	lwi	r15, r1, 0
		return XST_INTC_FAIL_SELFTEST;
    48ec:	306004b1 	addik	r3, r0, 1201
	}

	return XST_SUCCESS;
}
    48f0:	e9e10000 	lwi	r15, r1, 0
    48f4:	ea61001c 	lwi	r19, r1, 28
    48f8:	b60f0008 	rtsd	r15, 8
    48fc:	30210020 	addik	r1, r1, 32

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4900:	b0000000 	imm	0
    4904:	30a08c78 	addik	r5, r0, -29576
    4908:	b0000000 	imm	0
    490c:	b9f40640 	brlid	r15, 1600	// 4f4c <XAssert>
    4910:	30c00073 	addik	r6, r0, 115
	if ((CurrentISR & 0xffff) != 0) {
		return XST_INTC_FAIL_SELFTEST;
	}

	return XST_SUCCESS;
}
    4914:	e9e10000 	lwi	r15, r1, 0
    4918:	ea61001c 	lwi	r19, r1, 28

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    491c:	30600001 	addik	r3, r0, 1
    4920:	b0000000 	imm	0
    4924:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4928:	10600000 	addk	r3, r0, r0
	if ((CurrentISR & 0xffff) != 0) {
		return XST_INTC_FAIL_SELFTEST;
	}

	return XST_SUCCESS;
}
    492c:	b60f0008 	rtsd	r15, 8
    4930:	30210020 	addik	r1, r1, 32
	u32 Temp;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4934:	b0000000 	imm	0
    4938:	30a08c78 	addik	r5, r0, -29576
    493c:	b0000000 	imm	0
    4940:	b9f4060c 	brlid	r15, 1548	// 4f4c <XAssert>
    4944:	30c00072 	addik	r6, r0, 114
    4948:	30600001 	addik	r3, r0, 1
    494c:	b0000000 	imm	0
    4950:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4954:	b810ff9c 	brid	-100		// 48f0
    4958:	10730000 	addk	r3, r19, r0

0000495c <XIOModule_Timer_SelfTest>:
* of the timer are returned to the initialized values and all settings at the
* time this function is called are overwritten.
*
******************************************************************************/
int XIOModule_Timer_SelfTest(XIOModule * InstancePtr, u8 TimerNumber)
{
    495c:	3021ffcc 	addik	r1, r1, -52
    4960:	fa610020 	swi	r19, r1, 32
    4964:	fb01002c 	swi	r24, r1, 44
    4968:	f9e10000 	swi	r15, r1, 0
    496c:	fac10024 	swi	r22, r1, 36
    4970:	fae10028 	swi	r23, r1, 40
    4974:	fb210030 	swi	r25, r1, 48
    4978:	12650000 	addk	r19, r5, r0
	u16 Count = 0;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    497c:	be050224 	beqid	r5, 548		// 4ba0
    4980:	13060000 	addk	r24, r6, r0
    4984:	b0000000 	imm	0
    4988:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    498c:	30600003 	addik	r3, r0, 3
    4990:	16461803 	cmpu	r18, r6, r3
    4994:	bc5201c8 	blti	r18, 456		// 4b5c
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4998:	eac50004 	lwi	r22, r5, 4
    499c:	b0001111 	imm	4369
    49a0:	aad61111 	xori	r22, r22, 4369
    49a4:	be16004c 	beqid	r22, 76		// 49f0
    49a8:	30e00001 	addik	r7, r0, 1
    49ac:	b0000000 	imm	0
    49b0:	30a08c78 	addik	r5, r0, -29576
    49b4:	b0000000 	imm	0
    49b8:	b9f40594 	brlid	r15, 1428	// 4f4c <XAssert>
    49bc:	30c000b2 	addik	r6, r0, 178
    49c0:	30600001 	addik	r3, r0, 1
    49c4:	b0000000 	imm	0
    49c8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    49cc:	10600000 	addk	r3, r0, r0
		return XST_FAILURE;
	}
	else {
		return XST_SUCCESS;
	}
}
    49d0:	e9e10000 	lwi	r15, r1, 0
    49d4:	ea610020 	lwi	r19, r1, 32
    49d8:	eac10024 	lwi	r22, r1, 36
    49dc:	eae10028 	lwi	r23, r1, 40
    49e0:	eb01002c 	lwi	r24, r1, 44
    49e4:	eb210030 	lwi	r25, r1, 48
    49e8:	b60f0008 	rtsd	r15, 8
    49ec:	30210034 	addik	r1, r1, 52

	/*
	 * Set the Load register most significant bit to 1.
	 */
	XIOModule_SetResetValue(InstancePtr, TimerNumber,
		   1 << (InstancePtr->CfgPtr->PitSize[TimerNumber] - 1));
    49f0:	e865000c 	lwi	r3, r5, 12
******************************************************************************/
int XIOModule_Timer_SelfTest(XIOModule * InstancePtr, u8 TimerNumber)
{
	u32 TimerCount1 = 0;
	u32 TimerCount2 = 0;
	u16 Count = 0;
    49f4:	12f60000 	addk	r23, r22, r0

	/*
	 * Set the Load register most significant bit to 1.
	 */
	XIOModule_SetResetValue(InstancePtr, TimerNumber,
		   1 << (InstancePtr->CfgPtr->PitSize[TimerNumber] - 1));
    49f8:	10633000 	addk	r3, r3, r6
    49fc:	e0630028 	lbui	r3, r3, 40
    4a00:	3063ffff 	addik	r3, r3, -1
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	/*
	 * Set the Load register most significant bit to 1.
	 */
	XIOModule_SetResetValue(InstancePtr, TimerNumber,
    4a04:	a643001f 	andi	r18, r3, 31
    4a08:	10803800 	addk	r4, r0, r7
    4a0c:	be120014 	beqid	r18, 20		// 4a20
    4a10:	10840000 	addk	r4, r4, r0
    4a14:	3252ffff 	addik	r18, r18, -1
    4a18:	be32fffc 	bneid	r18, -4		// 4a14
    4a1c:	10842000 	addk	r4, r4, r4
    4a20:	10e40000 	addk	r7, r4, r0
    4a24:	b000ffff 	imm	-1
    4a28:	b9f4f640 	brlid	r15, -2496	// 4068 <XIOModule_SetResetValue>
    4a2c:	f881001c 	swi	r4, r1, 28
		   1 << (InstancePtr->CfgPtr->PitSize[TimerNumber] - 1));

	/*
	 * Reset the timer and the interrupt
	 */
	XIOModule_Timer_SetOptions(InstancePtr, TimerNumber, 0);
    4a30:	10f60000 	addk	r7, r22, r0
    4a34:	10b30000 	addk	r5, r19, r0
    4a38:	b0000000 	imm	0
    4a3c:	b9f40700 	brlid	r15, 1792	// 513c <XIOModule_Timer_SetOptions>
    4a40:	10d80000 	addk	r6, r24, r0

	/*
	 * Set the control/status register to enable timer
	 */
	XIOModule_Timer_Start(InstancePtr, TimerNumber);
    4a44:	10b30000 	addk	r5, r19, r0
    4a48:	b000ffff 	imm	-1
    4a4c:	b9f4f354 	brlid	r15, -3244	// 3da0 <XIOModule_Timer_Start>
    4a50:	10d80000 	addk	r6, r24, r0

	/*
	 * Read the timer
	 */
	TimerCount1 = XIOModule_GetValue(InstancePtr, TimerNumber);
    4a54:	10b30000 	addk	r5, r19, r0
    4a58:	b000ffff 	imm	-1
    4a5c:	b9f4f518 	brlid	r15, -2792	// 3f74 <XIOModule_GetValue>
    4a60:	10d80000 	addk	r6, r24, r0
    4a64:	b8100010 	brid	16		// 4a74
    4a68:	13230000 	addk	r25, r3, r0
	 */
	do {
		TimerCount2 = XIOModule_GetValue(InstancePtr, TimerNumber);
		Count++;
	}
	while ((TimerCount1 == TimerCount2) && (Count != 0));
    4a6c:	be440038 	bltid	r4, 56		// 4aa4
    4a70:	10b30000 	addk	r5, r19, r0
	/*
	 * Make sure timer is decrementing if the Count rolls under zero
	 * and the timer still has not decremented an error is returned
	 */
	do {
		TimerCount2 = XIOModule_GetValue(InstancePtr, TimerNumber);
    4a74:	10b30000 	addk	r5, r19, r0
		Count++;
    4a78:	32f70001 	addik	r23, r23, 1
    4a7c:	b0000000 	imm	0
    4a80:	a6f7ffff 	andi	r23, r23, -1
	/*
	 * Make sure timer is decrementing if the Count rolls under zero
	 * and the timer still has not decremented an error is returned
	 */
	do {
		TimerCount2 = XIOModule_GetValue(InstancePtr, TimerNumber);
    4a84:	b000ffff 	imm	-1
    4a88:	b9f4f4ec 	brlid	r15, -2836	// 3f74 <XIOModule_GetValue>
    4a8c:	10d80000 	addk	r6, r24, r0
		Count++;
	}
	while ((TimerCount1 == TimerCount2) && (Count != 0));
    4a90:	8ad91800 	xor	r22, r25, r3
    4a94:	14960000 	rsubk	r4, r22, r0
    4a98:	be37ffd4 	bneid	r23, -44		// 4a6c
    4a9c:	8084b000 	or	r4, r4, r22

	/*
	 * Set the control/status register to 0 to complete initialization
	 * this disables the timer completely and allows it to be used again
	 */
	XIOModule_Timer_Stop(InstancePtr, TimerNumber);
    4aa0:	10b30000 	addk	r5, r19, r0
    4aa4:	b000ffff 	imm	-1
    4aa8:	b9f4f3e4 	brlid	r15, -3100	// 3e8c <XIOModule_Timer_Stop>
    4aac:	10d80000 	addk	r6, r24, r0
	u16 Count = 0;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4ab0:	14760000 	rsubk	r3, r22, r0
    4ab4:	82c3b000 	or	r22, r3, r22
    4ab8:	aad6ffff 	xori	r22, r22, -1
    4abc:	1060b000 	addk	r3, r0, r22
    4ac0:	90760041 	srl	r3, r22
    4ac4:	90630041 	srl	r3, r3
    4ac8:	90630041 	srl	r3, r3
    4acc:	90630041 	srl	r3, r3
    4ad0:	90630041 	srl	r3, r3
    4ad4:	90630041 	srl	r3, r3
    4ad8:	90630041 	srl	r3, r3
    4adc:	90630041 	srl	r3, r3
    4ae0:	90630041 	srl	r3, r3
    4ae4:	90630041 	srl	r3, r3
    4ae8:	90630041 	srl	r3, r3
    4aec:	90630041 	srl	r3, r3
    4af0:	90630041 	srl	r3, r3
    4af4:	90630041 	srl	r3, r3
    4af8:	90630041 	srl	r3, r3
    4afc:	90630041 	srl	r3, r3
    4b00:	90630041 	srl	r3, r3
    4b04:	90630041 	srl	r3, r3
    4b08:	90630041 	srl	r3, r3
    4b0c:	90630041 	srl	r3, r3
    4b10:	90630041 	srl	r3, r3
    4b14:	90630041 	srl	r3, r3
    4b18:	90630041 	srl	r3, r3
    4b1c:	90630041 	srl	r3, r3
    4b20:	90630041 	srl	r3, r3
    4b24:	90630041 	srl	r3, r3
    4b28:	90630041 	srl	r3, r3
    4b2c:	90630041 	srl	r3, r3
    4b30:	90630041 	srl	r3, r3
    4b34:	90630041 	srl	r3, r3
    4b38:	90630041 	srl	r3, r3
		return XST_FAILURE;
	}
	else {
		return XST_SUCCESS;
	}
}
    4b3c:	e9e10000 	lwi	r15, r1, 0
    4b40:	ea610020 	lwi	r19, r1, 32
    4b44:	eac10024 	lwi	r22, r1, 36
    4b48:	eae10028 	lwi	r23, r1, 40
    4b4c:	eb01002c 	lwi	r24, r1, 44
    4b50:	eb210030 	lwi	r25, r1, 48
    4b54:	b60f0008 	rtsd	r15, 8
    4b58:	30210034 	addik	r1, r1, 52

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4b5c:	b0000000 	imm	0
    4b60:	30a08c78 	addik	r5, r0, -29576
    4b64:	b0000000 	imm	0
    4b68:	b9f403e4 	brlid	r15, 996	// 4f4c <XAssert>
    4b6c:	30c000b1 	addik	r6, r0, 177
		return XST_FAILURE;
	}
	else {
		return XST_SUCCESS;
	}
}
    4b70:	e9e10000 	lwi	r15, r1, 0
    4b74:	ea610020 	lwi	r19, r1, 32
    4b78:	eac10024 	lwi	r22, r1, 36
    4b7c:	eae10028 	lwi	r23, r1, 40
    4b80:	eb01002c 	lwi	r24, r1, 44
    4b84:	eb210030 	lwi	r25, r1, 48

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    4b88:	30800001 	addik	r4, r0, 1
    4b8c:	10600000 	addk	r3, r0, r0
    4b90:	b0000000 	imm	0
    4b94:	f88094a8 	swi	r4, r0, -27480	// 94a8 <XAssertStatus>
		return XST_FAILURE;
	}
	else {
		return XST_SUCCESS;
	}
}
    4b98:	b60f0008 	rtsd	r15, 8
    4b9c:	30210034 	addik	r1, r1, 52
	u16 Count = 0;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4ba0:	b0000000 	imm	0
    4ba4:	30a08c78 	addik	r5, r0, -29576
    4ba8:	b0000000 	imm	0
    4bac:	b9f403a0 	brlid	r15, 928	// 4f4c <XAssert>
    4bb0:	30c000b0 	addik	r6, r0, 176
    4bb4:	30600001 	addik	r3, r0, 1
    4bb8:	b0000000 	imm	0
    4bbc:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4bc0:	b810fe10 	brid	-496		// 49d0
    4bc4:	10730000 	addk	r3, r19, r0

00004bc8 <XIOModule_SelfTest>:
		return XST_SUCCESS;
	}
}

int XIOModule_SelfTest(XIOModule * InstancePtr)
{
    4bc8:	3021ffd0 	addik	r1, r1, -48
    4bcc:	fa61001c 	swi	r19, r1, 28
    4bd0:	f9e10000 	swi	r15, r1, 0
    4bd4:	fac10020 	swi	r22, r1, 32
    4bd8:	fae10024 	swi	r23, r1, 36
    4bdc:	fb010028 	swi	r24, r1, 40
    4be0:	fb21002c 	swi	r25, r1, 44
	XIOModule_Config *CfgPtr;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4be4:	be050100 	beqid	r5, 256		// 4ce4
    4be8:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4bec:	e8650004 	lwi	r3, r5, 4
	XIOModule_Config *CfgPtr;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4bf0:	b0000000 	imm	0
    4bf4:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4bf8:	b0001111 	imm	4369
    4bfc:	a8631111 	xori	r3, r3, 4369
    4c00:	bc030048 	beqi	r3, 72		// 4c48
    4c04:	b0000000 	imm	0
    4c08:	30a08c78 	addik	r5, r0, -29576
    4c0c:	b0000000 	imm	0
    4c10:	b9f4033c 	brlid	r15, 828	// 4f4c <XAssert>
    4c14:	30c000eb 	addik	r6, r0, 235
    4c18:	30600001 	addik	r3, r0, 1
    4c1c:	b0000000 	imm	0
    4c20:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4c24:	10600000 	addk	r3, r0, r0
			}
		}
	}

	return XST_SUCCESS;
}
    4c28:	e9e10000 	lwi	r15, r1, 0
    4c2c:	ea61001c 	lwi	r19, r1, 28
    4c30:	eac10020 	lwi	r22, r1, 32
    4c34:	eae10024 	lwi	r23, r1, 36
    4c38:	eb010028 	lwi	r24, r1, 40
    4c3c:	eb21002c 	lwi	r25, r1, 44
    4c40:	b60f0008 	rtsd	r15, 8
    4c44:	30210030 	addik	r1, r1, 48
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	/*
	 * Perform the interrupt controller self test.
	 */
	Status = XIOModule_Intc_SelfTest(InstancePtr);
    4c48:	b9f4fc54 	brlid	r15, -940	// 489c <XIOModule_Intc_SelfTest>
    4c4c:	80000000 	or	r0, r0, r0
    4c50:	12e30000 	addk	r23, r3, r0
	if (Status != XST_SUCCESS)
    4c54:	be37ffd4 	bneid	r23, -44		// 4c28
    4c58:	30600001 	addik	r3, r0, 1
	 * Skip unused timers,timers with prescaler (since they may
	 * have very long expiration times), timers without readable
	 * counters, and timers with small size (since the counter
	 * may not change when sampled).
	 */
	CfgPtr = InstancePtr->CfgPtr;
    4c5c:	eb13000c 	lwi	r24, r19, 12
    4c60:	32c00004 	addik	r22, r0, 4
	for (Timer = 0; Timer < XTC_DEVICE_TIMER_COUNT; Timer++) {
		if (CfgPtr->PitUsed[Timer] &&
		    CfgPtr->PitPrescaler[Timer] == XTC_PRESCALER_NONE &&
		    CfgPtr->PitReadable[Timer] &&
    4c64:	33200008 	addik	r25, r0, 8	// 8 <_vector_sw_exception>
	 * counters, and timers with small size (since the counter
	 * may not change when sampled).
	 */
	CfgPtr = InstancePtr->CfgPtr;
	for (Timer = 0; Timer < XTC_DEVICE_TIMER_COUNT; Timer++) {
		if (CfgPtr->PitUsed[Timer] &&
    4c68:	1078b800 	addk	r3, r24, r23
    4c6c:	e0830024 	lbui	r4, r3, 36
    4c70:	bc040014 	beqi	r4, 20		// 4c84
    4c74:	e083002c 	lbui	r4, r3, 44
    4c78:	bc24000c 	bnei	r4, 12		// 4c84
		    CfgPtr->PitPrescaler[Timer] == XTC_PRESCALER_NONE &&
    4c7c:	e0830030 	lbui	r4, r3, 48
    4c80:	bc24003c 	bnei	r4, 60		// 4cbc
	 * have very long expiration times), timers without readable
	 * counters, and timers with small size (since the counter
	 * may not change when sampled).
	 */
	CfgPtr = InstancePtr->CfgPtr;
	for (Timer = 0; Timer < XTC_DEVICE_TIMER_COUNT; Timer++) {
    4c84:	32d6ffff 	addik	r22, r22, -1
    4c88:	32f70001 	addik	r23, r23, 1
    4c8c:	a6d600ff 	andi	r22, r22, 255
    4c90:	be36ffd8 	bneid	r22, -40		// 4c68
    4c94:	a6f700ff 	andi	r23, r23, 255
				return XST_FAILURE;
			}
		}
	}

	return XST_SUCCESS;
    4c98:	10760000 	addk	r3, r22, r0
}
    4c9c:	e9e10000 	lwi	r15, r1, 0
    4ca0:	ea61001c 	lwi	r19, r1, 28
    4ca4:	eac10020 	lwi	r22, r1, 32
    4ca8:	eae10024 	lwi	r23, r1, 36
    4cac:	eb010028 	lwi	r24, r1, 40
    4cb0:	eb21002c 	lwi	r25, r1, 44
    4cb4:	b60f0008 	rtsd	r15, 8
    4cb8:	30210030 	addik	r1, r1, 48
	 */
	CfgPtr = InstancePtr->CfgPtr;
	for (Timer = 0; Timer < XTC_DEVICE_TIMER_COUNT; Timer++) {
		if (CfgPtr->PitUsed[Timer] &&
		    CfgPtr->PitPrescaler[Timer] == XTC_PRESCALER_NONE &&
		    CfgPtr->PitReadable[Timer] &&
    4cbc:	e0630028 	lbui	r3, r3, 40
    4cc0:	1643c803 	cmpu	r18, r3, r25
    4cc4:	beb2ffc0 	bgeid	r18, -64		// 4c84
    4cc8:	10d70000 	addk	r6, r23, r0
		    CfgPtr->PitSize[Timer] > 8) {
			Status = XIOModule_Timer_SelfTest(InstancePtr, Timer);
    4ccc:	b9f4fc90 	brlid	r15, -880	// 495c <XIOModule_Timer_SelfTest>
    4cd0:	10b30000 	addk	r5, r19, r0
			if (Status != XST_SUCCESS)
    4cd4:	be03ffb4 	beqid	r3, -76		// 4c88
    4cd8:	32d6ffff 	addik	r22, r22, -1
			{
				return XST_FAILURE;
    4cdc:	b810ff4c 	brid	-180		// 4c28
    4ce0:	30600001 	addik	r3, r0, 1
	XIOModule_Config *CfgPtr;

	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    4ce4:	b0000000 	imm	0
    4ce8:	30a08c78 	addik	r5, r0, -29576
    4cec:	b0000000 	imm	0
    4cf0:	b9f4025c 	brlid	r15, 604	// 4f4c <XAssert>
    4cf4:	30c000ea 	addik	r6, r0, 234
    4cf8:	30600001 	addik	r3, r0, 1
    4cfc:	b0000000 	imm	0
    4d00:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    4d04:	b810ff24 	brid	-220		// 4c28
    4d08:	10730000 	addk	r3, r19, r0

00004d0c <StubHandler>:
static void StubHandler(void *CallBackRef, unsigned int ByteCount)
{
	/*
	 * Assert occurs always since this is a stub and should never be called
	 */
	Xil_AssertVoidAlways();
    4d0c:	b0000000 	imm	0
    4d10:	30a08c90 	addik	r5, r0, -29552
*
* @note		None.
*
*****************************************************************************/
static void StubHandler(void *CallBackRef, unsigned int ByteCount)
{
    4d14:	3021ffe4 	addik	r1, r1, -28
    4d18:	f9e10000 	swi	r15, r1, 0
	/*
	 * Assert occurs always since this is a stub and should never be called
	 */
	Xil_AssertVoidAlways();
    4d1c:	b0000000 	imm	0
    4d20:	b9f4027c 	brlid	r15, 636	// 4f9c <Xil_Assert>
    4d24:	30c00109 	addik	r6, r0, 265
}
    4d28:	e9e10000 	lwi	r15, r1, 0
static void StubHandler(void *CallBackRef, unsigned int ByteCount)
{
	/*
	 * Assert occurs always since this is a stub and should never be called
	 */
	Xil_AssertVoidAlways();
    4d2c:	30600001 	addik	r3, r0, 1
    4d30:	b0000000 	imm	0
    4d34:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
}
    4d38:	b60f0008 	rtsd	r15, 8
    4d3c:	3021001c 	addik	r1, r1, 28

00004d40 <XIOModule_CfgInitialize>:
*		consistent with other drivers.
*
*****************************************************************************/
int XIOModule_CfgInitialize(XIOModule *InstancePtr, XIOModule_Config *Config,
				u32 EffectiveAddr)
{
    4d40:	3021ffe4 	addik	r1, r1, -28
	u32 NewIER;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4d44:	be050070 	beqid	r5, 112		// 4db4
    4d48:	f9e10000 	swi	r15, r1, 0

	InstancePtr->ReceiveBuffer.NextBytePtr = NULL;
	InstancePtr->ReceiveBuffer.RemainingBytes = 0;
	InstancePtr->ReceiveBuffer.RequestedBytes = 0;

	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
    4d4c:	b0001111 	imm	4369
    4d50:	30e01111 	addik	r7, r0, 4369
	InstancePtr->SendHandler = StubHandler;

	/* 
	 * Modify the IER to disable the UART interrupts
	 */
	NewIER = InstancePtr->CurrentIER & 0xFFFFFFF8;
    4d54:	e885005c 	lwi	r4, r5, 92
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    4d58:	e8c50000 	lwi	r6, r5, 0

	InstancePtr->ReceiveBuffer.NextBytePtr = NULL;
	InstancePtr->ReceiveBuffer.RemainingBytes = 0;
	InstancePtr->ReceiveBuffer.RequestedBytes = 0;

	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;
    4d5c:	f8e50004 	swi	r7, r5, 4

	InstancePtr->RecvHandler = StubHandler;
    4d60:	b0000000 	imm	0
    4d64:	30e04d0c 	addik	r7, r0, 19724	// 4d0c <StubHandler>
	InstancePtr->SendHandler = StubHandler;

	/* 
	 * Modify the IER to disable the UART interrupts
	 */
	NewIER = InstancePtr->CurrentIER & 0xFFFFFFF8;
    4d68:	a484fff8 	andi	r4, r4, -8

	/*
	 * Set some default values, including setting the callback
	 * handlers to stubs.
	 */
	InstancePtr->SendBuffer.NextBytePtr = NULL;
    4d6c:	f805002c 	swi	r0, r5, 44
	InstancePtr->ReceiveBuffer.RemainingBytes = 0;
	InstancePtr->ReceiveBuffer.RequestedBytes = 0;

	InstancePtr->IsReady = XIL_COMPONENT_IS_READY;

	InstancePtr->RecvHandler = StubHandler;
    4d70:	f8e50044 	swi	r7, r5, 68
	InstancePtr->SendHandler = StubHandler;
    4d74:	f8e5004c 	swi	r7, r5, 76
	/*
	 * Set some default values, including setting the callback
	 * handlers to stubs.
	 */
	InstancePtr->SendBuffer.NextBytePtr = NULL;
	InstancePtr->SendBuffer.RemainingBytes = 0;
    4d78:	f8050034 	swi	r0, r5, 52
	InstancePtr->SendBuffer.RequestedBytes = 0;
    4d7c:	f8050030 	swi	r0, r5, 48

	InstancePtr->ReceiveBuffer.NextBytePtr = NULL;
    4d80:	f8050038 	swi	r0, r5, 56
	InstancePtr->ReceiveBuffer.RemainingBytes = 0;
    4d84:	f8050040 	swi	r0, r5, 64
	InstancePtr->ReceiveBuffer.RequestedBytes = 0;
    4d88:	f805003c 	swi	r0, r5, 60
	u32 NewIER;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4d8c:	b0000000 	imm	0
    4d90:	f80094ac 	swi	r0, r0, -27476	// 94ac <Xil_AssertStatus>

	/* 
	 * Modify the IER to disable the UART interrupts
	 */
	NewIER = InstancePtr->CurrentIER & 0xFFFFFFF8;
	XIomodule_Out32(InstancePtr->BaseAddress + XIN_IER_OFFSET, NewIER);
    4d94:	f8860038 	swi	r4, r6, 56
	InstancePtr->CurrentIER = NewIER;

	/*
	 * Clear the statistics for this driver
	 */
	XIOModule_ClearStats(InstancePtr);
    4d98:	b0000000 	imm	0
    4d9c:	b9f40668 	brlid	r15, 1640	// 5404 <XIOModule_ClearStats>
    4da0:	f885005c 	swi	r4, r5, 92

	return XST_SUCCESS;
}
    4da4:	e9e10000 	lwi	r15, r1, 0
    4da8:	10600000 	addk	r3, r0, r0
    4dac:	b60f0008 	rtsd	r15, 8
    4db0:	3021001c 	addik	r1, r1, 28
	u32 NewIER;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4db4:	b0000000 	imm	0
    4db8:	30a08c90 	addik	r5, r0, -29552
    4dbc:	b0000000 	imm	0
    4dc0:	b9f401dc 	brlid	r15, 476	// 4f9c <Xil_Assert>
    4dc4:	30c0007d 	addik	r6, r0, 125
	 * Clear the statistics for this driver
	 */
	XIOModule_ClearStats(InstancePtr);

	return XST_SUCCESS;
}
    4dc8:	e9e10000 	lwi	r15, r1, 0
	u32 NewIER;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4dcc:	30600001 	addik	r3, r0, 1
    4dd0:	b0000000 	imm	0
    4dd4:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
	 * Clear the statistics for this driver
	 */
	XIOModule_ClearStats(InstancePtr);

	return XST_SUCCESS;
}
    4dd8:	10600000 	addk	r3, r0, r0
    4ddc:	b60f0008 	rtsd	r15, 8
    4de0:	3021001c 	addik	r1, r1, 28

00004de4 <XIOModule_SetBaudRate>:
*
* @note		None.
*
*****************************************************************************/
int XIOModule_SetBaudRate(XIOModule *InstancePtr, u32 BaudRate)
{
    4de4:	3021ffcc 	addik	r1, r1, -52
    4de8:	fa61001c 	swi	r19, r1, 28
    4dec:	fae10024 	swi	r23, r1, 36
    4df0:	f9e10000 	swi	r15, r1, 0
    4df4:	fac10020 	swi	r22, r1, 32
    4df8:	fb010028 	swi	r24, r1, 40
    4dfc:	fb21002c 	swi	r25, r1, 44
    4e00:	fb410030 	swi	r26, r1, 48
    4e04:	12650000 	addk	r19, r5, r0
	u32 PercentError;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4e08:	be05011c 	beqid	r5, 284		// 4f24
    4e0c:	12e60000 	addk	r23, r6, r0
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    4e10:	e8650004 	lwi	r3, r5, 4
	u32 PercentError;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4e14:	b0000000 	imm	0
    4e18:	f80094ac 	swi	r0, r0, -27476	// 94ac <Xil_AssertStatus>
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    4e1c:	b0001111 	imm	4369
    4e20:	a8631111 	xori	r3, r3, 4369
    4e24:	be2300bc 	bneid	r3, 188		// 4ee0
    4e28:	10a63000 	addk	r5, r6, r6
	 * rate based upon the input clock frequency and a baud clock prescaler
	 * of 16, rounded to nearest divisor
	 */
	Baud8 = BaudRate << 3;
	Baud16 = Baud8 << 1;
        InputClockHz = InstancePtr->CfgPtr->InputClockHz;
    4e2c:	eb33000c 	lwi	r25, r19, 12
	/*
	 * Determine what the divisor should be to get the specified baud
	 * rate based upon the input clock frequency and a baud clock prescaler
	 * of 16, rounded to nearest divisor
	 */
	Baud8 = BaudRate << 3;
    4e30:	10a52800 	addk	r5, r5, r5
    4e34:	10a52800 	addk	r5, r5, r5
	Baud16 = Baud8 << 1;
    4e38:	13052800 	addk	r24, r5, r5
        InputClockHz = InstancePtr->CfgPtr->InputClockHz;
    4e3c:	ead9001c 	lwi	r22, r25, 28
	Divisor = (InputClockHz + Baud8) / Baud16;
    4e40:	10d80000 	addk	r6, r24, r0
    4e44:	b0000000 	imm	0
    4e48:	b9f4222c 	brlid	r15, 8748	// 7074 <__udivsi3>
    4e4c:	10a5b000 	addk	r5, r5, r22
	/*
	 * Check for too much error between the baud rate that will be generated
	 * using the divisor and the expected baud rate, ensuring that the error
	 * is positive due to rounding above
	 */
	TargetRate = Divisor * Baud16;
    4e50:	10a30000 	addk	r5, r3, r0
    4e54:	10d80000 	addk	r6, r24, r0
    4e58:	b0000000 	imm	0
    4e5c:	b9f421c0 	brlid	r15, 8640	// 701c <__mulsi3>
    4e60:	13430000 	addk	r26, r3, r0
	if (InputClockHz < TargetRate)
    4e64:	1643b003 	cmpu	r18, r3, r22
    4e68:	beb20070 	bgeid	r18, 112		// 4ed8
    4e6c:	14961800 	rsubk	r4, r22, r3
	/*
	 * Error has total error now compute the percentage multiplied by 100 to
	 * avoid floating point calculations, should be less than 3% as per
	 * RS-232 spec
	 */
	PercentError = (Error * 100UL) / InputClockHz;
    4e70:	10e42000 	addk	r7, r4, r4
    4e74:	10e72000 	addk	r7, r7, r4
    4e78:	10c73800 	addk	r6, r7, r7
    4e7c:	10c63000 	addk	r6, r6, r6
    4e80:	10c63000 	addk	r6, r6, r6
    4e84:	10c63000 	addk	r6, r6, r6
    4e88:	10663000 	addk	r3, r6, r6
    4e8c:	10d60000 	addk	r6, r22, r0
    4e90:	10e71800 	addk	r7, r7, r3
    4e94:	b0000000 	imm	0
    4e98:	b9f421dc 	brlid	r15, 8668	// 7074 <__udivsi3>
    4e9c:	10a72000 	addk	r5, r7, r4
	if (PercentError > XUN_MAX_BAUD_ERROR_RATE) {
    4ea0:	30a00003 	addik	r5, r0, 3
    4ea4:	16432803 	cmpu	r18, r3, r5
    4ea8:	beb20060 	bgeid	r18, 96		// 4f08
    4eac:	3080041f 	addik	r4, r0, 1055
	 * won't have to calculate it from the divisor
	 */
	InstancePtr->CfgPtr->BaudRate = BaudRate;

	return XST_SUCCESS;
}
    4eb0:	10640000 	addk	r3, r4, r0
    4eb4:	e9e10000 	lwi	r15, r1, 0
    4eb8:	ea61001c 	lwi	r19, r1, 28
    4ebc:	eac10020 	lwi	r22, r1, 32
    4ec0:	eae10024 	lwi	r23, r1, 36
    4ec4:	eb010028 	lwi	r24, r1, 40
    4ec8:	eb21002c 	lwi	r25, r1, 44
    4ecc:	eb410030 	lwi	r26, r1, 48
    4ed0:	b60f0008 	rtsd	r15, 8
    4ed4:	30210034 	addik	r1, r1, 52
	 */
	TargetRate = Divisor * Baud16;
	if (InputClockHz < TargetRate)
		Error = TargetRate - InputClockHz;
	else
		Error = InputClockHz - TargetRate;
    4ed8:	b810ff98 	brid	-104		// 4e70
    4edc:	1483b000 	rsubk	r4, r3, r22

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
	Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    4ee0:	b0000000 	imm	0
    4ee4:	30a08c90 	addik	r5, r0, -29552
    4ee8:	b0000000 	imm	0
    4eec:	b9f400b0 	brlid	r15, 176	// 4f9c <Xil_Assert>
    4ef0:	30c000c3 	addik	r6, r0, 195
    4ef4:	30600001 	addik	r3, r0, 1
    4ef8:	b0000000 	imm	0
    4efc:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
    4f00:	b810ffb0 	brid	-80		// 4eb0
    4f04:	10800000 	addk	r4, r0, r0
	}

	/*
	 * Write the baud rate divisor to the UART Baud Rate Register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    4f08:	e8730000 	lwi	r3, r19, 0
    4f0c:	335affff 	addik	r26, r26, -1
	 * Save the baud rate in the instance so that the get baud rate function
	 * won't have to calculate it from the divisor
	 */
	InstancePtr->CfgPtr->BaudRate = BaudRate;

	return XST_SUCCESS;
    4f10:	10800000 	addk	r4, r0, r0
	}

	/*
	 * Write the baud rate divisor to the UART Baud Rate Register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress,
    4f14:	fb43004c 	swi	r26, r3, 76
			   XUL_BAUDRATE_OFFSET,
			   Divisor - 1);
	InstancePtr->CurrentUBRR = Divisor - 1;
    4f18:	fb530054 	swi	r26, r19, 84
	 * Save the baud rate in the instance so that the get baud rate function
	 * won't have to calculate it from the divisor
	 */
	InstancePtr->CfgPtr->BaudRate = BaudRate;

	return XST_SUCCESS;
    4f1c:	b810ff94 	brid	-108		// 4eb0
    4f20:	faf90020 	swi	r23, r25, 32
	u32 PercentError;

	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertNonvoid(InstancePtr != NULL);
    4f24:	b0000000 	imm	0
    4f28:	30a08c90 	addik	r5, r0, -29552
    4f2c:	b0000000 	imm	0
    4f30:	b9f4006c 	brlid	r15, 108	// 4f9c <Xil_Assert>
    4f34:	30c000c2 	addik	r6, r0, 194
    4f38:	30600001 	addik	r3, r0, 1
    4f3c:	b0000000 	imm	0
    4f40:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
    4f44:	b810ff6c 	brid	-148		// 4eb0
    4f48:	10930000 	addk	r4, r19, r0

00004f4c <XAssert>:
*
******************************************************************************/
void XAssert(char *File, int Line)
{
	/* if the callback has been set then invoke it */
	if (XAssertCallbackRoutine != NULL) {
    4f4c:	b0000000 	imm	0
    4f50:	e8609370 	lwi	r3, r0, -27792	// 9370 <XAssertCallbackRoutine>
*
* @note     None.
*
******************************************************************************/
void XAssert(char *File, int Line)
{
    4f54:	3021ffe4 	addik	r1, r1, -28
	/* if the callback has been set then invoke it */
	if (XAssertCallbackRoutine != NULL) {
    4f58:	be030010 	beqid	r3, 16		// 4f68
    4f5c:	f9e10000 	swi	r15, r1, 0
		(*XAssertCallbackRoutine) (File, Line);
    4f60:	99fc1800 	brald	r15, r3
    4f64:	80000000 	or	r0, r0, r0
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (XWaitInAssert) {
    4f68:	b0000000 	imm	0
    4f6c:	e86090a0 	lwi	r3, r0, -28512	// 90a0 <XWaitInAssert>
    4f70:	be230010 	bneid	r3, 16		// 4f80
    4f74:	e9e10000 	lwi	r15, r1, 0
	}
}
    4f78:	b60f0008 	rtsd	r15, 8
    4f7c:	3021001c 	addik	r1, r1, 28
    4f80:	b8000000 	bri	0		// 4f80

00004f84 <XAssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void XAssertSetCallback(XAssertCallback Routine)
{
	XAssertCallbackRoutine = Routine;
    4f84:	b0000000 	imm	0
    4f88:	f8a09370 	swi	r5, r0, -27792	// 9370 <XAssertCallbackRoutine>
}
    4f8c:	b60f0008 	rtsd	r15, 8
    4f90:	80000000 	or	r0, r0, r0

00004f94 <XNullHandler>:
*
******************************************************************************/
void XNullHandler(void *NullParameter)
{
 (void) NullParameter;
}
    4f94:	b60f0008 	rtsd	r15, 8
    4f98:	80000000 	or	r0, r0, r0

00004f9c <Xil_Assert>:
*
******************************************************************************/
void Xil_Assert(const char *File, int Line)
{
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
    4f9c:	b0000000 	imm	0
    4fa0:	e8609374 	lwi	r3, r0, -27788	// 9374 <Xil_AssertCallbackRoutine>
*
* @note     None.
*
******************************************************************************/
void Xil_Assert(const char *File, int Line)
{
    4fa4:	3021ffe4 	addik	r1, r1, -28
	/* if the callback has been set then invoke it */
	if (Xil_AssertCallbackRoutine != 0) {
    4fa8:	be030010 	beqid	r3, 16		// 4fb8
    4fac:	f9e10000 	swi	r15, r1, 0
		(*Xil_AssertCallbackRoutine)(File, Line);
    4fb0:	99fc1800 	brald	r15, r3
    4fb4:	80000000 	or	r0, r0, r0
	}

	/* if specified, wait indefinitely such that the assert will show up
	 * in testing
	 */
	while (Xil_AssertWait) {
    4fb8:	b0000000 	imm	0
    4fbc:	e86090a4 	lwi	r3, r0, -28508	// 90a4 <Xil_AssertWait>
    4fc0:	be230010 	bneid	r3, 16		// 4fd0
    4fc4:	e9e10000 	lwi	r15, r1, 0
	}
}
    4fc8:	b60f0008 	rtsd	r15, 8
    4fcc:	3021001c 	addik	r1, r1, 28
    4fd0:	b8000000 	bri	0		// 4fd0

00004fd4 <Xil_AssertSetCallback>:
* @note     This function has no effect if NDEBUG is set
*
******************************************************************************/
void Xil_AssertSetCallback(Xil_AssertCallback Routine)
{
	Xil_AssertCallbackRoutine = Routine;
    4fd4:	b0000000 	imm	0
    4fd8:	f8a09374 	swi	r5, r0, -27788	// 9374 <Xil_AssertCallbackRoutine>
}
    4fdc:	b60f0008 	rtsd	r15, 8
    4fe0:	80000000 	or	r0, r0, r0

00004fe4 <XIOModule_SetOptions>:
*
* @note		None.
*
****************************************************************************/
int XIOModule_SetOptions(XIOModule * InstancePtr, u32 Options)
{
    4fe4:	3021ffe0 	addik	r1, r1, -32
    4fe8:	fa61001c 	swi	r19, r1, 28
    4fec:	f9e10000 	swi	r15, r1, 0

	XASSERT_NONVOID(InstancePtr != NULL);
    4ff0:	be050084 	beqid	r5, 132		// 5074
    4ff4:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    4ff8:	e8650004 	lwi	r3, r5, 4
*
****************************************************************************/
int XIOModule_SetOptions(XIOModule * InstancePtr, u32 Options)
{

	XASSERT_NONVOID(InstancePtr != NULL);
    4ffc:	b0000000 	imm	0
    5000:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    5004:	b0001111 	imm	4369
    5008:	a8631111 	xori	r3, r3, 4369
    500c:	be230028 	bneid	r3, 40		// 5034
    5010:	30a6ffff 	addik	r5, r6, -1

	/*
	 * Make sure option request is valid
	 */
	if ((Options == XIN_SVC_SGL_ISR_OPTION) ||
    5014:	30800001 	addik	r4, r0, 1
    5018:	16452003 	cmpu	r18, r5, r4
    501c:	bcb2004c 	bgei	r18, 76		// 5068
	    (Options == XIN_SVC_ALL_ISRS_OPTION)) {
		InstancePtr->CfgPtr->Options = Options;
		return XST_SUCCESS;
	}
	else {
		return XST_INVALID_PARAM;
    5020:	3060000f 	addik	r3, r0, 15
	}
}
    5024:	e9e10000 	lwi	r15, r1, 0
    5028:	ea61001c 	lwi	r19, r1, 28
    502c:	b60f0008 	rtsd	r15, 8
    5030:	30210020 	addik	r1, r1, 32
****************************************************************************/
int XIOModule_SetOptions(XIOModule * InstancePtr, u32 Options)
{

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    5034:	b0000000 	imm	0
    5038:	30a08ca4 	addik	r5, r0, -29532
    503c:	b000ffff 	imm	-1
    5040:	b9f4ff0c 	brlid	r15, -244	// 4f4c <XAssert>
    5044:	30c0007c 	addik	r6, r0, 124
		return XST_SUCCESS;
	}
	else {
		return XST_INVALID_PARAM;
	}
}
    5048:	e9e10000 	lwi	r15, r1, 0
    504c:	ea61001c 	lwi	r19, r1, 28
****************************************************************************/
int XIOModule_SetOptions(XIOModule * InstancePtr, u32 Options)
{

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    5050:	30600001 	addik	r3, r0, 1
    5054:	b0000000 	imm	0
    5058:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    505c:	10600000 	addk	r3, r0, r0
		return XST_SUCCESS;
	}
	else {
		return XST_INVALID_PARAM;
	}
}
    5060:	b60f0008 	rtsd	r15, 8
    5064:	30210020 	addik	r1, r1, 32
	/*
	 * Make sure option request is valid
	 */
	if ((Options == XIN_SVC_SGL_ISR_OPTION) ||
	    (Options == XIN_SVC_ALL_ISRS_OPTION)) {
		InstancePtr->CfgPtr->Options = Options;
    5068:	e893000c 	lwi	r4, r19, 12
		return XST_SUCCESS;
    506c:	b810ffb8 	brid	-72		// 5024
    5070:	f8c40018 	swi	r6, r4, 24
*
****************************************************************************/
int XIOModule_SetOptions(XIOModule * InstancePtr, u32 Options)
{

	XASSERT_NONVOID(InstancePtr != NULL);
    5074:	b0000000 	imm	0
    5078:	30a08ca4 	addik	r5, r0, -29532
    507c:	b000ffff 	imm	-1
    5080:	b9f4fecc 	brlid	r15, -308	// 4f4c <XAssert>
    5084:	30c0007b 	addik	r6, r0, 123
    5088:	30600001 	addik	r3, r0, 1
    508c:	b0000000 	imm	0
    5090:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    5094:	b810ff90 	brid	-112		// 5024
    5098:	10730000 	addk	r3, r19, r0

0000509c <XIOModule_GetOptions>:
*
* @note		None.
*
****************************************************************************/
u32 XIOModule_GetOptions(XIOModule * InstancePtr)
{
    509c:	3021ffe0 	addik	r1, r1, -32
    50a0:	fa61001c 	swi	r19, r1, 28
    50a4:	f9e10000 	swi	r15, r1, 0
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    50a8:	be05006c 	beqid	r5, 108		// 5114
    50ac:	12650000 	addk	r19, r5, r0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    50b0:	e8650004 	lwi	r3, r5, 4
u32 XIOModule_GetOptions(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    50b4:	b0000000 	imm	0
    50b8:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    50bc:	b0001111 	imm	4369
    50c0:	a8631111 	xori	r3, r3, 4369
    50c4:	be03003c 	beqid	r3, 60		// 5100
    50c8:	e9e10000 	lwi	r15, r1, 0
    50cc:	b0000000 	imm	0
    50d0:	30a08ca4 	addik	r5, r0, -29532
    50d4:	b000ffff 	imm	-1
    50d8:	b9f4fe74 	brlid	r15, -396	// 4f4c <XAssert>
    50dc:	30c0009f 	addik	r6, r0, 159
    50e0:	30600001 	addik	r3, r0, 1
    50e4:	b0000000 	imm	0
    50e8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    50ec:	10600000 	addk	r3, r0, r0

	return InstancePtr->CfgPtr->Options;
}
    50f0:	e9e10000 	lwi	r15, r1, 0
    50f4:	ea61001c 	lwi	r19, r1, 28
    50f8:	b60f0008 	rtsd	r15, 8
    50fc:	30210020 	addik	r1, r1, 32
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return InstancePtr->CfgPtr->Options;
    5100:	e865000c 	lwi	r3, r5, 12
}
    5104:	ea61001c 	lwi	r19, r1, 28
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);

	return InstancePtr->CfgPtr->Options;
    5108:	e8630018 	lwi	r3, r3, 24
}
    510c:	b60f0008 	rtsd	r15, 8
    5110:	30210020 	addik	r1, r1, 32
u32 XIOModule_GetOptions(XIOModule * InstancePtr)
{
	/*
	 * Assert the arguments
	 */
	XASSERT_NONVOID(InstancePtr != NULL);
    5114:	b0000000 	imm	0
    5118:	30a08ca4 	addik	r5, r0, -29532
    511c:	b000ffff 	imm	-1
    5120:	b9f4fe2c 	brlid	r15, -468	// 4f4c <XAssert>
    5124:	30c0009e 	addik	r6, r0, 158
    5128:	30600001 	addik	r3, r0, 1
    512c:	b0000000 	imm	0
    5130:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    5134:	b810ffbc 	brid	-68		// 50f0
    5138:	10730000 	addk	r3, r19, r0

0000513c <XIOModule_Timer_SetOptions>:
* @note		None.
*
******************************************************************************/
void XIOModule_Timer_SetOptions(XIOModule * InstancePtr, u8 TimerNumber,
                                u32 Options)
{
    513c:	3021ffe4 	addik	r1, r1, -28
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
    5140:	be0500c0 	beqid	r5, 192		// 5200
    5144:	f9e10000 	swi	r15, r1, 0
    5148:	b0000000 	imm	0
    514c:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_VOID(TimerNumber <= XTC_DEVICE_TIMER_COUNT);
    5150:	30600004 	addik	r3, r0, 4
    5154:	16461803 	cmpu	r18, r6, r3
    5158:	bc52007c 	blti	r18, 124		// 51d4
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    515c:	e8650004 	lwi	r3, r5, 4
    5160:	b0001111 	imm	4369
    5164:	a8631111 	xori	r3, r3, 4369
    5168:	be230040 	bneid	r3, 64		// 51a8
    516c:	a4e70002 	andi	r7, r7, 2
	/*
	 * Loop through the Options table, turning the enable on or off
	 * depending on whether the bit is set in the incoming Options flag.
	 */
	for (Index = 0; Index < XTC_NUM_OPTIONS; Index++) {
		if (Options & OptionsTable[Index].Option) {
    5170:	bc070008 	beqi	r7, 8		// 5178
    5174:	30e00002 	addik	r7, r0, 2
	}

	/*
	 * Write out the updated value to the actual register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
    5178:	e8850000 	lwi	r4, r5, 0
******************************************************************************/
void XIOModule_Timer_SetOptions(XIOModule * InstancePtr, u8 TimerNumber,
                                u32 Options)
{
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    517c:	10663000 	addk	r3, r6, r6
    5180:	10631800 	addk	r3, r3, r3
    5184:	10631800 	addk	r3, r3, r3
	}

	/*
	 * Write out the updated value to the actual register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
    5188:	30840048 	addik	r4, r4, 72
******************************************************************************/
void XIOModule_Timer_SetOptions(XIOModule * InstancePtr, u8 TimerNumber,
                                u32 Options)
{
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
    518c:	10631800 	addk	r3, r3, r3
	}

	/*
	 * Write out the updated value to the actual register
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
    5190:	d8e32000 	sw	r7, r3, r4
			   TimerOffset + XTC_TCSR_OFFSET,
			   CounterControlReg);
	InstancePtr->CurrentTCSR[TimerNumber] = CounterControlReg;
    5194:	10a53000 	addk	r5, r5, r6
    5198:	f0e50084 	sbi	r7, r5, 132
}
    519c:	e9e10000 	lwi	r15, r1, 0
    51a0:	b60f0008 	rtsd	r15, 8
    51a4:	3021001c 	addik	r1, r1, 28
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber <= XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    51a8:	b0000000 	imm	0
    51ac:	30a08ca4 	addik	r5, r0, -29532
    51b0:	b000ffff 	imm	-1
    51b4:	b9f4fd98 	brlid	r15, -616	// 4f4c <XAssert>
    51b8:	30c000c7 	addik	r6, r0, 199
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
			   TimerOffset + XTC_TCSR_OFFSET,
			   CounterControlReg);
	InstancePtr->CurrentTCSR[TimerNumber] = CounterControlReg;
}
    51bc:	e9e10000 	lwi	r15, r1, 0
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber <= XTC_DEVICE_TIMER_COUNT);
	XASSERT_VOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    51c0:	30600001 	addik	r3, r0, 1
    51c4:	b0000000 	imm	0
    51c8:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
			   TimerOffset + XTC_TCSR_OFFSET,
			   CounterControlReg);
	InstancePtr->CurrentTCSR[TimerNumber] = CounterControlReg;
}
    51cc:	b60f0008 	rtsd	r15, 8
    51d0:	3021001c 	addik	r1, r1, 28
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber <= XTC_DEVICE_TIMER_COUNT);
    51d4:	b0000000 	imm	0
    51d8:	30a08ca4 	addik	r5, r0, -29532
    51dc:	b000ffff 	imm	-1
    51e0:	b9f4fd6c 	brlid	r15, -660	// 4f4c <XAssert>
    51e4:	30c000c6 	addik	r6, r0, 198
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
			   TimerOffset + XTC_TCSR_OFFSET,
			   CounterControlReg);
	InstancePtr->CurrentTCSR[TimerNumber] = CounterControlReg;
}
    51e8:	e9e10000 	lwi	r15, r1, 0
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
	XASSERT_VOID(TimerNumber <= XTC_DEVICE_TIMER_COUNT);
    51ec:	30600001 	addik	r3, r0, 1
    51f0:	b0000000 	imm	0
    51f4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
	 */
	XIOModule_WriteReg(InstancePtr->BaseAddress, 
			   TimerOffset + XTC_TCSR_OFFSET,
			   CounterControlReg);
	InstancePtr->CurrentTCSR[TimerNumber] = CounterControlReg;
}
    51f8:	b60f0008 	rtsd	r15, 8
    51fc:	3021001c 	addik	r1, r1, 28
{
	u32 CounterControlReg = 0;
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Index;

	XASSERT_VOID(InstancePtr != NULL);
    5200:	b0000000 	imm	0
    5204:	30a08ca4 	addik	r5, r0, -29532
    5208:	b000ffff 	imm	-1
    520c:	b9f4fd40 	brlid	r15, -704	// 4f4c <XAssert>
    5210:	30c000c5 	addik	r6, r0, 197
    5214:	30600001 	addik	r3, r0, 1
    5218:	b0000000 	imm	0
    521c:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    5220:	b810ff80 	brid	-128		// 51a0
    5224:	e9e10000 	lwi	r15, r1, 0

00005228 <XIOModel_Timer_GetOptions>:
*
* @note		None.
*
******************************************************************************/
u32 XIOModel_Timer_GetOptions(XIOModule * InstancePtr, u8 TimerNumber)
{
    5228:	3021ffe0 	addik	r1, r1, -32
    522c:	fa61001c 	swi	r19, r1, 28
    5230:	f9e10000 	swi	r15, r1, 0
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Options = 0;
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
    5234:	be0500c0 	beqid	r5, 192		// 52f4
    5238:	12650000 	addk	r19, r5, r0
    523c:	b0000000 	imm	0
    5240:	f80094a8 	swi	r0, r0, -27480	// 94a8 <XAssertStatus>
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    5244:	30600003 	addik	r3, r0, 3
    5248:	16461803 	cmpu	r18, r6, r3
    524c:	bc520074 	blti	r18, 116		// 52c0
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    5250:	e8650004 	lwi	r3, r5, 4
    5254:	b0001111 	imm	4369
    5258:	a8631111 	xori	r3, r3, 4369
    525c:	be230030 	bneid	r3, 48		// 528c
    5260:	12653000 	addk	r19, r5, r6

	/*
	 * Get the current contents of the control status register to allow
	 * the current options to be determined
	 */
	CounterControlReg = InstancePtr->CurrentTCSR[TimerNumber];
    5264:	e0930084 	lbui	r4, r19, 132
	 * Loop through the Options table, turning the enable on or off
	 * depending on whether the bit is set in current register settings.
	 */
	for (Index = 0; Index < XTC_NUM_OPTIONS; Index++) {
		if (CounterControlReg & OptionsTable[Index].Mask) {
			Options |= OptionsTable[Index].Option;	/* turn on */
    5268:	30600002 	addik	r3, r0, 2
	/*
	 * Loop through the Options table, turning the enable on or off
	 * depending on whether the bit is set in current register settings.
	 */
	for (Index = 0; Index < XTC_NUM_OPTIONS; Index++) {
		if (CounterControlReg & OptionsTable[Index].Mask) {
    526c:	84841800 	and	r4, r4, r3
    5270:	be240010 	bneid	r4, 16		// 5280
    5274:	e9e10000 	lwi	r15, r1, 0
			Options |= OptionsTable[Index].Option;	/* turn on */
		}
		else {
			Options &= ~OptionsTable[Index].Option;	/* turn off */
    5278:	10640000 	addk	r3, r4, r0
		}
	}

	return Options;
}
    527c:	e9e10000 	lwi	r15, r1, 0
    5280:	ea61001c 	lwi	r19, r1, 28
    5284:	b60f0008 	rtsd	r15, 8
    5288:	30210020 	addik	r1, r1, 32
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    528c:	b0000000 	imm	0
    5290:	30a08ca4 	addik	r5, r0, -29532
    5294:	b000ffff 	imm	-1
    5298:	b9f4fcb4 	brlid	r15, -844	// 4f4c <XAssert>
    529c:	30c00105 	addik	r6, r0, 261
			Options &= ~OptionsTable[Index].Option;	/* turn off */
		}
	}

	return Options;
}
    52a0:	e9e10000 	lwi	r15, r1, 0
    52a4:	ea61001c 	lwi	r19, r1, 28
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
	XASSERT_NONVOID(InstancePtr->IsReady == XCOMPONENT_IS_READY);
    52a8:	30600001 	addik	r3, r0, 1
    52ac:	b0000000 	imm	0
    52b0:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    52b4:	10600000 	addk	r3, r0, r0
			Options &= ~OptionsTable[Index].Option;	/* turn off */
		}
	}

	return Options;
}
    52b8:	b60f0008 	rtsd	r15, 8
    52bc:	30210020 	addik	r1, r1, 32
	u32 Options = 0;
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    52c0:	b0000000 	imm	0
    52c4:	30a08ca4 	addik	r5, r0, -29532
    52c8:	b000ffff 	imm	-1
    52cc:	b9f4fc80 	brlid	r15, -896	// 4f4c <XAssert>
    52d0:	30c00104 	addik	r6, r0, 260
			Options &= ~OptionsTable[Index].Option;	/* turn off */
		}
	}

	return Options;
}
    52d4:	e9e10000 	lwi	r15, r1, 0
    52d8:	ea61001c 	lwi	r19, r1, 28
	u32 Options = 0;
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
	XASSERT_NONVOID(TimerNumber < XTC_DEVICE_TIMER_COUNT);
    52dc:	30600001 	addik	r3, r0, 1
    52e0:	b0000000 	imm	0
    52e4:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    52e8:	10600000 	addk	r3, r0, r0
			Options &= ~OptionsTable[Index].Option;	/* turn off */
		}
	}

	return Options;
}
    52ec:	b60f0008 	rtsd	r15, 8
    52f0:	30210020 	addik	r1, r1, 32
	u32 TimerOffset = TimerNumber << XTC_TIMER_COUNTER_SHIFT;
	u32 Options = 0;
	u32 CounterControlReg;
	u32 Index;

	XASSERT_NONVOID(InstancePtr != NULL);
    52f4:	b0000000 	imm	0
    52f8:	30a08ca4 	addik	r5, r0, -29532
    52fc:	b000ffff 	imm	-1
    5300:	b9f4fc4c 	brlid	r15, -948	// 4f4c <XAssert>
    5304:	30c00103 	addik	r6, r0, 259
    5308:	30600001 	addik	r3, r0, 1
    530c:	b0000000 	imm	0
    5310:	f86094a8 	swi	r3, r0, -27480	// 94a8 <XAssertStatus>
    5314:	b810ff68 	brid	-152		// 527c
    5318:	10730000 	addk	r3, r19, r0

0000531c <XIOModule_GetStats>:
*
* @note		None.
*
*****************************************************************************/
void XIOModule_GetStats(XIOModule *InstancePtr, XIOModule_Uart_Stats *StatsPtr)
{
    531c:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    5320:	be050094 	beqid	r5, 148		// 53b4
    5324:	f9e10000 	swi	r15, r1, 0
    5328:	b0000000 	imm	0
    532c:	f80094ac 	swi	r0, r0, -27476	// 94ac <Xil_AssertStatus>
	Xil_AssertVoid(StatsPtr != NULL);
    5330:	bc0600ac 	beqi	r6, 172		// 53dc
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    5334:	e8650004 	lwi	r3, r5, 4
    5338:	b0001111 	imm	4369
    533c:	a8631111 	xori	r3, r3, 4369
    5340:	bc030030 	beqi	r3, 48		// 5370
    5344:	b0000000 	imm	0
    5348:	30a08cb8 	addik	r5, r0, -29512
    534c:	b000ffff 	imm	-1
    5350:	b9f4fc4c 	brlid	r15, -948	// 4f9c <Xil_Assert>
    5354:	30c00066 	addik	r6, r0, 102
    5358:	30600001 	addik	r3, r0, 1
    535c:	b0000000 	imm	0
    5360:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
		InstancePtr->Uart_Stats.ReceiveOverrunErrors;
	StatsPtr->ReceiveFramingErrors =
		InstancePtr->Uart_Stats.ReceiveFramingErrors;
	StatsPtr->ReceiveParityErrors =
		InstancePtr->Uart_Stats.ReceiveParityErrors;
}
    5364:	e9e10000 	lwi	r15, r1, 0
    5368:	b60f0008 	rtsd	r15, 8
    536c:	3021001c 	addik	r1, r1, 28
	Xil_AssertVoid(StatsPtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	/* Copy the stats from the instance to the specified stats */

	StatsPtr->TransmitInterrupts =
    5370:	e8650010 	lwi	r3, r5, 16
    5374:	f8660000 	swi	r3, r6, 0
		InstancePtr->Uart_Stats.TransmitInterrupts;
	StatsPtr->ReceiveInterrupts =
    5378:	e8650014 	lwi	r3, r5, 20
    537c:	f8660004 	swi	r3, r6, 4
		InstancePtr->Uart_Stats.ReceiveInterrupts;
	StatsPtr->CharactersTransmitted =
    5380:	e8650018 	lwi	r3, r5, 24
    5384:	f8660008 	swi	r3, r6, 8
		InstancePtr->Uart_Stats.CharactersTransmitted;
	StatsPtr->CharactersReceived =
    5388:	e865001c 	lwi	r3, r5, 28
    538c:	f866000c 	swi	r3, r6, 12
		InstancePtr->Uart_Stats.CharactersReceived;
	StatsPtr->ReceiveOverrunErrors =
    5390:	e8650020 	lwi	r3, r5, 32
    5394:	f8660010 	swi	r3, r6, 16
		InstancePtr->Uart_Stats.ReceiveOverrunErrors;
	StatsPtr->ReceiveFramingErrors =
    5398:	e8650028 	lwi	r3, r5, 40
		InstancePtr->Uart_Stats.ReceiveFramingErrors;
	StatsPtr->ReceiveParityErrors =
    539c:	e8a50024 	lwi	r5, r5, 36
		InstancePtr->Uart_Stats.CharactersTransmitted;
	StatsPtr->CharactersReceived =
		InstancePtr->Uart_Stats.CharactersReceived;
	StatsPtr->ReceiveOverrunErrors =
		InstancePtr->Uart_Stats.ReceiveOverrunErrors;
	StatsPtr->ReceiveFramingErrors =
    53a0:	f8660018 	swi	r3, r6, 24
		InstancePtr->Uart_Stats.ReceiveFramingErrors;
	StatsPtr->ReceiveParityErrors =
    53a4:	f8a60014 	swi	r5, r6, 20
		InstancePtr->Uart_Stats.ReceiveParityErrors;
}
    53a8:	e9e10000 	lwi	r15, r1, 0
    53ac:	b60f0008 	rtsd	r15, 8
    53b0:	3021001c 	addik	r1, r1, 28
void XIOModule_GetStats(XIOModule *InstancePtr, XIOModule_Uart_Stats *StatsPtr)
{
	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    53b4:	b0000000 	imm	0
    53b8:	30a08cb8 	addik	r5, r0, -29512
    53bc:	b000ffff 	imm	-1
    53c0:	b9f4fbdc 	brlid	r15, -1060	// 4f9c <Xil_Assert>
    53c4:	30c00064 	addik	r6, r0, 100
    53c8:	30600001 	addik	r3, r0, 1
    53cc:	b0000000 	imm	0
    53d0:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
    53d4:	b810ff94 	brid	-108		// 5368
    53d8:	e9e10000 	lwi	r15, r1, 0
	Xil_AssertVoid(StatsPtr != NULL);
    53dc:	b0000000 	imm	0
    53e0:	30a08cb8 	addik	r5, r0, -29512
    53e4:	b000ffff 	imm	-1
    53e8:	b9f4fbb4 	brlid	r15, -1100	// 4f9c <Xil_Assert>
    53ec:	30c00065 	addik	r6, r0, 101
    53f0:	30600001 	addik	r3, r0, 1
    53f4:	b0000000 	imm	0
    53f8:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
    53fc:	b810ff6c 	brid	-148		// 5368
    5400:	e9e10000 	lwi	r15, r1, 0

00005404 <XIOModule_ClearStats>:
*
* @note		None.
*
*****************************************************************************/
void XIOModule_ClearStats(XIOModule *InstancePtr)
{
    5404:	3021ffe4 	addik	r1, r1, -28
	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    5408:	be050074 	beqid	r5, 116		// 547c
    540c:	f9e10000 	swi	r15, r1, 0
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    5410:	e8650004 	lwi	r3, r5, 4
void XIOModule_ClearStats(XIOModule *InstancePtr)
{
	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    5414:	b0000000 	imm	0
    5418:	f80094ac 	swi	r0, r0, -27476	// 94ac <Xil_AssertStatus>
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);
    541c:	b0001111 	imm	4369
    5420:	a8631111 	xori	r3, r3, 4369
    5424:	bc030030 	beqi	r3, 48		// 5454
    5428:	b0000000 	imm	0
    542c:	30a08cb8 	addik	r5, r0, -29512
    5430:	b000ffff 	imm	-1
    5434:	b9f4fb68 	brlid	r15, -1176	// 4f9c <Xil_Assert>
    5438:	30c0008c 	addik	r6, r0, 140
    543c:	30600001 	addik	r3, r0, 1
    5440:	b0000000 	imm	0
    5444:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
	InstancePtr->Uart_Stats.CharactersTransmitted = 0;
	InstancePtr->Uart_Stats.CharactersReceived = 0;
	InstancePtr->Uart_Stats.ReceiveOverrunErrors = 0;
	InstancePtr->Uart_Stats.ReceiveParityErrors = 0;
	InstancePtr->Uart_Stats.ReceiveFramingErrors = 0;
}
    5448:	e9e10000 	lwi	r15, r1, 0
    544c:	b60f0008 	rtsd	r15, 8
    5450:	3021001c 	addik	r1, r1, 28
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
	Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

	InstancePtr->Uart_Stats.TransmitInterrupts = 0;
    5454:	f8650010 	swi	r3, r5, 16
	InstancePtr->Uart_Stats.ReceiveInterrupts = 0;
    5458:	f8650014 	swi	r3, r5, 20
	InstancePtr->Uart_Stats.CharactersTransmitted = 0;
    545c:	f8650018 	swi	r3, r5, 24
	InstancePtr->Uart_Stats.CharactersReceived = 0;
    5460:	f865001c 	swi	r3, r5, 28
	InstancePtr->Uart_Stats.ReceiveOverrunErrors = 0;
    5464:	f8650020 	swi	r3, r5, 32
	InstancePtr->Uart_Stats.ReceiveParityErrors = 0;
    5468:	f8650024 	swi	r3, r5, 36
	InstancePtr->Uart_Stats.ReceiveFramingErrors = 0;
    546c:	f8650028 	swi	r3, r5, 40
}
    5470:	e9e10000 	lwi	r15, r1, 0
    5474:	b60f0008 	rtsd	r15, 8
    5478:	3021001c 	addik	r1, r1, 28
void XIOModule_ClearStats(XIOModule *InstancePtr)
{
	/*
	 * Assert validates the input arguments
	 */
	Xil_AssertVoid(InstancePtr != NULL);
    547c:	b0000000 	imm	0
    5480:	30a08cb8 	addik	r5, r0, -29512
    5484:	b000ffff 	imm	-1
    5488:	b9f4fb14 	brlid	r15, -1260	// 4f9c <Xil_Assert>
    548c:	30c0008b 	addik	r6, r0, 139
    5490:	30600001 	addik	r3, r0, 1
    5494:	b0000000 	imm	0
    5498:	f86094ac 	swi	r3, r0, -27476	// 94ac <Xil_AssertStatus>
    549c:	b810ffb0 	brid	-80		// 544c
    54a0:	e9e10000 	lwi	r15, r1, 0

000054a4 <_fpadd_parts>:
    54a4:	3021fff8 	addik	r1, r1, -8
    54a8:	fa610004 	swi	r19, r1, 4
    54ac:	e8850000 	lwi	r4, r5, 0
    54b0:	31000001 	addik	r8, r0, 1
    54b4:	16444003 	cmpu	r18, r4, r8
    54b8:	beb20244 	bgeid	r18, 580		// 56fc
    54bc:	10650000 	addk	r3, r5, r0
    54c0:	e8a60000 	lwi	r5, r6, 0
    54c4:	16454003 	cmpu	r18, r5, r8
    54c8:	beb202b8 	bgeid	r18, 696		// 5780
    54cc:	a9240004 	xori	r9, r4, 4
    54d0:	be0903ac 	beqid	r9, 940		// 587c
    54d4:	a9250004 	xori	r9, r5, 4
    54d8:	be0902a8 	beqid	r9, 680		// 5780
    54dc:	a8a50002 	xori	r5, r5, 2
    54e0:	be050258 	beqid	r5, 600		// 5738
    54e4:	a8a40002 	xori	r5, r4, 2
    54e8:	a8840002 	xori	r4, r4, 2
    54ec:	be040294 	beqid	r4, 660		// 5780
    54f0:	3260001f 	addik	r19, r0, 31
    54f4:	e9230008 	lwi	r9, r3, 8
    54f8:	e8860008 	lwi	r4, r6, 8
    54fc:	e983000c 	lwi	r12, r3, 12
    5500:	15644800 	rsubk	r11, r4, r9
    5504:	11405800 	addk	r10, r0, r11
    5508:	914b0001 	sra	r10, r11
    550c:	914a0001 	sra	r10, r10
    5510:	914a0001 	sra	r10, r10
    5514:	914a0001 	sra	r10, r10
    5518:	914a0001 	sra	r10, r10
    551c:	914a0001 	sra	r10, r10
    5520:	914a0001 	sra	r10, r10
    5524:	914a0001 	sra	r10, r10
    5528:	914a0001 	sra	r10, r10
    552c:	914a0001 	sra	r10, r10
    5530:	914a0001 	sra	r10, r10
    5534:	914a0001 	sra	r10, r10
    5538:	914a0001 	sra	r10, r10
    553c:	914a0001 	sra	r10, r10
    5540:	914a0001 	sra	r10, r10
    5544:	914a0001 	sra	r10, r10
    5548:	914a0001 	sra	r10, r10
    554c:	914a0001 	sra	r10, r10
    5550:	914a0001 	sra	r10, r10
    5554:	914a0001 	sra	r10, r10
    5558:	914a0001 	sra	r10, r10
    555c:	914a0001 	sra	r10, r10
    5560:	914a0001 	sra	r10, r10
    5564:	914a0001 	sra	r10, r10
    5568:	914a0001 	sra	r10, r10
    556c:	914a0001 	sra	r10, r10
    5570:	914a0001 	sra	r10, r10
    5574:	914a0001 	sra	r10, r10
    5578:	914a0001 	sra	r10, r10
    557c:	914a0001 	sra	r10, r10
    5580:	914a0001 	sra	r10, r10
    5584:	88aa5800 	xor	r5, r10, r11
    5588:	14aa2800 	rsubk	r5, r10, r5
    558c:	16459801 	cmp	r18, r5, r19
    5590:	be520178 	bltid	r18, 376		// 5708
    5594:	e946000c 	lwi	r10, r6, 12
    5598:	bc6b020c 	blei	r11, 524		// 57a4
    559c:	a645001f 	andi	r18, r5, 31
    55a0:	10804000 	addk	r4, r0, r8
    55a4:	be120014 	beqid	r18, 20		// 55b8
    55a8:	10840000 	addk	r4, r4, r0
    55ac:	3252ffff 	addik	r18, r18, -1
    55b0:	be32fffc 	bneid	r18, -4		// 55ac
    55b4:	10842000 	addk	r4, r4, r4
    55b8:	3084ffff 	addik	r4, r4, -1
    55bc:	84845000 	and	r4, r4, r10
    55c0:	15040000 	rsubk	r8, r4, r0
    55c4:	80882000 	or	r4, r8, r4
    55c8:	a645001f 	andi	r18, r5, 31
    55cc:	11005000 	addk	r8, r0, r10
    55d0:	be120014 	beqid	r18, 20		// 55e4
    55d4:	11080000 	addk	r8, r8, r0
    55d8:	3252ffff 	addik	r18, r18, -1
    55dc:	be32fffc 	bneid	r18, -4		// 55d8
    55e0:	91080041 	srl	r8, r8
    55e4:	11402000 	addk	r10, r0, r4
    55e8:	91440041 	srl	r10, r4
    55ec:	914a0041 	srl	r10, r10
    55f0:	914a0041 	srl	r10, r10
    55f4:	914a0041 	srl	r10, r10
    55f8:	914a0041 	srl	r10, r10
    55fc:	914a0041 	srl	r10, r10
    5600:	914a0041 	srl	r10, r10
    5604:	914a0041 	srl	r10, r10
    5608:	914a0041 	srl	r10, r10
    560c:	914a0041 	srl	r10, r10
    5610:	914a0041 	srl	r10, r10
    5614:	914a0041 	srl	r10, r10
    5618:	914a0041 	srl	r10, r10
    561c:	914a0041 	srl	r10, r10
    5620:	914a0041 	srl	r10, r10
    5624:	914a0041 	srl	r10, r10
    5628:	914a0041 	srl	r10, r10
    562c:	914a0041 	srl	r10, r10
    5630:	914a0041 	srl	r10, r10
    5634:	914a0041 	srl	r10, r10
    5638:	914a0041 	srl	r10, r10
    563c:	914a0041 	srl	r10, r10
    5640:	914a0041 	srl	r10, r10
    5644:	914a0041 	srl	r10, r10
    5648:	914a0041 	srl	r10, r10
    564c:	914a0041 	srl	r10, r10
    5650:	914a0041 	srl	r10, r10
    5654:	914a0041 	srl	r10, r10
    5658:	914a0041 	srl	r10, r10
    565c:	914a0041 	srl	r10, r10
    5660:	914a0041 	srl	r10, r10
    5664:	814a4000 	or	r10, r10, r8
    5668:	e8630004 	lwi	r3, r3, 4
    566c:	e8860004 	lwi	r4, r6, 4
    5670:	88832000 	xor	r4, r3, r4
    5674:	be0400b4 	beqid	r4, 180		// 5728
    5678:	108a6000 	addk	r4, r10, r12
    567c:	be03000c 	beqid	r3, 12		// 5688
    5680:	148a6000 	rsubk	r4, r10, r12
    5684:	148c5000 	rsubk	r4, r12, r10
    5688:	be440108 	bltid	r4, 264		// 5790
    568c:	30600001 	addik	r3, r0, 1
    5690:	f8070004 	swi	r0, r7, 4
    5694:	f9270008 	swi	r9, r7, 8
    5698:	f887000c 	swi	r4, r7, 12
    569c:	b0003fff 	imm	16383
    56a0:	30c0fffe 	addik	r6, r0, -2
    56a4:	3064ffff 	addik	r3, r4, -1
    56a8:	16433003 	cmpu	r18, r3, r6
    56ac:	bc520024 	blti	r18, 36		// 56d0
    56b0:	e8670008 	lwi	r3, r7, 8
    56b4:	10842000 	addk	r4, r4, r4
    56b8:	30a4ffff 	addik	r5, r4, -1
    56bc:	16453003 	cmpu	r18, r5, r6
    56c0:	beb2fff4 	bgeid	r18, -12		// 56b4
    56c4:	3063ffff 	addik	r3, r3, -1
    56c8:	f887000c 	swi	r4, r7, 12
    56cc:	f8670008 	swi	r3, r7, 8
    56d0:	30600003 	addik	r3, r0, 3
    56d4:	f8670000 	swi	r3, r7, 0
    56d8:	bea40024 	bgeid	r4, 36		// 56fc
    56dc:	10670000 	addk	r3, r7, r0
    56e0:	e8a70008 	lwi	r5, r7, 8
    56e4:	a4c40001 	andi	r6, r4, 1
    56e8:	90840041 	srl	r4, r4
    56ec:	80862000 	or	r4, r6, r4
    56f0:	30a50001 	addik	r5, r5, 1
    56f4:	f887000c 	swi	r4, r7, 12
    56f8:	f8a70008 	swi	r5, r7, 8
    56fc:	ea610004 	lwi	r19, r1, 4
    5700:	b60f0008 	rtsd	r15, 8
    5704:	30210008 	addik	r1, r1, 8
    5708:	16492001 	cmp	r18, r9, r4
    570c:	bcb20068 	bgei	r18, 104		// 5774
    5710:	e8630004 	lwi	r3, r3, 4
    5714:	e8860004 	lwi	r4, r6, 4
    5718:	88832000 	xor	r4, r3, r4
    571c:	be24ff60 	bneid	r4, -160		// 567c
    5720:	11400000 	addk	r10, r0, r0
    5724:	108a6000 	addk	r4, r10, r12
    5728:	f8670004 	swi	r3, r7, 4
    572c:	f9270008 	swi	r9, r7, 8
    5730:	b810ffa0 	brid	-96		// 56d0
    5734:	f887000c 	swi	r4, r7, 12
    5738:	be25ffc8 	bneid	r5, -56		// 5700
    573c:	ea610004 	lwi	r19, r1, 4
    5740:	e9230004 	lwi	r9, r3, 4
    5744:	e9030008 	lwi	r8, r3, 8
    5748:	e8a3000c 	lwi	r5, r3, 12
    574c:	f9270004 	swi	r9, r7, 4
    5750:	f8870000 	swi	r4, r7, 0
    5754:	e8630004 	lwi	r3, r3, 4
    5758:	e8860004 	lwi	r4, r6, 4
    575c:	f9070008 	swi	r8, r7, 8
    5760:	f8a7000c 	swi	r5, r7, 12
    5764:	84641800 	and	r3, r4, r3
    5768:	f8670004 	swi	r3, r7, 4
    576c:	b810ff90 	brid	-112		// 56fc
    5770:	10670000 	addk	r3, r7, r0
    5774:	11240000 	addk	r9, r4, r0
    5778:	b810fef0 	brid	-272		// 5668
    577c:	11800000 	addk	r12, r0, r0
    5780:	10660000 	addk	r3, r6, r0
    5784:	ea610004 	lwi	r19, r1, 4
    5788:	b60f0008 	rtsd	r15, 8
    578c:	30210008 	addik	r1, r1, 8
    5790:	14840000 	rsubk	r4, r4, r0
    5794:	f8670004 	swi	r3, r7, 4
    5798:	f9270008 	swi	r9, r7, 8
    579c:	b810ff00 	brid	-256		// 569c
    57a0:	f887000c 	swi	r4, r7, 12
    57a4:	bc0bfec4 	beqi	r11, -316		// 5668
    57a8:	a645001f 	andi	r18, r5, 31
    57ac:	10804000 	addk	r4, r0, r8
    57b0:	be120014 	beqid	r18, 20		// 57c4
    57b4:	10840000 	addk	r4, r4, r0
    57b8:	3252ffff 	addik	r18, r18, -1
    57bc:	be32fffc 	bneid	r18, -4		// 57b8
    57c0:	10842000 	addk	r4, r4, r4
    57c4:	3084ffff 	addik	r4, r4, -1
    57c8:	84846000 	and	r4, r4, r12
    57cc:	15040000 	rsubk	r8, r4, r0
    57d0:	80882000 	or	r4, r8, r4
    57d4:	11292800 	addk	r9, r9, r5
    57d8:	a645001f 	andi	r18, r5, 31
    57dc:	11006000 	addk	r8, r0, r12
    57e0:	be120014 	beqid	r18, 20		// 57f4
    57e4:	11080000 	addk	r8, r8, r0
    57e8:	3252ffff 	addik	r18, r18, -1
    57ec:	be32fffc 	bneid	r18, -4		// 57e8
    57f0:	91080041 	srl	r8, r8
    57f4:	11802000 	addk	r12, r0, r4
    57f8:	91840041 	srl	r12, r4
    57fc:	918c0041 	srl	r12, r12
    5800:	918c0041 	srl	r12, r12
    5804:	918c0041 	srl	r12, r12
    5808:	918c0041 	srl	r12, r12
    580c:	918c0041 	srl	r12, r12
    5810:	918c0041 	srl	r12, r12
    5814:	918c0041 	srl	r12, r12
    5818:	918c0041 	srl	r12, r12
    581c:	918c0041 	srl	r12, r12
    5820:	918c0041 	srl	r12, r12
    5824:	918c0041 	srl	r12, r12
    5828:	918c0041 	srl	r12, r12
    582c:	918c0041 	srl	r12, r12
    5830:	918c0041 	srl	r12, r12
    5834:	918c0041 	srl	r12, r12
    5838:	918c0041 	srl	r12, r12
    583c:	918c0041 	srl	r12, r12
    5840:	918c0041 	srl	r12, r12
    5844:	918c0041 	srl	r12, r12
    5848:	918c0041 	srl	r12, r12
    584c:	918c0041 	srl	r12, r12
    5850:	918c0041 	srl	r12, r12
    5854:	918c0041 	srl	r12, r12
    5858:	918c0041 	srl	r12, r12
    585c:	918c0041 	srl	r12, r12
    5860:	918c0041 	srl	r12, r12
    5864:	918c0041 	srl	r12, r12
    5868:	918c0041 	srl	r12, r12
    586c:	918c0041 	srl	r12, r12
    5870:	918c0041 	srl	r12, r12
    5874:	b810fdf4 	brid	-524		// 5668
    5878:	818c4000 	or	r12, r12, r8
    587c:	a8a50004 	xori	r5, r5, 4
    5880:	be25fe80 	bneid	r5, -384		// 5700
    5884:	ea610004 	lwi	r19, r1, 4
    5888:	e8a30004 	lwi	r5, r3, 4
    588c:	e8860004 	lwi	r4, r6, 4
    5890:	88852000 	xor	r4, r5, r4
    5894:	bc04fe6c 	beqi	r4, -404		// 5700
    5898:	b0000000 	imm	0
    589c:	30608ccc 	addik	r3, r0, -29492	// 8ccc <__thenan_sf>
    58a0:	b800fe60 	bri	-416		// 5700

000058a4 <__addsf3>:
    58a4:	3021ffac 	addik	r1, r1, -84
    58a8:	f8c1001c 	swi	r6, r1, 28
    58ac:	f8a10020 	swi	r5, r1, 32
    58b0:	30c10044 	addik	r6, r1, 68
    58b4:	f9e10000 	swi	r15, r1, 0
    58b8:	b0000000 	imm	0
    58bc:	b9f41ed0 	brlid	r15, 7888	// 778c <__unpack_f>
    58c0:	30a10020 	addik	r5, r1, 32
    58c4:	30c10034 	addik	r6, r1, 52
    58c8:	b0000000 	imm	0
    58cc:	b9f41ec0 	brlid	r15, 7872	// 778c <__unpack_f>
    58d0:	30a1001c 	addik	r5, r1, 28
    58d4:	30a10044 	addik	r5, r1, 68
    58d8:	30c10034 	addik	r6, r1, 52
    58dc:	b9f4fbc8 	brlid	r15, -1080	// 54a4 <_fpadd_parts>
    58e0:	30e10024 	addik	r7, r1, 36
    58e4:	b0000000 	imm	0
    58e8:	b9f41bf0 	brlid	r15, 7152	// 74d8 <__pack_f>
    58ec:	10a30000 	addk	r5, r3, r0
    58f0:	e9e10000 	lwi	r15, r1, 0
    58f4:	b60f0008 	rtsd	r15, 8
    58f8:	30210054 	addik	r1, r1, 84

000058fc <__subsf3>:
    58fc:	3021ffac 	addik	r1, r1, -84
    5900:	f8c1001c 	swi	r6, r1, 28
    5904:	f8a10020 	swi	r5, r1, 32
    5908:	30c10044 	addik	r6, r1, 68
    590c:	f9e10000 	swi	r15, r1, 0
    5910:	b0000000 	imm	0
    5914:	b9f41e78 	brlid	r15, 7800	// 778c <__unpack_f>
    5918:	30a10020 	addik	r5, r1, 32
    591c:	30c10034 	addik	r6, r1, 52
    5920:	b0000000 	imm	0
    5924:	b9f41e68 	brlid	r15, 7784	// 778c <__unpack_f>
    5928:	30a1001c 	addik	r5, r1, 28
    592c:	e8610038 	lwi	r3, r1, 56
    5930:	30a10044 	addik	r5, r1, 68
    5934:	30c10034 	addik	r6, r1, 52
    5938:	30e10024 	addik	r7, r1, 36
    593c:	a8630001 	xori	r3, r3, 1
    5940:	b9f4fb64 	brlid	r15, -1180	// 54a4 <_fpadd_parts>
    5944:	f8610038 	swi	r3, r1, 56
    5948:	b0000000 	imm	0
    594c:	b9f41b8c 	brlid	r15, 7052	// 74d8 <__pack_f>
    5950:	10a30000 	addk	r5, r3, r0
    5954:	e9e10000 	lwi	r15, r1, 0
    5958:	b60f0008 	rtsd	r15, 8
    595c:	30210054 	addik	r1, r1, 84

00005960 <__mulsf3>:
    5960:	3021ffac 	addik	r1, r1, -84
    5964:	f8c1001c 	swi	r6, r1, 28
    5968:	f8a10020 	swi	r5, r1, 32
    596c:	30c10044 	addik	r6, r1, 68
    5970:	f9e10000 	swi	r15, r1, 0
    5974:	b0000000 	imm	0
    5978:	b9f41e14 	brlid	r15, 7700	// 778c <__unpack_f>
    597c:	30a10020 	addik	r5, r1, 32
    5980:	30a1001c 	addik	r5, r1, 28
    5984:	b0000000 	imm	0
    5988:	b9f41e04 	brlid	r15, 7684	// 778c <__unpack_f>
    598c:	30c10034 	addik	r6, r1, 52
    5990:	e8610044 	lwi	r3, r1, 68
    5994:	30a00001 	addik	r5, r0, 1
    5998:	16432803 	cmpu	r18, r3, r5
    599c:	beb201cc 	bgeid	r18, 460		// 5b68
    59a0:	e8810034 	lwi	r4, r1, 52
    59a4:	16442803 	cmpu	r18, r4, r5
    59a8:	beb2027c 	bgeid	r18, 636		// 5c24
    59ac:	a8a30004 	xori	r5, r3, 4
    59b0:	be0501a8 	beqid	r5, 424		// 5b58
    59b4:	a8a40004 	xori	r5, r4, 4
    59b8:	be050260 	beqid	r5, 608		// 5c18
    59bc:	a8630002 	xori	r3, r3, 2
    59c0:	be0301a8 	beqid	r3, 424		// 5b68
    59c4:	a8840002 	xori	r4, r4, 2
    59c8:	be04025c 	beqid	r4, 604		// 5c24
    59cc:	10c00000 	addk	r6, r0, r0
    59d0:	11060000 	addk	r8, r6, r0
    59d4:	e8a10040 	lwi	r5, r1, 64
    59d8:	b0000000 	imm	0
    59dc:	b9f417fc 	brlid	r15, 6140	// 71d8 <__muldi3>
    59e0:	e8e10050 	lwi	r7, r1, 80
    59e4:	e8c10048 	lwi	r6, r1, 72
    59e8:	e8a10038 	lwi	r5, r1, 56
    59ec:	e901004c 	lwi	r8, r1, 76
    59f0:	88a62800 	xor	r5, r6, r5
    59f4:	e8c1003c 	lwi	r6, r1, 60
    59f8:	14e50000 	rsubk	r7, r5, r0
    59fc:	80a72800 	or	r5, r7, r5
    5a00:	10c83000 	addk	r6, r8, r6
    5a04:	31060002 	addik	r8, r6, 2
    5a08:	10e02800 	addk	r7, r0, r5
    5a0c:	90e50041 	srl	r7, r5
    5a10:	90e70041 	srl	r7, r7
    5a14:	90e70041 	srl	r7, r7
    5a18:	90e70041 	srl	r7, r7
    5a1c:	90e70041 	srl	r7, r7
    5a20:	90e70041 	srl	r7, r7
    5a24:	90e70041 	srl	r7, r7
    5a28:	90e70041 	srl	r7, r7
    5a2c:	90e70041 	srl	r7, r7
    5a30:	90e70041 	srl	r7, r7
    5a34:	90e70041 	srl	r7, r7
    5a38:	90e70041 	srl	r7, r7
    5a3c:	90e70041 	srl	r7, r7
    5a40:	90e70041 	srl	r7, r7
    5a44:	90e70041 	srl	r7, r7
    5a48:	90e70041 	srl	r7, r7
    5a4c:	90e70041 	srl	r7, r7
    5a50:	90e70041 	srl	r7, r7
    5a54:	90e70041 	srl	r7, r7
    5a58:	90e70041 	srl	r7, r7
    5a5c:	90e70041 	srl	r7, r7
    5a60:	90e70041 	srl	r7, r7
    5a64:	90e70041 	srl	r7, r7
    5a68:	90e70041 	srl	r7, r7
    5a6c:	90e70041 	srl	r7, r7
    5a70:	90e70041 	srl	r7, r7
    5a74:	90e70041 	srl	r7, r7
    5a78:	90e70041 	srl	r7, r7
    5a7c:	90e70041 	srl	r7, r7
    5a80:	90e70041 	srl	r7, r7
    5a84:	90e70041 	srl	r7, r7
    5a88:	f901002c 	swi	r8, r1, 44
    5a8c:	f8e10028 	swi	r7, r1, 40
    5a90:	bea4001c 	bgeid	r4, 28		// 5aac
    5a94:	10a40000 	addk	r5, r4, r0
    5a98:	a4a40001 	andi	r5, r4, 1
    5a9c:	be250090 	bneid	r5, 144		// 5b2c
    5aa0:	30c60003 	addik	r6, r6, 3
    5aa4:	90a40041 	srl	r5, r4
    5aa8:	f8c1002c 	swi	r6, r1, 44
    5aac:	b0003fff 	imm	16383
    5ab0:	30c0ffff 	addik	r6, r0, -1
    5ab4:	16453003 	cmpu	r18, r5, r6
    5ab8:	be52003c 	bltid	r18, 60		// 5af4
    5abc:	e881002c 	lwi	r4, r1, 44
    5ac0:	b8100018 	brid	24		// 5ad8
    5ac4:	10a52800 	addk	r5, r5, r5
    5ac8:	16453003 	cmpu	r18, r5, r6
    5acc:	be520024 	bltid	r18, 36		// 5af0
    5ad0:	10631800 	addk	r3, r3, r3
    5ad4:	10a52800 	addk	r5, r5, r5
    5ad8:	bea3fff0 	bgeid	r3, -16		// 5ac8
    5adc:	3084ffff 	addik	r4, r4, -1
    5ae0:	a0a50001 	ori	r5, r5, 1
    5ae4:	16453003 	cmpu	r18, r5, r6
    5ae8:	beb2ffec 	bgeid	r18, -20		// 5ad4
    5aec:	10631800 	addk	r3, r3, r3
    5af0:	f881002c 	swi	r4, r1, 44
    5af4:	a485007f 	andi	r4, r5, 127
    5af8:	a8840040 	xori	r4, r4, 64
    5afc:	be040044 	beqid	r4, 68		// 5b40
    5b00:	a4850080 	andi	r4, r5, 128
    5b04:	30600003 	addik	r3, r0, 3
    5b08:	f8a10030 	swi	r5, r1, 48
    5b0c:	f8610024 	swi	r3, r1, 36
    5b10:	30a10024 	addik	r5, r1, 36
    5b14:	b0000000 	imm	0
    5b18:	b9f419c0 	brlid	r15, 6592	// 74d8 <__pack_f>
    5b1c:	80000000 	or	r0, r0, r0
    5b20:	e9e10000 	lwi	r15, r1, 0
    5b24:	b60f0008 	rtsd	r15, 8
    5b28:	30210054 	addik	r1, r1, 84
    5b2c:	90630041 	srl	r3, r3
    5b30:	b0008000 	imm	-32768
    5b34:	a0630000 	ori	r3, r3, 0
    5b38:	b810ff70 	brid	-144		// 5aa8
    5b3c:	90a40041 	srl	r5, r4
    5b40:	bc24ffc4 	bnei	r4, -60		// 5b04
    5b44:	be03ffc4 	beqid	r3, -60		// 5b08
    5b48:	30600003 	addik	r3, r0, 3
    5b4c:	30a50040 	addik	r5, r5, 64
    5b50:	b810ffb8 	brid	-72		// 5b08
    5b54:	a4a5ff80 	andi	r5, r5, -128
    5b58:	a8840002 	xori	r4, r4, 2
    5b5c:	b0000000 	imm	0
    5b60:	30a08ccc 	addik	r5, r0, -29492	// 8ccc <__thenan_sf>
    5b64:	bc04ffb0 	beqi	r4, -80		// 5b14
    5b68:	e8810048 	lwi	r4, r1, 72
    5b6c:	e8610038 	lwi	r3, r1, 56
    5b70:	30a10044 	addik	r5, r1, 68
    5b74:	88641800 	xor	r3, r4, r3
    5b78:	14830000 	rsubk	r4, r3, r0
    5b7c:	80641800 	or	r3, r4, r3
    5b80:	10801800 	addk	r4, r0, r3
    5b84:	90830041 	srl	r4, r3
    5b88:	90840041 	srl	r4, r4
    5b8c:	90840041 	srl	r4, r4
    5b90:	90840041 	srl	r4, r4
    5b94:	90840041 	srl	r4, r4
    5b98:	90840041 	srl	r4, r4
    5b9c:	90840041 	srl	r4, r4
    5ba0:	90840041 	srl	r4, r4
    5ba4:	90840041 	srl	r4, r4
    5ba8:	90840041 	srl	r4, r4
    5bac:	90840041 	srl	r4, r4
    5bb0:	90840041 	srl	r4, r4
    5bb4:	90840041 	srl	r4, r4
    5bb8:	90840041 	srl	r4, r4
    5bbc:	90840041 	srl	r4, r4
    5bc0:	90840041 	srl	r4, r4
    5bc4:	90840041 	srl	r4, r4
    5bc8:	90840041 	srl	r4, r4
    5bcc:	90840041 	srl	r4, r4
    5bd0:	90840041 	srl	r4, r4
    5bd4:	90840041 	srl	r4, r4
    5bd8:	90840041 	srl	r4, r4
    5bdc:	90840041 	srl	r4, r4
    5be0:	90840041 	srl	r4, r4
    5be4:	90840041 	srl	r4, r4
    5be8:	90840041 	srl	r4, r4
    5bec:	90840041 	srl	r4, r4
    5bf0:	90840041 	srl	r4, r4
    5bf4:	90840041 	srl	r4, r4
    5bf8:	90840041 	srl	r4, r4
    5bfc:	90840041 	srl	r4, r4
    5c00:	b0000000 	imm	0
    5c04:	b9f418d4 	brlid	r15, 6356	// 74d8 <__pack_f>
    5c08:	f8810048 	swi	r4, r1, 72
    5c0c:	e9e10000 	lwi	r15, r1, 0
    5c10:	b60f0008 	rtsd	r15, 8
    5c14:	30210054 	addik	r1, r1, 84
    5c18:	b0000000 	imm	0
    5c1c:	30a08ccc 	addik	r5, r0, -29492	// 8ccc <__thenan_sf>
    5c20:	bc03fef4 	beqi	r3, -268		// 5b14
    5c24:	e8610038 	lwi	r3, r1, 56
    5c28:	e8810048 	lwi	r4, r1, 72
    5c2c:	30a10034 	addik	r5, r1, 52
    5c30:	88641800 	xor	r3, r4, r3
    5c34:	14830000 	rsubk	r4, r3, r0
    5c38:	80641800 	or	r3, r4, r3
    5c3c:	10801800 	addk	r4, r0, r3
    5c40:	90830041 	srl	r4, r3
    5c44:	90840041 	srl	r4, r4
    5c48:	90840041 	srl	r4, r4
    5c4c:	90840041 	srl	r4, r4
    5c50:	90840041 	srl	r4, r4
    5c54:	90840041 	srl	r4, r4
    5c58:	90840041 	srl	r4, r4
    5c5c:	90840041 	srl	r4, r4
    5c60:	90840041 	srl	r4, r4
    5c64:	90840041 	srl	r4, r4
    5c68:	90840041 	srl	r4, r4
    5c6c:	90840041 	srl	r4, r4
    5c70:	90840041 	srl	r4, r4
    5c74:	90840041 	srl	r4, r4
    5c78:	90840041 	srl	r4, r4
    5c7c:	90840041 	srl	r4, r4
    5c80:	90840041 	srl	r4, r4
    5c84:	90840041 	srl	r4, r4
    5c88:	90840041 	srl	r4, r4
    5c8c:	90840041 	srl	r4, r4
    5c90:	90840041 	srl	r4, r4
    5c94:	90840041 	srl	r4, r4
    5c98:	90840041 	srl	r4, r4
    5c9c:	90840041 	srl	r4, r4
    5ca0:	90840041 	srl	r4, r4
    5ca4:	90840041 	srl	r4, r4
    5ca8:	90840041 	srl	r4, r4
    5cac:	90840041 	srl	r4, r4
    5cb0:	90840041 	srl	r4, r4
    5cb4:	90840041 	srl	r4, r4
    5cb8:	90840041 	srl	r4, r4
    5cbc:	b0000000 	imm	0
    5cc0:	b9f41818 	brlid	r15, 6168	// 74d8 <__pack_f>
    5cc4:	f8810038 	swi	r4, r1, 56
    5cc8:	e9e10000 	lwi	r15, r1, 0
    5ccc:	b60f0008 	rtsd	r15, 8
    5cd0:	30210054 	addik	r1, r1, 84

00005cd4 <__floatsisf>:
    5cd4:	3021ffd0 	addik	r1, r1, -48
    5cd8:	30600003 	addik	r3, r0, 3
    5cdc:	f861001c 	swi	r3, r1, 28
    5ce0:	f9e10000 	swi	r15, r1, 0
    5ce4:	10602800 	addk	r3, r0, r5
    5ce8:	90650041 	srl	r3, r5
    5cec:	90630041 	srl	r3, r3
    5cf0:	90630041 	srl	r3, r3
    5cf4:	90630041 	srl	r3, r3
    5cf8:	90630041 	srl	r3, r3
    5cfc:	90630041 	srl	r3, r3
    5d00:	90630041 	srl	r3, r3
    5d04:	90630041 	srl	r3, r3
    5d08:	90630041 	srl	r3, r3
    5d0c:	90630041 	srl	r3, r3
    5d10:	90630041 	srl	r3, r3
    5d14:	90630041 	srl	r3, r3
    5d18:	90630041 	srl	r3, r3
    5d1c:	90630041 	srl	r3, r3
    5d20:	90630041 	srl	r3, r3
    5d24:	90630041 	srl	r3, r3
    5d28:	90630041 	srl	r3, r3
    5d2c:	90630041 	srl	r3, r3
    5d30:	90630041 	srl	r3, r3
    5d34:	90630041 	srl	r3, r3
    5d38:	90630041 	srl	r3, r3
    5d3c:	90630041 	srl	r3, r3
    5d40:	90630041 	srl	r3, r3
    5d44:	90630041 	srl	r3, r3
    5d48:	90630041 	srl	r3, r3
    5d4c:	90630041 	srl	r3, r3
    5d50:	90630041 	srl	r3, r3
    5d54:	90630041 	srl	r3, r3
    5d58:	90630041 	srl	r3, r3
    5d5c:	90630041 	srl	r3, r3
    5d60:	90630041 	srl	r3, r3
    5d64:	fa61002c 	swi	r19, r1, 44
    5d68:	be25002c 	bneid	r5, 44		// 5d94
    5d6c:	f8610020 	swi	r3, r1, 32
    5d70:	30800002 	addik	r4, r0, 2
    5d74:	f881001c 	swi	r4, r1, 28
    5d78:	b0000000 	imm	0
    5d7c:	b9f4175c 	brlid	r15, 5980	// 74d8 <__pack_f>
    5d80:	30a1001c 	addik	r5, r1, 28
    5d84:	e9e10000 	lwi	r15, r1, 0
    5d88:	ea61002c 	lwi	r19, r1, 44
    5d8c:	b60f0008 	rtsd	r15, 8
    5d90:	30210030 	addik	r1, r1, 48
    5d94:	3080001e 	addik	r4, r0, 30
    5d98:	f8810024 	swi	r4, r1, 36
    5d9c:	be030020 	beqid	r3, 32		// 5dbc
    5da0:	12650000 	addk	r19, r5, r0
    5da4:	b0008000 	imm	-32768
    5da8:	30850000 	addik	r4, r5, 0
    5dac:	b000cf00 	imm	-12544
    5db0:	30600000 	addik	r3, r0, 0
    5db4:	be04ffd0 	beqid	r4, -48		// 5d84
    5db8:	16650000 	rsubk	r19, r5, r0
    5dbc:	10b30000 	addk	r5, r19, r0
    5dc0:	b0000000 	imm	0
    5dc4:	b9f41690 	brlid	r15, 5776	// 7454 <__clzsi2>
    5dc8:	fa610028 	swi	r19, r1, 40
    5dcc:	3083ffff 	addik	r4, r3, -1
    5dd0:	be64ffa8 	bleid	r4, -88		// 5d78
    5dd4:	30a0001f 	addik	r5, r0, 31
    5dd8:	14632800 	rsubk	r3, r3, r5
    5ddc:	f8610024 	swi	r3, r1, 36
    5de0:	a644001f 	andi	r18, r4, 31
    5de4:	10a09800 	addk	r5, r0, r19
    5de8:	be120014 	beqid	r18, 20		// 5dfc
    5dec:	10a50000 	addk	r5, r5, r0
    5df0:	3252ffff 	addik	r18, r18, -1
    5df4:	be32fffc 	bneid	r18, -4		// 5df0
    5df8:	10a52800 	addk	r5, r5, r5
    5dfc:	b810ff7c 	brid	-132		// 5d78
    5e00:	f8a10028 	swi	r5, r1, 40

00005e04 <_fpadd_parts>:
    5e04:	3021ffd8 	addik	r1, r1, -40
    5e08:	fa610004 	swi	r19, r1, 4
    5e0c:	fac10008 	swi	r22, r1, 8
    5e10:	fae1000c 	swi	r23, r1, 12
    5e14:	fb010010 	swi	r24, r1, 16
    5e18:	fb210014 	swi	r25, r1, 20
    5e1c:	fb410018 	swi	r26, r1, 24
    5e20:	fb61001c 	swi	r27, r1, 28
    5e24:	fb810020 	swi	r28, r1, 32
    5e28:	fba10024 	swi	r29, r1, 36
    5e2c:	e8850000 	lwi	r4, r5, 0
    5e30:	31200001 	addik	r9, r0, 1
    5e34:	10650000 	addk	r3, r5, r0
    5e38:	16444803 	cmpu	r18, r4, r9
    5e3c:	beb20230 	bgeid	r18, 560		// 606c
    5e40:	12670000 	addk	r19, r7, r0
    5e44:	e9060000 	lwi	r8, r6, 0
    5e48:	16484803 	cmpu	r18, r8, r9
    5e4c:	bcb2050c 	bgei	r18, 1292		// 6358
    5e50:	a8a40004 	xori	r5, r4, 4
    5e54:	be0506b4 	beqid	r5, 1716		// 6508
    5e58:	a8a80004 	xori	r5, r8, 4
    5e5c:	bc0504fc 	beqi	r5, 1276		// 6358
    5e60:	a9080002 	xori	r8, r8, 2
    5e64:	be0803e4 	beqid	r8, 996		// 6248
    5e68:	a8a40002 	xori	r5, r4, 2
    5e6c:	a8840002 	xori	r4, r4, 2
    5e70:	bc0404e8 	beqi	r4, 1256		// 6358
    5e74:	e9830008 	lwi	r12, r3, 8
    5e78:	e8a60008 	lwi	r5, r6, 8
    5e7c:	eb43000c 	lwi	r26, r3, 12
    5e80:	eb630010 	lwi	r27, r3, 16
    5e84:	e946000c 	lwi	r10, r6, 12
    5e88:	e9660010 	lwi	r11, r6, 16
    5e8c:	15056000 	rsubk	r8, r5, r12
    5e90:	10e04000 	addk	r7, r0, r8
    5e94:	90e80001 	sra	r7, r8
    5e98:	90e70001 	sra	r7, r7
    5e9c:	90e70001 	sra	r7, r7
    5ea0:	90e70001 	sra	r7, r7
    5ea4:	90e70001 	sra	r7, r7
    5ea8:	90e70001 	sra	r7, r7
    5eac:	90e70001 	sra	r7, r7
    5eb0:	90e70001 	sra	r7, r7
    5eb4:	90e70001 	sra	r7, r7
    5eb8:	90e70001 	sra	r7, r7
    5ebc:	90e70001 	sra	r7, r7
    5ec0:	90e70001 	sra	r7, r7
    5ec4:	90e70001 	sra	r7, r7
    5ec8:	90e70001 	sra	r7, r7
    5ecc:	90e70001 	sra	r7, r7
    5ed0:	90e70001 	sra	r7, r7
    5ed4:	90e70001 	sra	r7, r7
    5ed8:	90e70001 	sra	r7, r7
    5edc:	90e70001 	sra	r7, r7
    5ee0:	90e70001 	sra	r7, r7
    5ee4:	90e70001 	sra	r7, r7
    5ee8:	90e70001 	sra	r7, r7
    5eec:	90e70001 	sra	r7, r7
    5ef0:	90e70001 	sra	r7, r7
    5ef4:	90e70001 	sra	r7, r7
    5ef8:	90e70001 	sra	r7, r7
    5efc:	90e70001 	sra	r7, r7
    5f00:	90e70001 	sra	r7, r7
    5f04:	90e70001 	sra	r7, r7
    5f08:	90e70001 	sra	r7, r7
    5f0c:	90e70001 	sra	r7, r7
    5f10:	89274000 	xor	r9, r7, r8
    5f14:	15274800 	rsubk	r9, r7, r9
    5f18:	30e0003f 	addik	r7, r0, 63
    5f1c:	16493801 	cmp	r18, r9, r7
    5f20:	bc520178 	blti	r18, 376		// 6098
    5f24:	be68043c 	bleid	r8, 1084		// 6360
    5f28:	a4a90020 	andi	r5, r9, 32
    5f2c:	be05036c 	beqid	r5, 876		// 6298
    5f30:	a889ffff 	xori	r4, r9, -1
    5f34:	13200000 	addk	r25, r0, r0
    5f38:	13990000 	addk	r28, r25, r0
    5f3c:	30800001 	addik	r4, r0, 1
    5f40:	a649001f 	andi	r18, r9, 31
    5f44:	13005800 	addk	r24, r0, r11
    5f48:	be120014 	beqid	r18, 20		// 5f5c
    5f4c:	13180000 	addk	r24, r24, r0
    5f50:	3252ffff 	addik	r18, r18, -1
    5f54:	be32fffc 	bneid	r18, -4		// 5f50
    5f58:	93180041 	srl	r24, r24
    5f5c:	a649001f 	andi	r18, r9, 31
    5f60:	13a02000 	addk	r29, r0, r4
    5f64:	be120014 	beqid	r18, 20		// 5f78
    5f68:	13bd0000 	addk	r29, r29, r0
    5f6c:	3252ffff 	addik	r18, r18, -1
    5f70:	be32fffc 	bneid	r18, -4		// 5f6c
    5f74:	13bde800 	addk	r29, r29, r29
    5f78:	32e0ffff 	addik	r23, r0, -1
    5f7c:	32c0ffff 	addik	r22, r0, -1
    5f80:	011cb000 	add	r8, r28, r22
    5f84:	093db800 	addc	r9, r29, r23
    5f88:	85295800 	and	r9, r9, r11
    5f8c:	85085000 	and	r8, r8, r10
    5f90:	e8630004 	lwi	r3, r3, 4
    5f94:	e8a60004 	lwi	r5, r6, 4
    5f98:	81084800 	or	r8, r8, r9
    5f9c:	14880000 	rsubk	r4, r8, r0
    5fa0:	80844000 	or	r4, r4, r8
    5fa4:	11200000 	addk	r9, r0, r0
    5fa8:	88a32800 	xor	r5, r3, r5
    5fac:	11002000 	addk	r8, r0, r4
    5fb0:	91040041 	srl	r8, r4
    5fb4:	91080041 	srl	r8, r8
    5fb8:	91080041 	srl	r8, r8
    5fbc:	91080041 	srl	r8, r8
    5fc0:	91080041 	srl	r8, r8
    5fc4:	91080041 	srl	r8, r8
    5fc8:	91080041 	srl	r8, r8
    5fcc:	91080041 	srl	r8, r8
    5fd0:	91080041 	srl	r8, r8
    5fd4:	91080041 	srl	r8, r8
    5fd8:	91080041 	srl	r8, r8
    5fdc:	91080041 	srl	r8, r8
    5fe0:	91080041 	srl	r8, r8
    5fe4:	91080041 	srl	r8, r8
    5fe8:	91080041 	srl	r8, r8
    5fec:	91080041 	srl	r8, r8
    5ff0:	91080041 	srl	r8, r8
    5ff4:	91080041 	srl	r8, r8
    5ff8:	91080041 	srl	r8, r8
    5ffc:	91080041 	srl	r8, r8
    6000:	91080041 	srl	r8, r8
    6004:	91080041 	srl	r8, r8
    6008:	91080041 	srl	r8, r8
    600c:	91080041 	srl	r8, r8
    6010:	91080041 	srl	r8, r8
    6014:	91080041 	srl	r8, r8
    6018:	91080041 	srl	r8, r8
    601c:	91080041 	srl	r8, r8
    6020:	91080041 	srl	r8, r8
    6024:	91080041 	srl	r8, r8
    6028:	91080041 	srl	r8, r8
    602c:	8169c800 	or	r11, r9, r25
    6030:	be25008c 	bneid	r5, 140		// 60bc
    6034:	8148c000 	or	r10, r8, r24
    6038:	f8730004 	swi	r3, r19, 4
    603c:	30600003 	addik	r3, r0, 3
    6040:	f8730000 	swi	r3, r19, 0
    6044:	b0001fff 	imm	8191
    6048:	3060ffff 	addik	r3, r0, -1
    604c:	008ad000 	add	r4, r10, r26
    6050:	08abd800 	addc	r5, r11, r27
    6054:	f9930008 	swi	r12, r19, 8
    6058:	f893000c 	swi	r4, r19, 12
    605c:	f8b30010 	swi	r5, r19, 16
    6060:	16451803 	cmpu	r18, r5, r3
    6064:	bc520194 	blti	r18, 404		// 61f8
    6068:	10730000 	addk	r3, r19, r0
    606c:	ea610004 	lwi	r19, r1, 4
    6070:	eac10008 	lwi	r22, r1, 8
    6074:	eae1000c 	lwi	r23, r1, 12
    6078:	eb010010 	lwi	r24, r1, 16
    607c:	eb210014 	lwi	r25, r1, 20
    6080:	eb410018 	lwi	r26, r1, 24
    6084:	eb61001c 	lwi	r27, r1, 28
    6088:	eb810020 	lwi	r28, r1, 32
    608c:	eba10024 	lwi	r29, r1, 36
    6090:	b60f0008 	rtsd	r15, 8
    6094:	30210028 	addik	r1, r1, 40
    6098:	164c2801 	cmp	r18, r12, r5
    609c:	bc5201ec 	blti	r18, 492		// 6288
    60a0:	11850000 	addk	r12, r5, r0
    60a4:	33600000 	addik	r27, r0, 0
    60a8:	33400000 	addik	r26, r0, 0
    60ac:	e8630004 	lwi	r3, r3, 4
    60b0:	e8a60004 	lwi	r5, r6, 4
    60b4:	88a32800 	xor	r5, r3, r5
    60b8:	bc05ff80 	beqi	r5, -128		// 6038
    60bc:	bc030270 	beqi	r3, 624		// 632c
    60c0:	049a5000 	rsub	r4, r26, r10
    60c4:	0cbb5800 	rsubc	r5, r27, r11
    60c8:	be450274 	bltid	r5, 628		// 633c
    60cc:	30600001 	addik	r3, r0, 1
    60d0:	f8130004 	swi	r0, r19, 4
    60d4:	f9930008 	swi	r12, r19, 8
    60d8:	f893000c 	swi	r4, r19, 12
    60dc:	f8b30010 	swi	r5, r19, 16
    60e0:	b0000fff 	imm	4095
    60e4:	3060ffff 	addik	r3, r0, -1
    60e8:	30e0ffff 	addik	r7, r0, -1
    60ec:	30c0ffff 	addik	r6, r0, -1
    60f0:	00c43000 	add	r6, r4, r6
    60f4:	08e53800 	addc	r7, r5, r7
    60f8:	16471803 	cmpu	r18, r7, r3
    60fc:	be5200e4 	bltid	r18, 228		// 61e0
    6100:	88671800 	xor	r3, r7, r3
    6104:	bc030364 	beqi	r3, 868		// 6468
    6108:	e8730008 	lwi	r3, r19, 8
    610c:	b0000fff 	imm	4095
    6110:	3180ffff 	addik	r12, r0, -1
    6114:	3120ffff 	addik	r9, r0, -1
    6118:	3100ffff 	addik	r8, r0, -1
    611c:	b810000c 	brid	12		// 6128
    6120:	32c0fffe 	addik	r22, r0, -2
    6124:	bc0a01f8 	beqi	r10, 504		// 631c
    6128:	11442000 	addk	r10, r4, r4
    612c:	10e02000 	addk	r7, r0, r4
    6130:	90e40041 	srl	r7, r4
    6134:	90e70041 	srl	r7, r7
    6138:	90e70041 	srl	r7, r7
    613c:	90e70041 	srl	r7, r7
    6140:	90e70041 	srl	r7, r7
    6144:	90e70041 	srl	r7, r7
    6148:	90e70041 	srl	r7, r7
    614c:	90e70041 	srl	r7, r7
    6150:	90e70041 	srl	r7, r7
    6154:	90e70041 	srl	r7, r7
    6158:	90e70041 	srl	r7, r7
    615c:	90e70041 	srl	r7, r7
    6160:	90e70041 	srl	r7, r7
    6164:	90e70041 	srl	r7, r7
    6168:	90e70041 	srl	r7, r7
    616c:	90e70041 	srl	r7, r7
    6170:	90e70041 	srl	r7, r7
    6174:	90e70041 	srl	r7, r7
    6178:	90e70041 	srl	r7, r7
    617c:	90e70041 	srl	r7, r7
    6180:	90e70041 	srl	r7, r7
    6184:	90e70041 	srl	r7, r7
    6188:	90e70041 	srl	r7, r7
    618c:	90e70041 	srl	r7, r7
    6190:	90e70041 	srl	r7, r7
    6194:	90e70041 	srl	r7, r7
    6198:	90e70041 	srl	r7, r7
    619c:	90e70041 	srl	r7, r7
    61a0:	90e70041 	srl	r7, r7
    61a4:	90e70041 	srl	r7, r7
    61a8:	90e70041 	srl	r7, r7
    61ac:	108a0000 	addk	r4, r10, r0
    61b0:	10c52800 	addk	r6, r5, r5
    61b4:	80a73000 	or	r5, r7, r6
    61b8:	00c44000 	add	r6, r4, r8
    61bc:	08e54800 	addc	r7, r5, r9
    61c0:	b0000fff 	imm	4095
    61c4:	a947ffff 	xori	r10, r7, -1
    61c8:	16476003 	cmpu	r18, r7, r12
    61cc:	beb2ff58 	bgeid	r18, -168		// 6124
    61d0:	3063ffff 	addik	r3, r3, -1
    61d4:	f893000c 	swi	r4, r19, 12
    61d8:	f8b30010 	swi	r5, r19, 16
    61dc:	f8730008 	swi	r3, r19, 8
    61e0:	30600003 	addik	r3, r0, 3
    61e4:	f8730000 	swi	r3, r19, 0
    61e8:	b0001fff 	imm	8191
    61ec:	3060ffff 	addik	r3, r0, -1
    61f0:	16451803 	cmpu	r18, r5, r3
    61f4:	bcb2fe74 	bgei	r18, -396		// 6068
    61f8:	e8730008 	lwi	r3, r19, 8
    61fc:	91050021 	src	r8, r5
    6200:	91080021 	src	r8, r8
    6204:	b0008000 	imm	-32768
    6208:	a5080000 	andi	r8, r8, 0
    620c:	90c40041 	srl	r6, r4
    6210:	80c83000 	or	r6, r8, r6
    6214:	31200000 	addik	r9, r0, 0
    6218:	31000001 	addik	r8, r0, 1
    621c:	85044000 	and	r8, r4, r8
    6220:	85254800 	and	r9, r5, r9
    6224:	90e50041 	srl	r7, r5
    6228:	30630001 	addik	r3, r3, 1
    622c:	80c83000 	or	r6, r8, r6
    6230:	80e93800 	or	r7, r9, r7
    6234:	f8730008 	swi	r3, r19, 8
    6238:	f8d3000c 	swi	r6, r19, 12
    623c:	f8f30010 	swi	r7, r19, 16
    6240:	b810fe2c 	brid	-468		// 606c
    6244:	10730000 	addk	r3, r19, r0
    6248:	bc25fe24 	bnei	r5, -476		// 606c
    624c:	e9230004 	lwi	r9, r3, 4
    6250:	e9030008 	lwi	r8, r3, 8
    6254:	e8e3000c 	lwi	r7, r3, 12
    6258:	e8a30010 	lwi	r5, r3, 16
    625c:	f9330004 	swi	r9, r19, 4
    6260:	f8930000 	swi	r4, r19, 0
    6264:	e8630004 	lwi	r3, r3, 4
    6268:	e8860004 	lwi	r4, r6, 4
    626c:	f9130008 	swi	r8, r19, 8
    6270:	f8f3000c 	swi	r7, r19, 12
    6274:	84641800 	and	r3, r4, r3
    6278:	f8730004 	swi	r3, r19, 4
    627c:	f8b30010 	swi	r5, r19, 16
    6280:	b810fdec 	brid	-532		// 606c
    6284:	10730000 	addk	r3, r19, r0
    6288:	31600000 	addik	r11, r0, 0
    628c:	31400000 	addik	r10, r0, 0
    6290:	b810fe20 	brid	-480		// 60b0
    6294:	e8630004 	lwi	r3, r3, 4
    6298:	13a50000 	addk	r29, r5, r0
    629c:	10ab5800 	addk	r5, r11, r11
    62a0:	a644001f 	andi	r18, r4, 31
    62a4:	10e02800 	addk	r7, r0, r5
    62a8:	be120014 	beqid	r18, 20		// 62bc
    62ac:	10e70000 	addk	r7, r7, r0
    62b0:	3252ffff 	addik	r18, r18, -1
    62b4:	be32fffc 	bneid	r18, -4		// 62b0
    62b8:	10e73800 	addk	r7, r7, r7
    62bc:	30800001 	addik	r4, r0, 1
    62c0:	a649001f 	andi	r18, r9, 31
    62c4:	13005000 	addk	r24, r0, r10
    62c8:	be120014 	beqid	r18, 20		// 62dc
    62cc:	13180000 	addk	r24, r24, r0
    62d0:	3252ffff 	addik	r18, r18, -1
    62d4:	be32fffc 	bneid	r18, -4		// 62d0
    62d8:	93180041 	srl	r24, r24
    62dc:	a649001f 	andi	r18, r9, 31
    62e0:	13205800 	addk	r25, r0, r11
    62e4:	be120014 	beqid	r18, 20		// 62f8
    62e8:	13390000 	addk	r25, r25, r0
    62ec:	3252ffff 	addik	r18, r18, -1
    62f0:	be32fffc 	bneid	r18, -4		// 62ec
    62f4:	93390041 	srl	r25, r25
    62f8:	a649001f 	andi	r18, r9, 31
    62fc:	13802000 	addk	r28, r0, r4
    6300:	be120014 	beqid	r18, 20		// 6314
    6304:	139c0000 	addk	r28, r28, r0
    6308:	3252ffff 	addik	r18, r18, -1
    630c:	be32fffc 	bneid	r18, -4		// 6308
    6310:	139ce000 	addk	r28, r28, r28
    6314:	b810fc64 	brid	-924		// 5f78
    6318:	8307c000 	or	r24, r7, r24
    631c:	1646b003 	cmpu	r18, r6, r22
    6320:	bcb2fe08 	bgei	r18, -504		// 6128
    6324:	b810feb4 	brid	-332		// 61d8
    6328:	f893000c 	swi	r4, r19, 12
    632c:	048ad000 	rsub	r4, r10, r26
    6330:	0cabd800 	rsubc	r5, r11, r27
    6334:	bea5fd9c 	bgeid	r5, -612		// 60d0
    6338:	30600001 	addik	r3, r0, 1
    633c:	04840000 	rsub	r4, r4, r0
    6340:	0ca50000 	rsubc	r5, r5, r0
    6344:	f8730004 	swi	r3, r19, 4
    6348:	f9930008 	swi	r12, r19, 8
    634c:	f893000c 	swi	r4, r19, 12
    6350:	f8b30010 	swi	r5, r19, 16
    6354:	b800fd8c 	bri	-628		// 60e0
    6358:	b810fd14 	brid	-748		// 606c
    635c:	10660000 	addk	r3, r6, r0
    6360:	bc08fd4c 	beqi	r8, -692		// 60ac
    6364:	be050140 	beqid	r5, 320		// 64a4
    6368:	118c4800 	addk	r12, r12, r9
    636c:	a649001f 	andi	r18, r9, 31
    6370:	12c0d800 	addk	r22, r0, r27
    6374:	be120014 	beqid	r18, 20		// 6388
    6378:	12d60000 	addk	r22, r22, r0
    637c:	3252ffff 	addik	r18, r18, -1
    6380:	be32fffc 	bneid	r18, -4		// 637c
    6384:	92d60041 	srl	r22, r22
    6388:	be2500f4 	bneid	r5, 244		// 647c
    638c:	12e00000 	addk	r23, r0, r0
    6390:	13250000 	addk	r25, r5, r0
    6394:	30800001 	addik	r4, r0, 1
    6398:	a649001f 	andi	r18, r9, 31
    639c:	13002000 	addk	r24, r0, r4
    63a0:	be120014 	beqid	r18, 20		// 63b4
    63a4:	13180000 	addk	r24, r24, r0
    63a8:	3252ffff 	addik	r18, r18, -1
    63ac:	be32fffc 	bneid	r18, -4		// 63a8
    63b0:	1318c000 	addk	r24, r24, r24
    63b4:	30a0ffff 	addik	r5, r0, -1
    63b8:	3080ffff 	addik	r4, r0, -1
    63bc:	03182000 	add	r24, r24, r4
    63c0:	0b392800 	addc	r25, r25, r5
    63c4:	8779d800 	and	r27, r25, r27
    63c8:	8758d000 	and	r26, r24, r26
    63cc:	835ad800 	or	r26, r26, r27
    63d0:	149a0000 	rsubk	r4, r26, r0
    63d4:	8084d000 	or	r4, r4, r26
    63d8:	13600000 	addk	r27, r0, r0
    63dc:	13402000 	addk	r26, r0, r4
    63e0:	93440041 	srl	r26, r4
    63e4:	935a0041 	srl	r26, r26
    63e8:	935a0041 	srl	r26, r26
    63ec:	935a0041 	srl	r26, r26
    63f0:	935a0041 	srl	r26, r26
    63f4:	935a0041 	srl	r26, r26
    63f8:	935a0041 	srl	r26, r26
    63fc:	935a0041 	srl	r26, r26
    6400:	935a0041 	srl	r26, r26
    6404:	935a0041 	srl	r26, r26
    6408:	935a0041 	srl	r26, r26
    640c:	935a0041 	srl	r26, r26
    6410:	935a0041 	srl	r26, r26
    6414:	935a0041 	srl	r26, r26
    6418:	935a0041 	srl	r26, r26
    641c:	935a0041 	srl	r26, r26
    6420:	935a0041 	srl	r26, r26
    6424:	935a0041 	srl	r26, r26
    6428:	935a0041 	srl	r26, r26
    642c:	935a0041 	srl	r26, r26
    6430:	935a0041 	srl	r26, r26
    6434:	935a0041 	srl	r26, r26
    6438:	935a0041 	srl	r26, r26
    643c:	935a0041 	srl	r26, r26
    6440:	935a0041 	srl	r26, r26
    6444:	935a0041 	srl	r26, r26
    6448:	935a0041 	srl	r26, r26
    644c:	935a0041 	srl	r26, r26
    6450:	935a0041 	srl	r26, r26
    6454:	935a0041 	srl	r26, r26
    6458:	935a0041 	srl	r26, r26
    645c:	837bb800 	or	r27, r27, r23
    6460:	b810fc4c 	brid	-948		// 60ac
    6464:	835ab000 	or	r26, r26, r22
    6468:	3060fffe 	addik	r3, r0, -2
    646c:	16461803 	cmpu	r18, r6, r3
    6470:	bcb2fc98 	bgei	r18, -872		// 6108
    6474:	b810fd70 	brid	-656		// 61e4
    6478:	30600003 	addik	r3, r0, 3
    647c:	30800001 	addik	r4, r0, 1
    6480:	a649001f 	andi	r18, r9, 31
    6484:	13202000 	addk	r25, r0, r4
    6488:	be120014 	beqid	r18, 20		// 649c
    648c:	13390000 	addk	r25, r25, r0
    6490:	3252ffff 	addik	r18, r18, -1
    6494:	be32fffc 	bneid	r18, -4		// 6490
    6498:	1339c800 	addk	r25, r25, r25
    649c:	b810ff18 	brid	-232		// 63b4
    64a0:	13170000 	addk	r24, r23, r0
    64a4:	111bd800 	addk	r8, r27, r27
    64a8:	a8e9ffff 	xori	r7, r9, -1
    64ac:	a647001f 	andi	r18, r7, 31
    64b0:	10804000 	addk	r4, r0, r8
    64b4:	be120014 	beqid	r18, 20		// 64c8
    64b8:	10840000 	addk	r4, r4, r0
    64bc:	3252ffff 	addik	r18, r18, -1
    64c0:	be32fffc 	bneid	r18, -4		// 64bc
    64c4:	10842000 	addk	r4, r4, r4
    64c8:	a649001f 	andi	r18, r9, 31
    64cc:	12c0d000 	addk	r22, r0, r26
    64d0:	be120014 	beqid	r18, 20		// 64e4
    64d4:	12d60000 	addk	r22, r22, r0
    64d8:	3252ffff 	addik	r18, r18, -1
    64dc:	be32fffc 	bneid	r18, -4		// 64d8
    64e0:	92d60041 	srl	r22, r22
    64e4:	a649001f 	andi	r18, r9, 31
    64e8:	12e0d800 	addk	r23, r0, r27
    64ec:	be120014 	beqid	r18, 20		// 6500
    64f0:	12f70000 	addk	r23, r23, r0
    64f4:	3252ffff 	addik	r18, r18, -1
    64f8:	be32fffc 	bneid	r18, -4		// 64f4
    64fc:	92f70041 	srl	r23, r23
    6500:	b810fe90 	brid	-368		// 6390
    6504:	82c4b000 	or	r22, r4, r22
    6508:	a9080004 	xori	r8, r8, 4
    650c:	be28fb64 	bneid	r8, -1180		// 6070
    6510:	ea610004 	lwi	r19, r1, 4
    6514:	e8a30004 	lwi	r5, r3, 4
    6518:	e8860004 	lwi	r4, r6, 4
    651c:	88852000 	xor	r4, r5, r4
    6520:	be04fb54 	beqid	r4, -1196		// 6074
    6524:	eac10008 	lwi	r22, r1, 8
    6528:	b0000000 	imm	0
    652c:	30608cdc 	addik	r3, r0, -29476	// 8cdc <__thenan_df>
    6530:	b810fb48 	brid	-1208		// 6078
    6534:	eae1000c 	lwi	r23, r1, 12

00006538 <__adddf3>:
    6538:	11450000 	addk	r10, r5, r0
    653c:	11660000 	addk	r11, r6, r0
    6540:	11280000 	addk	r9, r8, r0
    6544:	11070000 	addk	r8, r7, r0
    6548:	3021ff98 	addik	r1, r1, -104
    654c:	30c10054 	addik	r6, r1, 84
    6550:	f9e10000 	swi	r15, r1, 0
    6554:	f9410024 	swi	r10, r1, 36
    6558:	f9610028 	swi	r11, r1, 40
    655c:	f901001c 	swi	r8, r1, 28
    6560:	f9210020 	swi	r9, r1, 32
    6564:	b0000000 	imm	0
    6568:	b9f418b4 	brlid	r15, 6324	// 7e1c <__unpack_d>
    656c:	30a10024 	addik	r5, r1, 36
    6570:	30c10040 	addik	r6, r1, 64
    6574:	b0000000 	imm	0
    6578:	b9f418a4 	brlid	r15, 6308	// 7e1c <__unpack_d>
    657c:	30a1001c 	addik	r5, r1, 28
    6580:	30a10054 	addik	r5, r1, 84
    6584:	30c10040 	addik	r6, r1, 64
    6588:	b9f4f87c 	brlid	r15, -1924	// 5e04 <_fpadd_parts>
    658c:	30e1002c 	addik	r7, r1, 44
    6590:	b0000000 	imm	0
    6594:	b9f413c0 	brlid	r15, 5056	// 7954 <__pack_d>
    6598:	10a30000 	addk	r5, r3, r0
    659c:	e9e10000 	lwi	r15, r1, 0
    65a0:	b60f0008 	rtsd	r15, 8
    65a4:	30210068 	addik	r1, r1, 104

000065a8 <__subdf3>:
    65a8:	11450000 	addk	r10, r5, r0
    65ac:	11660000 	addk	r11, r6, r0
    65b0:	11280000 	addk	r9, r8, r0
    65b4:	11070000 	addk	r8, r7, r0
    65b8:	3021ff98 	addik	r1, r1, -104
    65bc:	30c10054 	addik	r6, r1, 84
    65c0:	f9e10000 	swi	r15, r1, 0
    65c4:	f9410024 	swi	r10, r1, 36
    65c8:	f9610028 	swi	r11, r1, 40
    65cc:	f901001c 	swi	r8, r1, 28
    65d0:	f9210020 	swi	r9, r1, 32
    65d4:	b0000000 	imm	0
    65d8:	b9f41844 	brlid	r15, 6212	// 7e1c <__unpack_d>
    65dc:	30a10024 	addik	r5, r1, 36
    65e0:	30c10040 	addik	r6, r1, 64
    65e4:	b0000000 	imm	0
    65e8:	b9f41834 	brlid	r15, 6196	// 7e1c <__unpack_d>
    65ec:	30a1001c 	addik	r5, r1, 28
    65f0:	e8610044 	lwi	r3, r1, 68
    65f4:	30a10054 	addik	r5, r1, 84
    65f8:	30c10040 	addik	r6, r1, 64
    65fc:	30e1002c 	addik	r7, r1, 44
    6600:	a8630001 	xori	r3, r3, 1
    6604:	b9f4f800 	brlid	r15, -2048	// 5e04 <_fpadd_parts>
    6608:	f8610044 	swi	r3, r1, 68
    660c:	b0000000 	imm	0
    6610:	b9f41344 	brlid	r15, 4932	// 7954 <__pack_d>
    6614:	10a30000 	addk	r5, r3, r0
    6618:	e9e10000 	lwi	r15, r1, 0
    661c:	b60f0008 	rtsd	r15, 8
    6620:	30210068 	addik	r1, r1, 104

00006624 <__muldf3>:
    6624:	11450000 	addk	r10, r5, r0
    6628:	11660000 	addk	r11, r6, r0
    662c:	11280000 	addk	r9, r8, r0
    6630:	11070000 	addk	r8, r7, r0
    6634:	3021ff6c 	addik	r1, r1, -148
    6638:	30c10054 	addik	r6, r1, 84
    663c:	30a10024 	addik	r5, r1, 36
    6640:	f9e10000 	swi	r15, r1, 0
    6644:	f9410024 	swi	r10, r1, 36
    6648:	f9610028 	swi	r11, r1, 40
    664c:	f901001c 	swi	r8, r1, 28
    6650:	f9210020 	swi	r9, r1, 32
    6654:	fa610068 	swi	r19, r1, 104
    6658:	fac1006c 	swi	r22, r1, 108
    665c:	fae10070 	swi	r23, r1, 112
    6660:	fb010074 	swi	r24, r1, 116
    6664:	fb210078 	swi	r25, r1, 120
    6668:	fb41007c 	swi	r26, r1, 124
    666c:	fb610080 	swi	r27, r1, 128
    6670:	fb810084 	swi	r28, r1, 132
    6674:	fba10088 	swi	r29, r1, 136
    6678:	fbc1008c 	swi	r30, r1, 140
    667c:	b0000000 	imm	0
    6680:	b9f4179c 	brlid	r15, 6044	// 7e1c <__unpack_d>
    6684:	fbe10090 	swi	r31, r1, 144
    6688:	30a1001c 	addik	r5, r1, 28
    668c:	b0000000 	imm	0
    6690:	b9f4178c 	brlid	r15, 6028	// 7e1c <__unpack_d>
    6694:	30c10040 	addik	r6, r1, 64
    6698:	e8610054 	lwi	r3, r1, 84
    669c:	30a00001 	addik	r5, r0, 1
    66a0:	16432803 	cmpu	r18, r3, r5
    66a4:	beb20488 	bgeid	r18, 1160		// 6b2c
    66a8:	e8810040 	lwi	r4, r1, 64
    66ac:	16442803 	cmpu	r18, r4, r5
    66b0:	bcb20574 	bgei	r18, 1396		// 6c24
    66b4:	a8a30004 	xori	r5, r3, 4
    66b8:	be050464 	beqid	r5, 1124		// 6b1c
    66bc:	a8a40004 	xori	r5, r4, 4
    66c0:	be050558 	beqid	r5, 1368		// 6c18
    66c4:	a8630002 	xori	r3, r3, 2
    66c8:	be030464 	beqid	r3, 1124		// 6b2c
    66cc:	a8840002 	xori	r4, r4, 2
    66d0:	be040554 	beqid	r4, 1364		// 6c24
    66d4:	eb010060 	lwi	r24, r1, 96
    66d8:	eb81004c 	lwi	r28, r1, 76
    66dc:	10c00000 	addk	r6, r0, r0
    66e0:	11060000 	addk	r8, r6, r0
    66e4:	10b80000 	addk	r5, r24, r0
    66e8:	10fc0000 	addk	r7, r28, r0
    66ec:	eb410050 	lwi	r26, r1, 80
    66f0:	b0000000 	imm	0
    66f4:	b9f40ae4 	brlid	r15, 2788	// 71d8 <__muldi3>
    66f8:	ea610064 	lwi	r19, r1, 100
    66fc:	10c00000 	addk	r6, r0, r0
    6700:	11060000 	addk	r8, r6, r0
    6704:	10ba0000 	addk	r5, r26, r0
    6708:	10f80000 	addk	r7, r24, r0
    670c:	13240000 	addk	r25, r4, r0
    6710:	b0000000 	imm	0
    6714:	b9f40ac4 	brlid	r15, 2756	// 71d8 <__muldi3>
    6718:	13030000 	addk	r24, r3, r0
    671c:	10c00000 	addk	r6, r0, r0
    6720:	11060000 	addk	r8, r6, r0
    6724:	10fa0000 	addk	r7, r26, r0
    6728:	10b30000 	addk	r5, r19, r0
    672c:	13430000 	addk	r26, r3, r0
    6730:	b0000000 	imm	0
    6734:	b9f40aa4 	brlid	r15, 2724	// 71d8 <__muldi3>
    6738:	13640000 	addk	r27, r4, r0
    673c:	10c00000 	addk	r6, r0, r0
    6740:	11060000 	addk	r8, r6, r0
    6744:	10b30000 	addk	r5, r19, r0
    6748:	10fc0000 	addk	r7, r28, r0
    674c:	13c30000 	addk	r30, r3, r0
    6750:	b0000000 	imm	0
    6754:	b9f40a84 	brlid	r15, 2692	// 71d8 <__muldi3>
    6758:	13e40000 	addk	r31, r4, r0
    675c:	11030000 	addk	r8, r3, r0
    6760:	11240000 	addk	r9, r4, r0
    6764:	0108d000 	add	r8, r8, r26
    6768:	0929d800 	addc	r9, r9, r27
    676c:	165b4803 	cmpu	r18, r27, r9
    6770:	beb20350 	bgeid	r18, 848		// 6ac0
    6774:	887b4800 	xor	r3, r27, r9
    6778:	10e80000 	addk	r7, r8, r0
    677c:	10c00000 	addk	r6, r0, r0
    6780:	33a00001 	addik	r29, r0, 1
    6784:	33800000 	addik	r28, r0, 0
    6788:	00c6c000 	add	r6, r6, r24
    678c:	08e7c800 	addc	r7, r7, r25
    6790:	16593803 	cmpu	r18, r25, r7
    6794:	be520354 	bltid	r18, 852		// 6ae8
    6798:	88793800 	xor	r3, r25, r7
    679c:	bc030364 	beqi	r3, 868		// 6b00
    67a0:	e8810058 	lwi	r4, r1, 88
    67a4:	e8610044 	lwi	r3, r1, 68
    67a8:	e901005c 	lwi	r8, r1, 92
    67ac:	11490000 	addk	r10, r9, r0
    67b0:	88641800 	xor	r3, r4, r3
    67b4:	e8810048 	lwi	r4, r1, 72
    67b8:	15230000 	rsubk	r9, r3, r0
    67bc:	11600000 	addk	r11, r0, r0
    67c0:	11082000 	addk	r8, r8, r4
    67c4:	b0001fff 	imm	8191
    67c8:	3340ffff 	addik	r26, r0, -1
    67cc:	008af000 	add	r4, r10, r30
    67d0:	08abf800 	addc	r5, r11, r31
    67d4:	31080004 	addik	r8, r8, 4
    67d8:	80691800 	or	r3, r9, r3
    67dc:	11201800 	addk	r9, r0, r3
    67e0:	91230041 	srl	r9, r3
    67e4:	91290041 	srl	r9, r9
    67e8:	91290041 	srl	r9, r9
    67ec:	91290041 	srl	r9, r9
    67f0:	91290041 	srl	r9, r9
    67f4:	91290041 	srl	r9, r9
    67f8:	91290041 	srl	r9, r9
    67fc:	91290041 	srl	r9, r9
    6800:	91290041 	srl	r9, r9
    6804:	91290041 	srl	r9, r9
    6808:	91290041 	srl	r9, r9
    680c:	91290041 	srl	r9, r9
    6810:	91290041 	srl	r9, r9
    6814:	91290041 	srl	r9, r9
    6818:	91290041 	srl	r9, r9
    681c:	91290041 	srl	r9, r9
    6820:	91290041 	srl	r9, r9
    6824:	91290041 	srl	r9, r9
    6828:	91290041 	srl	r9, r9
    682c:	91290041 	srl	r9, r9
    6830:	91290041 	srl	r9, r9
    6834:	91290041 	srl	r9, r9
    6838:	91290041 	srl	r9, r9
    683c:	91290041 	srl	r9, r9
    6840:	91290041 	srl	r9, r9
    6844:	91290041 	srl	r9, r9
    6848:	91290041 	srl	r9, r9
    684c:	91290041 	srl	r9, r9
    6850:	91290041 	srl	r9, r9
    6854:	91290041 	srl	r9, r9
    6858:	91290041 	srl	r9, r9
    685c:	0084e000 	add	r4, r4, r28
    6860:	08a5e800 	addc	r5, r5, r29
    6864:	f9010034 	swi	r8, r1, 52
    6868:	1645d003 	cmpu	r18, r5, r26
    686c:	beb20074 	bgeid	r18, 116		// 68e0
    6870:	f9210030 	swi	r9, r1, 48
    6874:	b0008000 	imm	-32768
    6878:	33200000 	addik	r25, r0, 0
    687c:	33000000 	addik	r24, r0, 0
    6880:	91440041 	srl	r10, r4
    6884:	91250041 	srl	r9, r5
    6888:	a4640001 	andi	r3, r4, 1
    688c:	91650021 	src	r11, r5
    6890:	916b0021 	src	r11, r11
    6894:	b0008000 	imm	-32768
    6898:	a56b0000 	andi	r11, r11, 0
    689c:	91870021 	src	r12, r7
    68a0:	918c0021 	src	r12, r12
    68a4:	b0008000 	imm	-32768
    68a8:	a58c0000 	andi	r12, r12, 0
    68ac:	808b5000 	or	r4, r11, r10
    68b0:	10a90000 	addk	r5, r9, r0
    68b4:	be03001c 	beqid	r3, 28		// 68d0
    68b8:	31080001 	addik	r8, r8, 1
    68bc:	92c60041 	srl	r22, r6
    68c0:	82ccb000 	or	r22, r12, r22
    68c4:	92e70041 	srl	r23, r7
    68c8:	80d6c000 	or	r6, r22, r24
    68cc:	80f7c800 	or	r7, r23, r25
    68d0:	1645d003 	cmpu	r18, r5, r26
    68d4:	be52ffb0 	bltid	r18, -80		// 6884
    68d8:	91440041 	srl	r10, r4
    68dc:	f9010034 	swi	r8, r1, 52
    68e0:	b0000fff 	imm	4095
    68e4:	32c0ffff 	addik	r22, r0, -1
    68e8:	1645b003 	cmpu	r18, r5, r22
    68ec:	be520164 	bltid	r18, 356		// 6a50
    68f0:	e8610034 	lwi	r3, r1, 52
    68f4:	33200000 	addik	r25, r0, 0
    68f8:	33000001 	addik	r24, r0, 1
    68fc:	b810001c 	brid	28		// 6918
    6900:	11042000 	addk	r8, r4, r4
    6904:	10ca0000 	addk	r6, r10, r0
    6908:	1645b003 	cmpu	r18, r5, r22
    690c:	be520140 	bltid	r18, 320		// 6a4c
    6910:	80e94000 	or	r7, r9, r8
    6914:	11042000 	addk	r8, r4, r4
    6918:	11652800 	addk	r11, r5, r5
    691c:	11802000 	addk	r12, r0, r4
    6920:	91840041 	srl	r12, r4
    6924:	918c0041 	srl	r12, r12
    6928:	918c0041 	srl	r12, r12
    692c:	918c0041 	srl	r12, r12
    6930:	918c0041 	srl	r12, r12
    6934:	918c0041 	srl	r12, r12
    6938:	918c0041 	srl	r12, r12
    693c:	918c0041 	srl	r12, r12
    6940:	918c0041 	srl	r12, r12
    6944:	918c0041 	srl	r12, r12
    6948:	918c0041 	srl	r12, r12
    694c:	918c0041 	srl	r12, r12
    6950:	918c0041 	srl	r12, r12
    6954:	918c0041 	srl	r12, r12
    6958:	918c0041 	srl	r12, r12
    695c:	918c0041 	srl	r12, r12
    6960:	918c0041 	srl	r12, r12
    6964:	918c0041 	srl	r12, r12
    6968:	918c0041 	srl	r12, r12
    696c:	918c0041 	srl	r12, r12
    6970:	918c0041 	srl	r12, r12
    6974:	918c0041 	srl	r12, r12
    6978:	918c0041 	srl	r12, r12
    697c:	918c0041 	srl	r12, r12
    6980:	918c0041 	srl	r12, r12
    6984:	918c0041 	srl	r12, r12
    6988:	918c0041 	srl	r12, r12
    698c:	918c0041 	srl	r12, r12
    6990:	918c0041 	srl	r12, r12
    6994:	918c0041 	srl	r12, r12
    6998:	918c0041 	srl	r12, r12
    699c:	11463000 	addk	r10, r6, r6
    69a0:	10880000 	addk	r4, r8, r0
    69a4:	11203000 	addk	r9, r0, r6
    69a8:	91260041 	srl	r9, r6
    69ac:	91290041 	srl	r9, r9
    69b0:	91290041 	srl	r9, r9
    69b4:	91290041 	srl	r9, r9
    69b8:	91290041 	srl	r9, r9
    69bc:	91290041 	srl	r9, r9
    69c0:	91290041 	srl	r9, r9
    69c4:	91290041 	srl	r9, r9
    69c8:	91290041 	srl	r9, r9
    69cc:	91290041 	srl	r9, r9
    69d0:	91290041 	srl	r9, r9
    69d4:	91290041 	srl	r9, r9
    69d8:	91290041 	srl	r9, r9
    69dc:	91290041 	srl	r9, r9
    69e0:	91290041 	srl	r9, r9
    69e4:	91290041 	srl	r9, r9
    69e8:	91290041 	srl	r9, r9
    69ec:	91290041 	srl	r9, r9
    69f0:	91290041 	srl	r9, r9
    69f4:	91290041 	srl	r9, r9
    69f8:	91290041 	srl	r9, r9
    69fc:	91290041 	srl	r9, r9
    6a00:	91290041 	srl	r9, r9
    6a04:	91290041 	srl	r9, r9
    6a08:	91290041 	srl	r9, r9
    6a0c:	91290041 	srl	r9, r9
    6a10:	91290041 	srl	r9, r9
    6a14:	91290041 	srl	r9, r9
    6a18:	91290041 	srl	r9, r9
    6a1c:	91290041 	srl	r9, r9
    6a20:	91290041 	srl	r9, r9
    6a24:	11073800 	addk	r8, r7, r7
    6a28:	80ac5800 	or	r5, r12, r11
    6a2c:	bea7fed8 	bgeid	r7, -296		// 6904
    6a30:	3063ffff 	addik	r3, r3, -1
    6a34:	80a5c800 	or	r5, r5, r25
    6a38:	8084c000 	or	r4, r4, r24
    6a3c:	10ca0000 	addk	r6, r10, r0
    6a40:	1645b003 	cmpu	r18, r5, r22
    6a44:	beb2fed0 	bgeid	r18, -304		// 6914
    6a48:	80e94000 	or	r7, r9, r8
    6a4c:	f8610034 	swi	r3, r1, 52
    6a50:	31200000 	addik	r9, r0, 0
    6a54:	310000ff 	addik	r8, r0, 255
    6a58:	85044000 	and	r8, r4, r8
    6a5c:	a8680080 	xori	r3, r8, 128
    6a60:	be03016c 	beqid	r3, 364		// 6bcc
    6a64:	85254800 	and	r9, r5, r9
    6a68:	30600003 	addik	r3, r0, 3
    6a6c:	f8810038 	swi	r4, r1, 56
    6a70:	f8a1003c 	swi	r5, r1, 60
    6a74:	f861002c 	swi	r3, r1, 44
    6a78:	30a1002c 	addik	r5, r1, 44
    6a7c:	b0000000 	imm	0
    6a80:	b9f40ed4 	brlid	r15, 3796	// 7954 <__pack_d>
    6a84:	80000000 	or	r0, r0, r0
    6a88:	e9e10000 	lwi	r15, r1, 0
    6a8c:	ea610068 	lwi	r19, r1, 104
    6a90:	eac1006c 	lwi	r22, r1, 108
    6a94:	eae10070 	lwi	r23, r1, 112
    6a98:	eb010074 	lwi	r24, r1, 116
    6a9c:	eb210078 	lwi	r25, r1, 120
    6aa0:	eb41007c 	lwi	r26, r1, 124
    6aa4:	eb610080 	lwi	r27, r1, 128
    6aa8:	eb810084 	lwi	r28, r1, 132
    6aac:	eba10088 	lwi	r29, r1, 136
    6ab0:	ebc1008c 	lwi	r30, r1, 140
    6ab4:	ebe10090 	lwi	r31, r1, 144
    6ab8:	b60f0008 	rtsd	r15, 8
    6abc:	30210094 	addik	r1, r1, 148
    6ac0:	be03004c 	beqid	r3, 76		// 6b0c
    6ac4:	10e80000 	addk	r7, r8, r0
    6ac8:	10c00000 	addk	r6, r0, r0
    6acc:	33a00000 	addik	r29, r0, 0
    6ad0:	33800000 	addik	r28, r0, 0
    6ad4:	00c6c000 	add	r6, r6, r24
    6ad8:	08e7c800 	addc	r7, r7, r25
    6adc:	16593803 	cmpu	r18, r25, r7
    6ae0:	beb2fcbc 	bgeid	r18, -836		// 679c
    6ae4:	88793800 	xor	r3, r25, r7
    6ae8:	30a00000 	addik	r5, r0, 0
    6aec:	30800001 	addik	r4, r0, 1
    6af0:	039c2000 	add	r28, r28, r4
    6af4:	0bbd2800 	addc	r29, r29, r5
    6af8:	b810fcac 	brid	-852		// 67a4
    6afc:	e8810058 	lwi	r4, r1, 88
    6b00:	16583003 	cmpu	r18, r24, r6
    6b04:	bcb2fc9c 	bgei	r18, -868		// 67a0
    6b08:	b800ffe0 	bri	-32		// 6ae8
    6b0c:	165a4003 	cmpu	r18, r26, r8
    6b10:	be52fc68 	bltid	r18, -920		// 6778
    6b14:	10c00000 	addk	r6, r0, r0
    6b18:	b800ffb4 	bri	-76		// 6acc
    6b1c:	a8840002 	xori	r4, r4, 2
    6b20:	b0000000 	imm	0
    6b24:	30a08cdc 	addik	r5, r0, -29476	// 8cdc <__thenan_df>
    6b28:	bc04ff54 	beqi	r4, -172		// 6a7c
    6b2c:	e8810058 	lwi	r4, r1, 88
    6b30:	e8610044 	lwi	r3, r1, 68
    6b34:	30a10054 	addik	r5, r1, 84
    6b38:	88641800 	xor	r3, r4, r3
    6b3c:	14830000 	rsubk	r4, r3, r0
    6b40:	80641800 	or	r3, r4, r3
    6b44:	10801800 	addk	r4, r0, r3
    6b48:	90830041 	srl	r4, r3
    6b4c:	90840041 	srl	r4, r4
    6b50:	90840041 	srl	r4, r4
    6b54:	90840041 	srl	r4, r4
    6b58:	90840041 	srl	r4, r4
    6b5c:	90840041 	srl	r4, r4
    6b60:	90840041 	srl	r4, r4
    6b64:	90840041 	srl	r4, r4
    6b68:	90840041 	srl	r4, r4
    6b6c:	90840041 	srl	r4, r4
    6b70:	90840041 	srl	r4, r4
    6b74:	90840041 	srl	r4, r4
    6b78:	90840041 	srl	r4, r4
    6b7c:	90840041 	srl	r4, r4
    6b80:	90840041 	srl	r4, r4
    6b84:	90840041 	srl	r4, r4
    6b88:	90840041 	srl	r4, r4
    6b8c:	90840041 	srl	r4, r4
    6b90:	90840041 	srl	r4, r4
    6b94:	90840041 	srl	r4, r4
    6b98:	90840041 	srl	r4, r4
    6b9c:	90840041 	srl	r4, r4
    6ba0:	90840041 	srl	r4, r4
    6ba4:	90840041 	srl	r4, r4
    6ba8:	90840041 	srl	r4, r4
    6bac:	90840041 	srl	r4, r4
    6bb0:	90840041 	srl	r4, r4
    6bb4:	90840041 	srl	r4, r4
    6bb8:	90840041 	srl	r4, r4
    6bbc:	90840041 	srl	r4, r4
    6bc0:	90840041 	srl	r4, r4
    6bc4:	b810feb8 	brid	-328		// 6a7c
    6bc8:	f8810058 	swi	r4, r1, 88
    6bcc:	be29fea0 	bneid	r9, -352		// 6a6c
    6bd0:	30600003 	addik	r3, r0, 3
    6bd4:	31200000 	addik	r9, r0, 0
    6bd8:	31000100 	addik	r8, r0, 256
    6bdc:	85044000 	and	r8, r4, r8
    6be0:	85254800 	and	r9, r5, r9
    6be4:	81084800 	or	r8, r8, r9
    6be8:	be28fe84 	bneid	r8, -380		// 6a6c
    6bec:	80c63800 	or	r6, r6, r7
    6bf0:	bc06fe7c 	beqi	r6, -388		// 6a6c
    6bf4:	30e00000 	addik	r7, r0, 0
    6bf8:	30c00080 	addik	r6, r0, 128	// 80 <_exit>
    6bfc:	00843000 	add	r4, r4, r6
    6c00:	08a53800 	addc	r5, r5, r7
    6c04:	30e0ffff 	addik	r7, r0, -1
    6c08:	30c0ff00 	addik	r6, r0, -256
    6c0c:	84843000 	and	r4, r4, r6
    6c10:	b810fe5c 	brid	-420		// 6a6c
    6c14:	84a53800 	and	r5, r5, r7
    6c18:	b0000000 	imm	0
    6c1c:	30a08cdc 	addik	r5, r0, -29476	// 8cdc <__thenan_df>
    6c20:	bc03fe5c 	beqi	r3, -420		// 6a7c
    6c24:	e8610044 	lwi	r3, r1, 68
    6c28:	e8810058 	lwi	r4, r1, 88
    6c2c:	30a10040 	addik	r5, r1, 64
    6c30:	88641800 	xor	r3, r4, r3
    6c34:	14830000 	rsubk	r4, r3, r0
    6c38:	80641800 	or	r3, r4, r3
    6c3c:	10801800 	addk	r4, r0, r3
    6c40:	90830041 	srl	r4, r3
    6c44:	90840041 	srl	r4, r4
    6c48:	90840041 	srl	r4, r4
    6c4c:	90840041 	srl	r4, r4
    6c50:	90840041 	srl	r4, r4
    6c54:	90840041 	srl	r4, r4
    6c58:	90840041 	srl	r4, r4
    6c5c:	90840041 	srl	r4, r4
    6c60:	90840041 	srl	r4, r4
    6c64:	90840041 	srl	r4, r4
    6c68:	90840041 	srl	r4, r4
    6c6c:	90840041 	srl	r4, r4
    6c70:	90840041 	srl	r4, r4
    6c74:	90840041 	srl	r4, r4
    6c78:	90840041 	srl	r4, r4
    6c7c:	90840041 	srl	r4, r4
    6c80:	90840041 	srl	r4, r4
    6c84:	90840041 	srl	r4, r4
    6c88:	90840041 	srl	r4, r4
    6c8c:	90840041 	srl	r4, r4
    6c90:	90840041 	srl	r4, r4
    6c94:	90840041 	srl	r4, r4
    6c98:	90840041 	srl	r4, r4
    6c9c:	90840041 	srl	r4, r4
    6ca0:	90840041 	srl	r4, r4
    6ca4:	90840041 	srl	r4, r4
    6ca8:	90840041 	srl	r4, r4
    6cac:	90840041 	srl	r4, r4
    6cb0:	90840041 	srl	r4, r4
    6cb4:	90840041 	srl	r4, r4
    6cb8:	90840041 	srl	r4, r4
    6cbc:	b810fdc0 	brid	-576		// 6a7c
    6cc0:	f8810044 	swi	r4, r1, 68

00006cc4 <__ltdf2>:
    6cc4:	11450000 	addk	r10, r5, r0
    6cc8:	11660000 	addk	r11, r6, r0
    6ccc:	11280000 	addk	r9, r8, r0
    6cd0:	11070000 	addk	r8, r7, r0
    6cd4:	3021ffac 	addik	r1, r1, -84
    6cd8:	30c10040 	addik	r6, r1, 64
    6cdc:	f9e10000 	swi	r15, r1, 0
    6ce0:	f9410024 	swi	r10, r1, 36
    6ce4:	f9610028 	swi	r11, r1, 40
    6ce8:	f901001c 	swi	r8, r1, 28
    6cec:	f9210020 	swi	r9, r1, 32
    6cf0:	b0000000 	imm	0
    6cf4:	b9f41128 	brlid	r15, 4392	// 7e1c <__unpack_d>
    6cf8:	30a10024 	addik	r5, r1, 36
    6cfc:	30c1002c 	addik	r6, r1, 44
    6d00:	b0000000 	imm	0
    6d04:	b9f41118 	brlid	r15, 4376	// 7e1c <__unpack_d>
    6d08:	30a1001c 	addik	r5, r1, 28
    6d0c:	e8810040 	lwi	r4, r1, 64
    6d10:	30600001 	addik	r3, r0, 1
    6d14:	16441803 	cmpu	r18, r4, r3
    6d18:	beb20020 	bgeid	r18, 32		// 6d38
    6d1c:	e881002c 	lwi	r4, r1, 44
    6d20:	16441803 	cmpu	r18, r4, r3
    6d24:	beb20014 	bgeid	r18, 20		// 6d38
    6d28:	30a10040 	addik	r5, r1, 64
    6d2c:	b0000000 	imm	0
    6d30:	b9f414a4 	brlid	r15, 5284	// 81d4 <__fpcmp_parts_d>
    6d34:	30c1002c 	addik	r6, r1, 44
    6d38:	e9e10000 	lwi	r15, r1, 0
    6d3c:	b60f0008 	rtsd	r15, 8
    6d40:	30210054 	addik	r1, r1, 84

00006d44 <__floatsidf>:
    6d44:	3021ffcc 	addik	r1, r1, -52
    6d48:	30600003 	addik	r3, r0, 3
    6d4c:	f861001c 	swi	r3, r1, 28
    6d50:	f9e10000 	swi	r15, r1, 0
    6d54:	10602800 	addk	r3, r0, r5
    6d58:	90650041 	srl	r3, r5
    6d5c:	90630041 	srl	r3, r3
    6d60:	90630041 	srl	r3, r3
    6d64:	90630041 	srl	r3, r3
    6d68:	90630041 	srl	r3, r3
    6d6c:	90630041 	srl	r3, r3
    6d70:	90630041 	srl	r3, r3
    6d74:	90630041 	srl	r3, r3
    6d78:	90630041 	srl	r3, r3
    6d7c:	90630041 	srl	r3, r3
    6d80:	90630041 	srl	r3, r3
    6d84:	90630041 	srl	r3, r3
    6d88:	90630041 	srl	r3, r3
    6d8c:	90630041 	srl	r3, r3
    6d90:	90630041 	srl	r3, r3
    6d94:	90630041 	srl	r3, r3
    6d98:	90630041 	srl	r3, r3
    6d9c:	90630041 	srl	r3, r3
    6da0:	90630041 	srl	r3, r3
    6da4:	90630041 	srl	r3, r3
    6da8:	90630041 	srl	r3, r3
    6dac:	90630041 	srl	r3, r3
    6db0:	90630041 	srl	r3, r3
    6db4:	90630041 	srl	r3, r3
    6db8:	90630041 	srl	r3, r3
    6dbc:	90630041 	srl	r3, r3
    6dc0:	90630041 	srl	r3, r3
    6dc4:	90630041 	srl	r3, r3
    6dc8:	90630041 	srl	r3, r3
    6dcc:	90630041 	srl	r3, r3
    6dd0:	90630041 	srl	r3, r3
    6dd4:	fa610030 	swi	r19, r1, 48
    6dd8:	be25003c 	bneid	r5, 60		// 6e14
    6ddc:	f8610020 	swi	r3, r1, 32
    6de0:	30800002 	addik	r4, r0, 2
    6de4:	f881001c 	swi	r4, r1, 28
    6de8:	b0000000 	imm	0
    6dec:	b9f40b68 	brlid	r15, 2920	// 7954 <__pack_d>
    6df0:	30a1001c 	addik	r5, r1, 28
    6df4:	10a40000 	addk	r5, r4, r0
    6df8:	10830000 	addk	r4, r3, r0
    6dfc:	10640000 	addk	r3, r4, r0
    6e00:	e9e10000 	lwi	r15, r1, 0
    6e04:	10850000 	addk	r4, r5, r0
    6e08:	ea610030 	lwi	r19, r1, 48
    6e0c:	b60f0008 	rtsd	r15, 8
    6e10:	30210034 	addik	r1, r1, 52
    6e14:	3080003c 	addik	r4, r0, 60
    6e18:	f8810024 	swi	r4, r1, 36
    6e1c:	be030024 	beqid	r3, 36		// 6e40
    6e20:	12650000 	addk	r19, r5, r0
    6e24:	b0008000 	imm	-32768
    6e28:	30650000 	addik	r3, r5, 0
    6e2c:	30800000 	addik	r4, r0, 0
    6e30:	b000c1e0 	imm	-15904
    6e34:	30a00000 	addik	r5, r0, 0
    6e38:	be03ffc4 	beqid	r3, -60		// 6dfc
    6e3c:	16730000 	rsubk	r19, r19, r0
    6e40:	10b30000 	addk	r5, r19, r0
    6e44:	fa610028 	swi	r19, r1, 40
    6e48:	b0000000 	imm	0
    6e4c:	b9f40608 	brlid	r15, 1544	// 7454 <__clzsi2>
    6e50:	f801002c 	swi	r0, r1, 44
    6e54:	3083001d 	addik	r4, r3, 29
    6e58:	be64ff90 	bleid	r4, -112		// 6de8
    6e5c:	a4a40020 	andi	r5, r4, 32
    6e60:	be05003c 	beqid	r5, 60		// 6e9c
    6e64:	90f30041 	srl	r7, r19
    6e68:	a644001f 	andi	r18, r4, 31
    6e6c:	10a09800 	addk	r5, r0, r19
    6e70:	be120014 	beqid	r18, 20		// 6e84
    6e74:	10a50000 	addk	r5, r5, r0
    6e78:	3252ffff 	addik	r18, r18, -1
    6e7c:	be32fffc 	bneid	r18, -4		// 6e78
    6e80:	10a52800 	addk	r5, r5, r5
    6e84:	f8010028 	swi	r0, r1, 40
    6e88:	f8a1002c 	swi	r5, r1, 44
    6e8c:	3080001f 	addik	r4, r0, 31
    6e90:	14632000 	rsubk	r3, r3, r4
    6e94:	b810ff54 	brid	-172		// 6de8
    6e98:	f8610024 	swi	r3, r1, 36
    6e9c:	a8a4ffff 	xori	r5, r4, -1
    6ea0:	a645001f 	andi	r18, r5, 31
    6ea4:	10c03800 	addk	r6, r0, r7
    6ea8:	be120014 	beqid	r18, 20		// 6ebc
    6eac:	10c60000 	addk	r6, r6, r0
    6eb0:	3252ffff 	addik	r18, r18, -1
    6eb4:	be32fffc 	bneid	r18, -4		// 6eb0
    6eb8:	90c60041 	srl	r6, r6
    6ebc:	a644001f 	andi	r18, r4, 31
    6ec0:	10a09800 	addk	r5, r0, r19
    6ec4:	be120014 	beqid	r18, 20		// 6ed8
    6ec8:	10a50000 	addk	r5, r5, r0
    6ecc:	3252ffff 	addik	r18, r18, -1
    6ed0:	be32fffc 	bneid	r18, -4		// 6ecc
    6ed4:	10a52800 	addk	r5, r5, r5
    6ed8:	f8c1002c 	swi	r6, r1, 44
    6edc:	b810ffb0 	brid	-80		// 6e8c
    6ee0:	f8a10028 	swi	r5, r1, 40

00006ee4 <__divsi3>:
    6ee4:	3021fff0 	addik	r1, r1, -16
    6ee8:	fb810000 	swi	r28, r1, 0
    6eec:	fba10004 	swi	r29, r1, 4
    6ef0:	fbc10008 	swi	r30, r1, 8
    6ef4:	fbe1000c 	swi	r31, r1, 12
    6ef8:	bc06006c 	beqi	r6, 108		// 6f64
    6efc:	bc050068 	beqi	r5, 104		// 6f64
    6f00:	bea5000c 	bgeid	r5, 12		// 6f0c
    6f04:	8b853000 	xor	r28, r5, r6
    6f08:	24a50000 	rsubi	r5, r5, 0
    6f0c:	bca60008 	bgei	r6, 8		// 6f14
    6f10:	24c60000 	rsubi	r6, r6, 0
    6f14:	33c00000 	addik	r30, r0, 0
    6f18:	30600000 	addik	r3, r0, 0
    6f1c:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
    6f20:	bc450010 	blti	r5, 16		// 6f30
    6f24:	00a52800 	add	r5, r5, r5
    6f28:	be85fffc 	bgtid	r5, -4		// 6f24
    6f2c:	33bdffff 	addik	r29, r29, -1
    6f30:	00a52800 	add	r5, r5, r5
    6f34:	0bdef000 	addc	r30, r30, r30
    6f38:	07e6f000 	rsub	r31, r6, r30
    6f3c:	bc5f000c 	blti	r31, 12		// 6f48
    6f40:	83c0f800 	or	r30, r0, r31
    6f44:	30630001 	addik	r3, r3, 1
    6f48:	33bdffff 	addik	r29, r29, -1
    6f4c:	bc1d000c 	beqi	r29, 12		// 6f58
    6f50:	00631800 	add	r3, r3, r3
    6f54:	b800ffdc 	bri	-36		// 6f30
    6f58:	bcbc0010 	bgei	r28, 16		// 6f68
    6f5c:	b810000c 	brid	12		// 6f68
    6f60:	24630000 	rsubi	r3, r3, 0
    6f64:	80600000 	or	r3, r0, r0
    6f68:	eb810000 	lwi	r28, r1, 0
    6f6c:	eba10004 	lwi	r29, r1, 4
    6f70:	ebc10008 	lwi	r30, r1, 8
    6f74:	ebe1000c 	lwi	r31, r1, 12
    6f78:	b60f0008 	rtsd	r15, 8
    6f7c:	30210010 	addik	r1, r1, 16

00006f80 <__modsi3>:
    6f80:	3021fff0 	addik	r1, r1, -16
    6f84:	fb810000 	swi	r28, r1, 0
    6f88:	fba10004 	swi	r29, r1, 4
    6f8c:	fbc10008 	swi	r30, r1, 8
    6f90:	fbe1000c 	swi	r31, r1, 12
    6f94:	bc06006c 	beqi	r6, 108		// 7000
    6f98:	bc050068 	beqi	r5, 104		// 7000
    6f9c:	bea5000c 	bgeid	r5, 12		// 6fa8
    6fa0:	03850000 	add	r28, r5, r0
    6fa4:	24a50000 	rsubi	r5, r5, 0
    6fa8:	bca60008 	bgei	r6, 8		// 6fb0
    6fac:	24c60000 	rsubi	r6, r6, 0
    6fb0:	30600000 	addik	r3, r0, 0
    6fb4:	33c00000 	addik	r30, r0, 0
    6fb8:	be450014 	bltid	r5, 20		// 6fcc
    6fbc:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
    6fc0:	00a52800 	add	r5, r5, r5
    6fc4:	bea5fffc 	bgeid	r5, -4		// 6fc0
    6fc8:	33bdffff 	addik	r29, r29, -1
    6fcc:	00a52800 	add	r5, r5, r5
    6fd0:	08631800 	addc	r3, r3, r3
    6fd4:	07e61800 	rsub	r31, r6, r3
    6fd8:	bc5f000c 	blti	r31, 12		// 6fe4
    6fdc:	8060f800 	or	r3, r0, r31
    6fe0:	33de0001 	addik	r30, r30, 1
    6fe4:	33bdffff 	addik	r29, r29, -1
    6fe8:	bc1d000c 	beqi	r29, 12		// 6ff4
    6fec:	03def000 	add	r30, r30, r30
    6ff0:	b800ffdc 	bri	-36		// 6fcc
    6ff4:	bcbc0010 	bgei	r28, 16		// 7004
    6ff8:	b810000c 	brid	12		// 7004
    6ffc:	24630000 	rsubi	r3, r3, 0
    7000:	80600000 	or	r3, r0, r0
    7004:	eb810000 	lwi	r28, r1, 0
    7008:	eba10004 	lwi	r29, r1, 4
    700c:	ebc10008 	lwi	r30, r1, 8
    7010:	ebe1000c 	lwi	r31, r1, 12
    7014:	b60f0008 	rtsd	r15, 8
    7018:	30210010 	addik	r1, r1, 16

0000701c <__mulsi3>:
    701c:	00600000 	add	r3, r0, r0
    7020:	bc05004c 	beqi	r5, 76		// 706c
    7024:	bc060048 	beqi	r6, 72		// 706c
    7028:	bea5000c 	bgeid	r5, 12		// 7034
    702c:	88853000 	xor	r4, r5, r6
    7030:	24a50000 	rsubi	r5, r5, 0
    7034:	bca60008 	bgei	r6, 8		// 703c
    7038:	24c60000 	rsubi	r6, r6, 0
    703c:	b8000008 	bri	8		// 7044
    7040:	00a52800 	add	r5, r5, r5
    7044:	90c60041 	srl	r6, r6
    7048:	08e00000 	addc	r7, r0, r0
    704c:	bc07fff4 	beqi	r7, -12		// 7040
    7050:	be26fff0 	bneid	r6, -16		// 7040
    7054:	00632800 	add	r3, r3, r5
    7058:	bc44000c 	blti	r4, 12		// 7064
    705c:	b60f0008 	rtsd	r15, 8
    7060:	80000000 	or	r0, r0, r0
    7064:	b60f0008 	rtsd	r15, 8
    7068:	04630000 	rsub	r3, r3, r0
    706c:	b60f0008 	rtsd	r15, 8
    7070:	20600000 	addi	r3, r0, 0

00007074 <__udivsi3>:
    7074:	3021fff4 	addik	r1, r1, -12
    7078:	fba10000 	swi	r29, r1, 0
    707c:	fbc10004 	swi	r30, r1, 4
    7080:	fbe10008 	swi	r31, r1, 8
    7084:	bc060080 	beqi	r6, 128		// 7104
    7088:	be05007c 	beqid	r5, 124		// 7104
    708c:	33c00000 	addik	r30, r0, 0
    7090:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
    7094:	06453000 	rsub	r18, r5, r6
    7098:	be120070 	beqid	r18, 112		// 7108
    709c:	30600001 	addik	r3, r0, 1
    70a0:	8a453000 	xor	r18, r5, r6
    70a4:	beb20010 	bgeid	r18, 16		// 70b4
    70a8:	00600000 	add	r3, r0, r0
    70ac:	bc46005c 	blti	r6, 92		// 7108
    70b0:	b800000c 	bri	12		// 70bc
    70b4:	06462800 	rsub	r18, r6, r5
    70b8:	bc520050 	blti	r18, 80		// 7108
    70bc:	bc86000c 	bgti	r6, 12		// 70c8
    70c0:	b8100048 	brid	72		// 7108
    70c4:	30600001 	addik	r3, r0, 1
    70c8:	bc450010 	blti	r5, 16		// 70d8
    70cc:	00a52800 	add	r5, r5, r5
    70d0:	be85fffc 	bgtid	r5, -4		// 70cc
    70d4:	33bdffff 	addik	r29, r29, -1
    70d8:	00a52800 	add	r5, r5, r5
    70dc:	0bdef000 	addc	r30, r30, r30
    70e0:	07e6f000 	rsub	r31, r6, r30
    70e4:	bc5f000c 	blti	r31, 12		// 70f0
    70e8:	83c0f800 	or	r30, r0, r31
    70ec:	30630001 	addik	r3, r3, 1
    70f0:	33bdffff 	addik	r29, r29, -1
    70f4:	bc1d000c 	beqi	r29, 12		// 7100
    70f8:	00631800 	add	r3, r3, r3
    70fc:	b800ffdc 	bri	-36		// 70d8
    7100:	b8000008 	bri	8		// 7108
    7104:	80600000 	or	r3, r0, r0
    7108:	eba10000 	lwi	r29, r1, 0
    710c:	ebc10004 	lwi	r30, r1, 4
    7110:	ebe10008 	lwi	r31, r1, 8
    7114:	b60f0008 	rtsd	r15, 8
    7118:	3021000c 	addik	r1, r1, 12

0000711c <__umodsi3>:
    711c:	3021fff4 	addik	r1, r1, -12
    7120:	fba10000 	swi	r29, r1, 0
    7124:	fbc10004 	swi	r30, r1, 4
    7128:	fbe10008 	swi	r31, r1, 8
    712c:	bc060094 	beqi	r6, 148		// 71c0
    7130:	be050090 	beqid	r5, 144		// 71c0
    7134:	30600000 	addik	r3, r0, 0
    7138:	33c00000 	addik	r30, r0, 0
    713c:	33a00020 	addik	r29, r0, 32	// 20 <_vector_hw_exception>
    7140:	06453000 	rsub	r18, r5, r6
    7144:	bc120080 	beqi	r18, 128		// 71c4
    7148:	8a453000 	xor	r18, r5, r6
    714c:	beb20010 	bgeid	r18, 16		// 715c
    7150:	30650000 	addik	r3, r5, 0
    7154:	bc460070 	blti	r6, 112		// 71c4
    7158:	b800000c 	bri	12		// 7164
    715c:	06453000 	rsub	r18, r5, r6
    7160:	bc920064 	bgti	r18, 100		// 71c4
    7164:	be860020 	bgtid	r6, 32		// 7184
    7168:	30600000 	addik	r3, r0, 0
    716c:	b0007fff 	imm	32767
    7170:	3240ffff 	addik	r18, r0, -1
    7174:	84a59000 	and	r5, r5, r18
    7178:	84c69000 	and	r6, r6, r18
    717c:	b8100048 	brid	72		// 71c4
    7180:	04662800 	rsub	r3, r6, r5
    7184:	bc450010 	blti	r5, 16		// 7194
    7188:	00a52800 	add	r5, r5, r5
    718c:	bea5fffc 	bgeid	r5, -4		// 7188
    7190:	33bdffff 	addik	r29, r29, -1
    7194:	00a52800 	add	r5, r5, r5
    7198:	08631800 	addc	r3, r3, r3
    719c:	07e61800 	rsub	r31, r6, r3
    71a0:	bc5f000c 	blti	r31, 12		// 71ac
    71a4:	8060f800 	or	r3, r0, r31
    71a8:	33de0001 	addik	r30, r30, 1
    71ac:	33bdffff 	addik	r29, r29, -1
    71b0:	bc1d000c 	beqi	r29, 12		// 71bc
    71b4:	03def000 	add	r30, r30, r30
    71b8:	b800ffdc 	bri	-36		// 7194
    71bc:	b8000008 	bri	8		// 71c4
    71c0:	80600000 	or	r3, r0, r0
    71c4:	eba10000 	lwi	r29, r1, 0
    71c8:	ebc10004 	lwi	r30, r1, 4
    71cc:	ebe10008 	lwi	r31, r1, 8
    71d0:	b60f0008 	rtsd	r15, 8
    71d4:	3021000c 	addik	r1, r1, 12

000071d8 <__muldi3>:
    71d8:	3021ffc0 	addik	r1, r1, -64
    71dc:	fb010028 	swi	r24, r1, 40
    71e0:	fb21002c 	swi	r25, r1, 44
    71e4:	b0000000 	imm	0
    71e8:	a707ffff 	andi	r24, r7, -1
    71ec:	b0000000 	imm	0
    71f0:	a725ffff 	andi	r25, r5, -1
    71f4:	fac10020 	swi	r22, r1, 32
    71f8:	fb610034 	swi	r27, r1, 52
    71fc:	12c50000 	addk	r22, r5, r0
    7200:	13660000 	addk	r27, r6, r0
    7204:	10b80000 	addk	r5, r24, r0
    7208:	10d90000 	addk	r6, r25, r0
    720c:	f9e10000 	swi	r15, r1, 0
    7210:	fa61001c 	swi	r19, r1, 28
    7214:	fae10024 	swi	r23, r1, 36
    7218:	12670000 	addk	r19, r7, r0
    721c:	fb410030 	swi	r26, r1, 48
    7220:	fb810038 	swi	r28, r1, 56
    7224:	13403800 	addk	r26, r0, r7
    7228:	93470041 	srl	r26, r7
    722c:	935a0041 	srl	r26, r26
    7230:	935a0041 	srl	r26, r26
    7234:	935a0041 	srl	r26, r26
    7238:	935a0041 	srl	r26, r26
    723c:	935a0041 	srl	r26, r26
    7240:	935a0041 	srl	r26, r26
    7244:	935a0041 	srl	r26, r26
    7248:	935a0041 	srl	r26, r26
    724c:	935a0041 	srl	r26, r26
    7250:	935a0041 	srl	r26, r26
    7254:	935a0041 	srl	r26, r26
    7258:	935a0041 	srl	r26, r26
    725c:	935a0041 	srl	r26, r26
    7260:	935a0041 	srl	r26, r26
    7264:	935a0041 	srl	r26, r26
    7268:	13880000 	addk	r28, r8, r0
    726c:	b000ffff 	imm	-1
    7270:	b9f4fdac 	brlid	r15, -596	// 701c <__mulsi3>
    7274:	fba1003c 	swi	r29, r1, 60
    7278:	10d90000 	addk	r6, r25, r0
    727c:	10ba0000 	addk	r5, r26, r0
    7280:	1320b000 	addk	r25, r0, r22
    7284:	93360041 	srl	r25, r22
    7288:	93390041 	srl	r25, r25
    728c:	93390041 	srl	r25, r25
    7290:	93390041 	srl	r25, r25
    7294:	93390041 	srl	r25, r25
    7298:	93390041 	srl	r25, r25
    729c:	93390041 	srl	r25, r25
    72a0:	93390041 	srl	r25, r25
    72a4:	93390041 	srl	r25, r25
    72a8:	93390041 	srl	r25, r25
    72ac:	93390041 	srl	r25, r25
    72b0:	93390041 	srl	r25, r25
    72b4:	93390041 	srl	r25, r25
    72b8:	93390041 	srl	r25, r25
    72bc:	93390041 	srl	r25, r25
    72c0:	93390041 	srl	r25, r25
    72c4:	b000ffff 	imm	-1
    72c8:	b9f4fd54 	brlid	r15, -684	// 701c <__mulsi3>
    72cc:	12e30000 	addk	r23, r3, r0
    72d0:	10b80000 	addk	r5, r24, r0
    72d4:	10d90000 	addk	r6, r25, r0
    72d8:	b000ffff 	imm	-1
    72dc:	b9f4fd40 	brlid	r15, -704	// 701c <__mulsi3>
    72e0:	13a30000 	addk	r29, r3, r0
    72e4:	10ba0000 	addk	r5, r26, r0
    72e8:	10d90000 	addk	r6, r25, r0
    72ec:	b000ffff 	imm	-1
    72f0:	b9f4fd2c 	brlid	r15, -724	// 701c <__mulsi3>
    72f4:	13030000 	addk	r24, r3, r0
    72f8:	10f8e800 	addk	r7, r24, r29
    72fc:	10a0b800 	addk	r5, r0, r23
    7300:	90b70041 	srl	r5, r23
    7304:	90a50041 	srl	r5, r5
    7308:	90a50041 	srl	r5, r5
    730c:	90a50041 	srl	r5, r5
    7310:	90a50041 	srl	r5, r5
    7314:	90a50041 	srl	r5, r5
    7318:	90a50041 	srl	r5, r5
    731c:	90a50041 	srl	r5, r5
    7320:	90a50041 	srl	r5, r5
    7324:	90a50041 	srl	r5, r5
    7328:	90a50041 	srl	r5, r5
    732c:	90a50041 	srl	r5, r5
    7330:	90a50041 	srl	r5, r5
    7334:	90a50041 	srl	r5, r5
    7338:	90a50041 	srl	r5, r5
    733c:	90a50041 	srl	r5, r5
    7340:	10e72800 	addk	r7, r7, r5
    7344:	16583803 	cmpu	r18, r24, r7
    7348:	beb20010 	bgeid	r18, 16		// 7358
    734c:	10830000 	addk	r4, r3, r0
    7350:	b0000001 	imm	1
    7354:	30830000 	addik	r4, r3, 0
    7358:	b0000000 	imm	0
    735c:	a467ffff 	andi	r3, r7, -1
    7360:	10631800 	addk	r3, r3, r3
    7364:	10631800 	addk	r3, r3, r3
    7368:	10631800 	addk	r3, r3, r3
    736c:	10631800 	addk	r3, r3, r3
    7370:	10631800 	addk	r3, r3, r3
    7374:	10631800 	addk	r3, r3, r3
    7378:	10631800 	addk	r3, r3, r3
    737c:	10631800 	addk	r3, r3, r3
    7380:	10631800 	addk	r3, r3, r3
    7384:	10631800 	addk	r3, r3, r3
    7388:	10631800 	addk	r3, r3, r3
    738c:	10631800 	addk	r3, r3, r3
    7390:	10631800 	addk	r3, r3, r3
    7394:	10b60000 	addk	r5, r22, r0
    7398:	10dc0000 	addk	r6, r28, r0
    739c:	10631800 	addk	r3, r3, r3
    73a0:	10631800 	addk	r3, r3, r3
    73a4:	10631800 	addk	r3, r3, r3
    73a8:	b0000000 	imm	0
    73ac:	a6f7ffff 	andi	r23, r23, -1
    73b0:	12c03800 	addk	r22, r0, r7
    73b4:	92c70041 	srl	r22, r7
    73b8:	92d60041 	srl	r22, r22
    73bc:	92d60041 	srl	r22, r22
    73c0:	92d60041 	srl	r22, r22
    73c4:	92d60041 	srl	r22, r22
    73c8:	92d60041 	srl	r22, r22
    73cc:	92d60041 	srl	r22, r22
    73d0:	92d60041 	srl	r22, r22
    73d4:	92d60041 	srl	r22, r22
    73d8:	92d60041 	srl	r22, r22
    73dc:	92d60041 	srl	r22, r22
    73e0:	92d60041 	srl	r22, r22
    73e4:	92d60041 	srl	r22, r22
    73e8:	92d60041 	srl	r22, r22
    73ec:	92d60041 	srl	r22, r22
    73f0:	92d60041 	srl	r22, r22
    73f4:	12e3b800 	addk	r23, r3, r23
    73f8:	b000ffff 	imm	-1
    73fc:	b9f4fc20 	brlid	r15, -992	// 701c <__mulsi3>
    7400:	12c4b000 	addk	r22, r4, r22
    7404:	10b30000 	addk	r5, r19, r0
    7408:	10db0000 	addk	r6, r27, r0
    740c:	b000ffff 	imm	-1
    7410:	b9f4fc0c 	brlid	r15, -1012	// 701c <__mulsi3>
    7414:	13030000 	addk	r24, r3, r0
    7418:	10b81800 	addk	r5, r24, r3
    741c:	1085b000 	addk	r4, r5, r22
    7420:	10770000 	addk	r3, r23, r0
    7424:	e9e10000 	lwi	r15, r1, 0
    7428:	ea61001c 	lwi	r19, r1, 28
    742c:	eac10020 	lwi	r22, r1, 32
    7430:	eae10024 	lwi	r23, r1, 36
    7434:	eb010028 	lwi	r24, r1, 40
    7438:	eb21002c 	lwi	r25, r1, 44
    743c:	eb410030 	lwi	r26, r1, 48
    7440:	eb610034 	lwi	r27, r1, 52
    7444:	eb810038 	lwi	r28, r1, 56
    7448:	eba1003c 	lwi	r29, r1, 60
    744c:	b60f0008 	rtsd	r15, 8
    7450:	30210040 	addik	r1, r1, 64

00007454 <__clzsi2>:
    7454:	b0000000 	imm	0
    7458:	3060ffff 	addik	r3, r0, -1
    745c:	16451803 	cmpu	r18, r5, r3
    7460:	be520044 	bltid	r18, 68		// 74a4
    7464:	306000ff 	addik	r3, r0, 255
    7468:	16451803 	cmpu	r18, r5, r3
    746c:	bcb20060 	bgei	r18, 96		// 74cc
    7470:	30600018 	addik	r3, r0, 24
    7474:	30800008 	addik	r4, r0, 8	// 8 <_vector_sw_exception>
    7478:	a644001f 	andi	r18, r4, 31
    747c:	10c02800 	addk	r6, r0, r5
    7480:	be120014 	beqid	r18, 20		// 7494
    7484:	10c60000 	addk	r6, r6, r0
    7488:	3252ffff 	addik	r18, r18, -1
    748c:	be32fffc 	bneid	r18, -4		// 7488
    7490:	90c60041 	srl	r6, r6
    7494:	b0000000 	imm	0
    7498:	e0868cf0 	lbui	r4, r6, -29456
    749c:	b60f0008 	rtsd	r15, 8
    74a0:	14641800 	rsubk	r3, r4, r3
    74a4:	b00000ff 	imm	255
    74a8:	3060ffff 	addik	r3, r0, -1
    74ac:	16451803 	cmpu	r18, r5, r3
    74b0:	bc520010 	blti	r18, 16		// 74c0
    74b4:	30600010 	addik	r3, r0, 16	// 10 <_vector_interrupt>
    74b8:	b810ffc0 	brid	-64		// 7478
    74bc:	10830000 	addk	r4, r3, r0
    74c0:	30600008 	addik	r3, r0, 8	// 8 <_vector_sw_exception>
    74c4:	b810ffb4 	brid	-76		// 7478
    74c8:	30800018 	addik	r4, r0, 24
    74cc:	30600020 	addik	r3, r0, 32	// 20 <_vector_hw_exception>
    74d0:	b810ffa8 	brid	-88		// 7478
    74d4:	10800000 	addk	r4, r0, r0

000074d8 <__pack_f>:
    74d8:	e8850000 	lwi	r4, r5, 0
    74dc:	30c00001 	addik	r6, r0, 1
    74e0:	e865000c 	lwi	r3, r5, 12
    74e4:	16443003 	cmpu	r18, r4, r6
    74e8:	beb200ec 	bgeid	r18, 236		// 75d4
    74ec:	e8e50004 	lwi	r7, r5, 4
    74f0:	a9040004 	xori	r8, r4, 4
    74f4:	bc080100 	beqi	r8, 256		// 75f4
    74f8:	a8840002 	xori	r4, r4, 2
    74fc:	bc0400b8 	beqi	r4, 184		// 75b4
    7500:	be030098 	beqid	r3, 152		// 7598
    7504:	10830000 	addk	r4, r3, r0
    7508:	e8850008 	lwi	r4, r5, 8
    750c:	30a0ff82 	addik	r5, r0, -126
    7510:	16452001 	cmp	r18, r5, r4
    7514:	bc5200f0 	blti	r18, 240		// 7604
    7518:	30a0007f 	addik	r5, r0, 127
    751c:	16442801 	cmp	r18, r4, r5
    7520:	be520254 	bltid	r18, 596		// 7774
    7524:	84a32800 	and	r5, r3, r5
    7528:	a8a50040 	xori	r5, r5, 64
    752c:	be050090 	beqid	r5, 144		// 75bc
    7530:	a4a30080 	andi	r5, r3, 128
    7534:	3063003f 	addik	r3, r3, 63
    7538:	be430090 	bltid	r3, 144		// 75c8
    753c:	30a4007f 	addik	r5, r4, 127
    7540:	10801800 	addk	r4, r0, r3
    7544:	90830041 	srl	r4, r3
    7548:	90840041 	srl	r4, r4
    754c:	90840041 	srl	r4, r4
    7550:	90840041 	srl	r4, r4
    7554:	90840041 	srl	r4, r4
    7558:	90840041 	srl	r4, r4
    755c:	90840041 	srl	r4, r4
    7560:	b000007f 	imm	127
    7564:	a484ffff 	andi	r4, r4, -1
    7568:	90650021 	src	r3, r5
    756c:	90630021 	src	r3, r3
    7570:	90630021 	src	r3, r3
    7574:	90630021 	src	r3, r3
    7578:	90630021 	src	r3, r3
    757c:	90630021 	src	r3, r3
    7580:	90630021 	src	r3, r3
    7584:	90630021 	src	r3, r3
    7588:	90630021 	src	r3, r3
    758c:	90630021 	src	r3, r3
    7590:	b000ff80 	imm	-128
    7594:	a4630000 	andi	r3, r3, 0
    7598:	80641800 	or	r3, r4, r3
    759c:	90a70021 	src	r5, r7
    75a0:	90a50021 	src	r5, r5
    75a4:	b0008000 	imm	-32768
    75a8:	a4a50000 	andi	r5, r5, 0
    75ac:	b60f0008 	rtsd	r15, 8
    75b0:	80632800 	or	r3, r3, r5
    75b4:	b810ffe4 	brid	-28		// 7598
    75b8:	10640000 	addk	r3, r4, r0
    75bc:	bc05ff7c 	beqi	r5, -132		// 7538
    75c0:	b810ff78 	brid	-136		// 7538
    75c4:	30630040 	addik	r3, r3, 64
    75c8:	90630041 	srl	r3, r3
    75cc:	b810ff74 	brid	-140		// 7540
    75d0:	30a40080 	addik	r5, r4, 128
    75d4:	b0000010 	imm	16
    75d8:	a0630000 	ori	r3, r3, 0
    75dc:	b000007f 	imm	127
    75e0:	a483ffff 	andi	r4, r3, -1
    75e4:	b0007f80 	imm	32640
    75e8:	30600000 	addik	r3, r0, 0
    75ec:	b810ffb0 	brid	-80		// 759c
    75f0:	80641800 	or	r3, r4, r3
    75f4:	b0007f80 	imm	32640
    75f8:	30600000 	addik	r3, r0, 0
    75fc:	b810ff9c 	brid	-100		// 7598
    7600:	10880000 	addk	r4, r8, r0
    7604:	14842800 	rsubk	r4, r4, r5
    7608:	31000019 	addik	r8, r0, 25
    760c:	16444001 	cmp	r18, r4, r8
    7610:	be520174 	bltid	r18, 372		// 7784
    7614:	10a00000 	addk	r5, r0, r0
    7618:	a644001f 	andi	r18, r4, 31
    761c:	10a03000 	addk	r5, r0, r6
    7620:	be120014 	beqid	r18, 20		// 7634
    7624:	10a50000 	addk	r5, r5, r0
    7628:	3252ffff 	addik	r18, r18, -1
    762c:	be32fffc 	bneid	r18, -4		// 7628
    7630:	10a52800 	addk	r5, r5, r5
    7634:	30a5ffff 	addik	r5, r5, -1
    7638:	84a51800 	and	r5, r5, r3
    763c:	14c50000 	rsubk	r6, r5, r0
    7640:	80a62800 	or	r5, r6, r5
    7644:	a644001f 	andi	r18, r4, 31
    7648:	10c01800 	addk	r6, r0, r3
    764c:	be120014 	beqid	r18, 20		// 7660
    7650:	10c60000 	addk	r6, r6, r0
    7654:	3252ffff 	addik	r18, r18, -1
    7658:	be32fffc 	bneid	r18, -4		// 7654
    765c:	90c60041 	srl	r6, r6
    7660:	10602800 	addk	r3, r0, r5
    7664:	90650041 	srl	r3, r5
    7668:	90630041 	srl	r3, r3
    766c:	90630041 	srl	r3, r3
    7670:	90630041 	srl	r3, r3
    7674:	90630041 	srl	r3, r3
    7678:	90630041 	srl	r3, r3
    767c:	90630041 	srl	r3, r3
    7680:	90630041 	srl	r3, r3
    7684:	90630041 	srl	r3, r3
    7688:	90630041 	srl	r3, r3
    768c:	90630041 	srl	r3, r3
    7690:	90630041 	srl	r3, r3
    7694:	90630041 	srl	r3, r3
    7698:	90630041 	srl	r3, r3
    769c:	90630041 	srl	r3, r3
    76a0:	90630041 	srl	r3, r3
    76a4:	90630041 	srl	r3, r3
    76a8:	90630041 	srl	r3, r3
    76ac:	90630041 	srl	r3, r3
    76b0:	90630041 	srl	r3, r3
    76b4:	90630041 	srl	r3, r3
    76b8:	90630041 	srl	r3, r3
    76bc:	90630041 	srl	r3, r3
    76c0:	90630041 	srl	r3, r3
    76c4:	90630041 	srl	r3, r3
    76c8:	90630041 	srl	r3, r3
    76cc:	90630041 	srl	r3, r3
    76d0:	90630041 	srl	r3, r3
    76d4:	90630041 	srl	r3, r3
    76d8:	90630041 	srl	r3, r3
    76dc:	90630041 	srl	r3, r3
    76e0:	80a33000 	or	r5, r3, r6
    76e4:	a465007f 	andi	r3, r5, 127
    76e8:	a8630040 	xori	r3, r3, 64
    76ec:	be230098 	bneid	r3, 152		// 7784
    76f0:	a4650080 	andi	r3, r5, 128
    76f4:	bc030008 	beqi	r3, 8		// 76fc
    76f8:	30a50040 	addik	r5, r5, 64
    76fc:	b0003fff 	imm	16383
    7700:	3060ffff 	addik	r3, r0, -1
    7704:	10802800 	addk	r4, r0, r5
    7708:	90850041 	srl	r4, r5
    770c:	90840041 	srl	r4, r4
    7710:	90840041 	srl	r4, r4
    7714:	90840041 	srl	r4, r4
    7718:	90840041 	srl	r4, r4
    771c:	90840041 	srl	r4, r4
    7720:	90840041 	srl	r4, r4
    7724:	b000007f 	imm	127
    7728:	a484ffff 	andi	r4, r4, -1
    772c:	16451803 	cmpu	r18, r5, r3
    7730:	be52000c 	bltid	r18, 12		// 773c
    7734:	30c00001 	addik	r6, r0, 1
    7738:	10c00000 	addk	r6, r0, r0
    773c:	90660021 	src	r3, r6
    7740:	90630021 	src	r3, r3
    7744:	90630021 	src	r3, r3
    7748:	90630021 	src	r3, r3
    774c:	90630021 	src	r3, r3
    7750:	90630021 	src	r3, r3
    7754:	90630021 	src	r3, r3
    7758:	90630021 	src	r3, r3
    775c:	90630021 	src	r3, r3
    7760:	90630021 	src	r3, r3
    7764:	b000ff80 	imm	-128
    7768:	a4630000 	andi	r3, r3, 0
    776c:	b810fe30 	brid	-464		// 759c
    7770:	80641800 	or	r3, r4, r3
    7774:	b0007f80 	imm	32640
    7778:	30600000 	addik	r3, r0, 0
    777c:	b810fe1c 	brid	-484		// 7598
    7780:	10800000 	addk	r4, r0, r0
    7784:	b810ff78 	brid	-136		// 76fc
    7788:	30a5003f 	addik	r5, r5, 63

0000778c <__unpack_f>:
    778c:	e8850000 	lwi	r4, r5, 0
    7790:	10602000 	addk	r3, r0, r4
    7794:	90640041 	srl	r3, r4
    7798:	90630041 	srl	r3, r3
    779c:	90630041 	srl	r3, r3
    77a0:	90630041 	srl	r3, r3
    77a4:	90630041 	srl	r3, r3
    77a8:	90630041 	srl	r3, r3
    77ac:	90630041 	srl	r3, r3
    77b0:	90630041 	srl	r3, r3
    77b4:	90630041 	srl	r3, r3
    77b8:	90630041 	srl	r3, r3
    77bc:	90630041 	srl	r3, r3
    77c0:	90630041 	srl	r3, r3
    77c4:	90630041 	srl	r3, r3
    77c8:	90630041 	srl	r3, r3
    77cc:	90630041 	srl	r3, r3
    77d0:	90630041 	srl	r3, r3
    77d4:	90630041 	srl	r3, r3
    77d8:	90630041 	srl	r3, r3
    77dc:	90630041 	srl	r3, r3
    77e0:	90630041 	srl	r3, r3
    77e4:	90630041 	srl	r3, r3
    77e8:	90630041 	srl	r3, r3
    77ec:	90630041 	srl	r3, r3
    77f0:	90630041 	srl	r3, r3
    77f4:	90630041 	srl	r3, r3
    77f8:	90630041 	srl	r3, r3
    77fc:	90630041 	srl	r3, r3
    7800:	90630041 	srl	r3, r3
    7804:	90630041 	srl	r3, r3
    7808:	90630041 	srl	r3, r3
    780c:	90630041 	srl	r3, r3
    7810:	10a02000 	addk	r5, r0, r4
    7814:	90a40041 	srl	r5, r4
    7818:	90a50041 	srl	r5, r5
    781c:	90a50041 	srl	r5, r5
    7820:	90a50041 	srl	r5, r5
    7824:	90a50041 	srl	r5, r5
    7828:	90a50041 	srl	r5, r5
    782c:	90a50041 	srl	r5, r5
    7830:	90a50041 	srl	r5, r5
    7834:	90a50041 	srl	r5, r5
    7838:	90a50041 	srl	r5, r5
    783c:	90a50041 	srl	r5, r5
    7840:	90a50041 	srl	r5, r5
    7844:	90a50041 	srl	r5, r5
    7848:	90a50041 	srl	r5, r5
    784c:	90a50041 	srl	r5, r5
    7850:	90a50041 	srl	r5, r5
    7854:	90a50041 	srl	r5, r5
    7858:	90a50041 	srl	r5, r5
    785c:	90a50041 	srl	r5, r5
    7860:	90a50041 	srl	r5, r5
    7864:	90a50041 	srl	r5, r5
    7868:	90a50041 	srl	r5, r5
    786c:	90a50041 	srl	r5, r5
    7870:	f8660004 	swi	r3, r6, 4
    7874:	a4a500ff 	andi	r5, r5, 255
    7878:	b000007f 	imm	127
    787c:	a464ffff 	andi	r3, r4, -1
    7880:	be250058 	bneid	r5, 88		// 78d8
    7884:	a8e500ff 	xori	r7, r5, 255
    7888:	be030090 	beqid	r3, 144		// 7918
    788c:	10631800 	addk	r3, r3, r3
    7890:	10631800 	addk	r3, r3, r3
    7894:	10631800 	addk	r3, r3, r3
    7898:	10631800 	addk	r3, r3, r3
    789c:	10631800 	addk	r3, r3, r3
    78a0:	b0003fff 	imm	16383
    78a4:	30a0ffff 	addik	r5, r0, -1
    78a8:	30800003 	addik	r4, r0, 3
    78ac:	10631800 	addk	r3, r3, r3
    78b0:	f8860000 	swi	r4, r6, 0
    78b4:	10631800 	addk	r3, r3, r3
    78b8:	3080ff82 	addik	r4, r0, -126
    78bc:	10631800 	addk	r3, r3, r3
    78c0:	16432803 	cmpu	r18, r3, r5
    78c4:	beb2fff8 	bgeid	r18, -8		// 78bc
    78c8:	3084ffff 	addik	r4, r4, -1
    78cc:	f8860008 	swi	r4, r6, 8
    78d0:	b60f0008 	rtsd	r15, 8
    78d4:	f866000c 	swi	r3, r6, 12
    78d8:	be07004c 	beqid	r7, 76		// 7924
    78dc:	30a5ff81 	addik	r5, r5, -127
    78e0:	10631800 	addk	r3, r3, r3
    78e4:	10631800 	addk	r3, r3, r3
    78e8:	10631800 	addk	r3, r3, r3
    78ec:	10631800 	addk	r3, r3, r3
    78f0:	10631800 	addk	r3, r3, r3
    78f4:	10631800 	addk	r3, r3, r3
    78f8:	10631800 	addk	r3, r3, r3
    78fc:	30800003 	addik	r4, r0, 3
    7900:	f8860000 	swi	r4, r6, 0
    7904:	b0004000 	imm	16384
    7908:	a0630000 	ori	r3, r3, 0
    790c:	f8a60008 	swi	r5, r6, 8
    7910:	b60f0008 	rtsd	r15, 8
    7914:	f866000c 	swi	r3, r6, 12
    7918:	30600002 	addik	r3, r0, 2
    791c:	b60f0008 	rtsd	r15, 8
    7920:	f8660000 	swi	r3, r6, 0
    7924:	bc03001c 	beqi	r3, 28		// 7940
    7928:	b0000010 	imm	16
    792c:	a4840000 	andi	r4, r4, 0
    7930:	bc04001c 	beqi	r4, 28		// 794c
    7934:	30800001 	addik	r4, r0, 1
    7938:	b810ffd8 	brid	-40		// 7910
    793c:	f8860000 	swi	r4, r6, 0
    7940:	30600004 	addik	r3, r0, 4
    7944:	b60f0008 	rtsd	r15, 8
    7948:	f8660000 	swi	r3, r6, 0
    794c:	b810ffc4 	brid	-60		// 7910
    7950:	f8860000 	swi	r4, r6, 0

00007954 <__pack_d>:
    7954:	3021ffd0 	addik	r1, r1, -48
    7958:	f9e10000 	swi	r15, r1, 0
    795c:	fa61001c 	swi	r19, r1, 28
    7960:	fac10020 	swi	r22, r1, 32
    7964:	fae10024 	swi	r23, r1, 36
    7968:	fb010028 	swi	r24, r1, 40
    796c:	fb21002c 	swi	r25, r1, 44
    7970:	e8650000 	lwi	r3, r5, 0
    7974:	30800001 	addik	r4, r0, 1
    7978:	eac5000c 	lwi	r22, r5, 12
    797c:	eae50010 	lwi	r23, r5, 16
    7980:	16432003 	cmpu	r18, r3, r4
    7984:	beb20218 	bgeid	r18, 536		// 7b9c
    7988:	ea650004 	lwi	r19, r5, 4
    798c:	a8830004 	xori	r4, r3, 4
    7990:	be0401f0 	beqid	r4, 496		// 7b80
    7994:	a8630002 	xori	r3, r3, 2
    7998:	be030138 	beqid	r3, 312		// 7ad0
    799c:	8076b800 	or	r3, r22, r23
    79a0:	be030130 	beqid	r3, 304		// 7ad0
    79a4:	3080fc02 	addik	r4, r0, -1022
    79a8:	e8650008 	lwi	r3, r5, 8
    79ac:	16441801 	cmp	r18, r4, r3
    79b0:	bc520224 	blti	r18, 548		// 7bd4
    79b4:	308003ff 	addik	r4, r0, 1023
    79b8:	16432001 	cmp	r18, r3, r4
    79bc:	bc5201c4 	blti	r18, 452		// 7b80
    79c0:	30a00000 	addik	r5, r0, 0
    79c4:	308000ff 	addik	r4, r0, 255
    79c8:	84962000 	and	r4, r22, r4
    79cc:	a8c40080 	xori	r6, r4, 128
    79d0:	be060180 	beqid	r6, 384		// 7b50
    79d4:	84b72800 	and	r5, r23, r5
    79d8:	30a00000 	addik	r5, r0, 0
    79dc:	3080007f 	addik	r4, r0, 127
    79e0:	02d62000 	add	r22, r22, r4
    79e4:	0af72800 	addc	r23, r23, r5
    79e8:	b0001fff 	imm	8191
    79ec:	3080ffff 	addik	r4, r0, -1
    79f0:	16572003 	cmpu	r18, r23, r4
    79f4:	be520138 	bltid	r18, 312		// 7b2c
    79f8:	90b60041 	srl	r5, r22
    79fc:	306303ff 	addik	r3, r3, 1023
    7a00:	90d70021 	src	r6, r23
    7a04:	90c60021 	src	r6, r6
    7a08:	90c60021 	src	r6, r6
    7a0c:	90c60021 	src	r6, r6
    7a10:	90c60021 	src	r6, r6
    7a14:	90c60021 	src	r6, r6
    7a18:	90c60021 	src	r6, r6
    7a1c:	90c60021 	src	r6, r6
    7a20:	90c60021 	src	r6, r6
    7a24:	b000ff00 	imm	-256
    7a28:	a4c60000 	andi	r6, r6, 0
    7a2c:	b000000f 	imm	15
    7a30:	3160ffff 	addik	r11, r0, -1
    7a34:	3140ffff 	addik	r10, r0, -1
    7a38:	1080b000 	addk	r4, r0, r22
    7a3c:	90960041 	srl	r4, r22
    7a40:	90840041 	srl	r4, r4
    7a44:	90840041 	srl	r4, r4
    7a48:	90840041 	srl	r4, r4
    7a4c:	90840041 	srl	r4, r4
    7a50:	90840041 	srl	r4, r4
    7a54:	90840041 	srl	r4, r4
    7a58:	90840041 	srl	r4, r4
    7a5c:	80862000 	or	r4, r6, r4
    7a60:	10a0b800 	addk	r5, r0, r23
    7a64:	90b70041 	srl	r5, r23
    7a68:	90a50041 	srl	r5, r5
    7a6c:	90a50041 	srl	r5, r5
    7a70:	90a50041 	srl	r5, r5
    7a74:	90a50041 	srl	r5, r5
    7a78:	90a50041 	srl	r5, r5
    7a7c:	90a50041 	srl	r5, r5
    7a80:	90a50041 	srl	r5, r5
    7a84:	90e30021 	src	r7, r3
    7a88:	90e70021 	src	r7, r7
    7a8c:	90e70021 	src	r7, r7
    7a90:	90e70021 	src	r7, r7
    7a94:	90e70021 	src	r7, r7
    7a98:	90e70021 	src	r7, r7
    7a9c:	90e70021 	src	r7, r7
    7aa0:	90e70021 	src	r7, r7
    7aa4:	90e70021 	src	r7, r7
    7aa8:	90e70021 	src	r7, r7
    7aac:	90e70021 	src	r7, r7
    7ab0:	90e70021 	src	r7, r7
    7ab4:	90e70021 	src	r7, r7
    7ab8:	b000fff0 	imm	-16
    7abc:	a4e70000 	andi	r7, r7, 0
    7ac0:	85445000 	and	r10, r4, r10
    7ac4:	85655800 	and	r11, r5, r11
    7ac8:	b8100018 	brid	24		// 7ae0
    7acc:	10c00000 	addk	r6, r0, r0
    7ad0:	30e00000 	addik	r7, r0, 0
    7ad4:	30c00000 	addik	r6, r0, 0
    7ad8:	11460000 	addk	r10, r6, r0
    7adc:	11670000 	addk	r11, r7, r0
    7ae0:	80ca3000 	or	r6, r10, r6
    7ae4:	80eb3800 	or	r7, r11, r7
    7ae8:	10a00000 	addk	r5, r0, r0
    7aec:	91330021 	src	r9, r19
    7af0:	91290021 	src	r9, r9
    7af4:	b0008000 	imm	-32768
    7af8:	a5290000 	andi	r9, r9, 0
    7afc:	81062800 	or	r8, r6, r5
    7b00:	81274800 	or	r9, r7, r9
    7b04:	10680000 	addk	r3, r8, r0
    7b08:	10890000 	addk	r4, r9, r0
    7b0c:	e9e10000 	lwi	r15, r1, 0
    7b10:	ea61001c 	lwi	r19, r1, 28
    7b14:	eac10020 	lwi	r22, r1, 32
    7b18:	eae10024 	lwi	r23, r1, 36
    7b1c:	eb010028 	lwi	r24, r1, 40
    7b20:	eb21002c 	lwi	r25, r1, 44
    7b24:	b60f0008 	rtsd	r15, 8
    7b28:	30210030 	addik	r1, r1, 48
    7b2c:	90970041 	srl	r4, r23
    7b30:	90d70021 	src	r6, r23
    7b34:	90c60021 	src	r6, r6
    7b38:	b0008000 	imm	-32768
    7b3c:	a4c60000 	andi	r6, r6, 0
    7b40:	30630400 	addik	r3, r3, 1024
    7b44:	82c62800 	or	r22, r6, r5
    7b48:	b810feb8 	brid	-328		// 7a00
    7b4c:	12e40000 	addk	r23, r4, r0
    7b50:	bc25fe88 	bnei	r5, -376		// 79d8
    7b54:	30a00000 	addik	r5, r0, 0
    7b58:	30800100 	addik	r4, r0, 256
    7b5c:	84962000 	and	r4, r22, r4
    7b60:	84b72800 	and	r5, r23, r5
    7b64:	80842800 	or	r4, r4, r5
    7b68:	bc04fe80 	beqi	r4, -384		// 79e8
    7b6c:	30a00000 	addik	r5, r0, 0
    7b70:	30800080 	addik	r4, r0, 128	// 80 <_exit>
    7b74:	02d62000 	add	r22, r22, r4
    7b78:	0af72800 	addc	r23, r23, r5
    7b7c:	b800fe6c 	bri	-404		// 79e8
    7b80:	b0007ff0 	imm	32752
    7b84:	30e00000 	addik	r7, r0, 0
    7b88:	30c00000 	addik	r6, r0, 0
    7b8c:	31600000 	addik	r11, r0, 0
    7b90:	31400000 	addik	r10, r0, 0
    7b94:	b810ff50 	brid	-176		// 7ae4
    7b98:	80ca3000 	or	r6, r10, r6
    7b9c:	b0000008 	imm	8
    7ba0:	31600000 	addik	r11, r0, 0
    7ba4:	31400000 	addik	r10, r0, 0
    7ba8:	b000000f 	imm	15
    7bac:	30a0ffff 	addik	r5, r0, -1
    7bb0:	3080ffff 	addik	r4, r0, -1
    7bb4:	81565000 	or	r10, r22, r10
    7bb8:	81775800 	or	r11, r23, r11
    7bbc:	854a2000 	and	r10, r10, r4
    7bc0:	b0007ff0 	imm	32752
    7bc4:	30e00000 	addik	r7, r0, 0
    7bc8:	30c00000 	addik	r6, r0, 0
    7bcc:	b810ff14 	brid	-236		// 7ae0
    7bd0:	856b2800 	and	r11, r11, r5
    7bd4:	17032000 	rsubk	r24, r3, r4
    7bd8:	30600038 	addik	r3, r0, 56
    7bdc:	30a00000 	addik	r5, r0, 0
    7be0:	30800000 	addik	r4, r0, 0
    7be4:	16581801 	cmp	r18, r24, r3
    7be8:	be520220 	bltid	r18, 544		// 7e08
    7bec:	10f80000 	addk	r7, r24, r0
    7bf0:	10b60000 	addk	r5, r22, r0
    7bf4:	b0000000 	imm	0
    7bf8:	b9f406f4 	brlid	r15, 1780	// 82ec <__lshrdi3>
    7bfc:	10d70000 	addk	r6, r23, r0
    7c00:	10f80000 	addk	r7, r24, r0
    7c04:	30c00000 	addik	r6, r0, 0
    7c08:	30a00001 	addik	r5, r0, 1
    7c0c:	13030000 	addk	r24, r3, r0
    7c10:	b0000000 	imm	0
    7c14:	b9f40780 	brlid	r15, 1920	// 8394 <__ashldi3>
    7c18:	13240000 	addk	r25, r4, r0
    7c1c:	10a40000 	addk	r5, r4, r0
    7c20:	10830000 	addk	r4, r3, r0
    7c24:	30e0ffff 	addik	r7, r0, -1
    7c28:	30c0ffff 	addik	r6, r0, -1
    7c2c:	00843000 	add	r4, r4, r6
    7c30:	08a53800 	addc	r5, r5, r7
    7c34:	86c4b000 	and	r22, r4, r22
    7c38:	86e5b800 	and	r23, r5, r23
    7c3c:	82d6b800 	or	r22, r22, r23
    7c40:	14760000 	rsubk	r3, r22, r0
    7c44:	82c3b000 	or	r22, r3, r22
    7c48:	10c0b000 	addk	r6, r0, r22
    7c4c:	90d60041 	srl	r6, r22
    7c50:	90c60041 	srl	r6, r6
    7c54:	90c60041 	srl	r6, r6
    7c58:	90c60041 	srl	r6, r6
    7c5c:	90c60041 	srl	r6, r6
    7c60:	90c60041 	srl	r6, r6
    7c64:	90c60041 	srl	r6, r6
    7c68:	90c60041 	srl	r6, r6
    7c6c:	90c60041 	srl	r6, r6
    7c70:	90c60041 	srl	r6, r6
    7c74:	90c60041 	srl	r6, r6
    7c78:	90c60041 	srl	r6, r6
    7c7c:	90c60041 	srl	r6, r6
    7c80:	90c60041 	srl	r6, r6
    7c84:	90c60041 	srl	r6, r6
    7c88:	90c60041 	srl	r6, r6
    7c8c:	90c60041 	srl	r6, r6
    7c90:	90c60041 	srl	r6, r6
    7c94:	90c60041 	srl	r6, r6
    7c98:	90c60041 	srl	r6, r6
    7c9c:	90c60041 	srl	r6, r6
    7ca0:	90c60041 	srl	r6, r6
    7ca4:	90c60041 	srl	r6, r6
    7ca8:	90c60041 	srl	r6, r6
    7cac:	90c60041 	srl	r6, r6
    7cb0:	90c60041 	srl	r6, r6
    7cb4:	90c60041 	srl	r6, r6
    7cb8:	90c60041 	srl	r6, r6
    7cbc:	90c60041 	srl	r6, r6
    7cc0:	90c60041 	srl	r6, r6
    7cc4:	90c60041 	srl	r6, r6
    7cc8:	10e00000 	addk	r7, r0, r0
    7ccc:	8086c000 	or	r4, r6, r24
    7cd0:	80a7c800 	or	r5, r7, r25
    7cd4:	30e00000 	addik	r7, r0, 0
    7cd8:	30c000ff 	addik	r6, r0, 255
    7cdc:	84c43000 	and	r6, r4, r6
    7ce0:	a8660080 	xori	r3, r6, 128
    7ce4:	be230124 	bneid	r3, 292		// 7e08
    7ce8:	84e53800 	and	r7, r5, r7
    7cec:	bc27011c 	bnei	r7, 284		// 7e08
    7cf0:	30e00000 	addik	r7, r0, 0
    7cf4:	30c00100 	addik	r6, r0, 256
    7cf8:	84c43000 	and	r6, r4, r6
    7cfc:	84e53800 	and	r7, r5, r7
    7d00:	80c63800 	or	r6, r6, r7
    7d04:	bc060014 	beqi	r6, 20		// 7d18
    7d08:	30e00000 	addik	r7, r0, 0
    7d0c:	30c00080 	addik	r6, r0, 128	// 80 <_exit>
    7d10:	00843000 	add	r4, r4, r6
    7d14:	08a53800 	addc	r5, r5, r7
    7d18:	90650021 	src	r3, r5
    7d1c:	90630021 	src	r3, r3
    7d20:	90630021 	src	r3, r3
    7d24:	90630021 	src	r3, r3
    7d28:	90630021 	src	r3, r3
    7d2c:	90630021 	src	r3, r3
    7d30:	90630021 	src	r3, r3
    7d34:	90630021 	src	r3, r3
    7d38:	90630021 	src	r3, r3
    7d3c:	b000ff00 	imm	-256
    7d40:	a4630000 	andi	r3, r3, 0
    7d44:	10c02000 	addk	r6, r0, r4
    7d48:	90c40041 	srl	r6, r4
    7d4c:	90c60041 	srl	r6, r6
    7d50:	90c60041 	srl	r6, r6
    7d54:	90c60041 	srl	r6, r6
    7d58:	90c60041 	srl	r6, r6
    7d5c:	90c60041 	srl	r6, r6
    7d60:	90c60041 	srl	r6, r6
    7d64:	90c60041 	srl	r6, r6
    7d68:	80c33000 	or	r6, r3, r6
    7d6c:	b0000fff 	imm	4095
    7d70:	3060ffff 	addik	r3, r0, -1
    7d74:	b000000f 	imm	15
    7d78:	3160ffff 	addik	r11, r0, -1
    7d7c:	3140ffff 	addik	r10, r0, -1
    7d80:	10e02800 	addk	r7, r0, r5
    7d84:	90e50041 	srl	r7, r5
    7d88:	90e70041 	srl	r7, r7
    7d8c:	90e70041 	srl	r7, r7
    7d90:	90e70041 	srl	r7, r7
    7d94:	90e70041 	srl	r7, r7
    7d98:	90e70041 	srl	r7, r7
    7d9c:	90e70041 	srl	r7, r7
    7da0:	90e70041 	srl	r7, r7
    7da4:	31200000 	addik	r9, r0, 0
    7da8:	31000001 	addik	r8, r0, 1
    7dac:	85465000 	and	r10, r6, r10
    7db0:	16451803 	cmpu	r18, r5, r3
    7db4:	be520010 	bltid	r18, 16		// 7dc4
    7db8:	85675800 	and	r11, r7, r11
    7dbc:	31200000 	addik	r9, r0, 0
    7dc0:	31000000 	addik	r8, r0, 0
    7dc4:	90e80021 	src	r7, r8
    7dc8:	90e70021 	src	r7, r7
    7dcc:	90e70021 	src	r7, r7
    7dd0:	90e70021 	src	r7, r7
    7dd4:	90e70021 	src	r7, r7
    7dd8:	90e70021 	src	r7, r7
    7ddc:	90e70021 	src	r7, r7
    7de0:	90e70021 	src	r7, r7
    7de4:	90e70021 	src	r7, r7
    7de8:	90e70021 	src	r7, r7
    7dec:	90e70021 	src	r7, r7
    7df0:	90e70021 	src	r7, r7
    7df4:	90e70021 	src	r7, r7
    7df8:	b000fff0 	imm	-16
    7dfc:	a4e70000 	andi	r7, r7, 0
    7e00:	b810fce0 	brid	-800		// 7ae0
    7e04:	10c00000 	addk	r6, r0, r0
    7e08:	30e00000 	addik	r7, r0, 0
    7e0c:	30c0007f 	addik	r6, r0, 127
    7e10:	00843000 	add	r4, r4, r6
    7e14:	08a53800 	addc	r5, r5, r7
    7e18:	b800ff00 	bri	-256		// 7d18

00007e1c <__unpack_d>:
    7e1c:	e9050000 	lwi	r8, r5, 0
    7e20:	e9250004 	lwi	r9, r5, 4
    7e24:	10804800 	addk	r4, r0, r9
    7e28:	90890041 	srl	r4, r9
    7e2c:	90840041 	srl	r4, r4
    7e30:	90840041 	srl	r4, r4
    7e34:	90840041 	srl	r4, r4
    7e38:	90840041 	srl	r4, r4
    7e3c:	90840041 	srl	r4, r4
    7e40:	90840041 	srl	r4, r4
    7e44:	90840041 	srl	r4, r4
    7e48:	90840041 	srl	r4, r4
    7e4c:	90840041 	srl	r4, r4
    7e50:	90840041 	srl	r4, r4
    7e54:	90840041 	srl	r4, r4
    7e58:	90840041 	srl	r4, r4
    7e5c:	90840041 	srl	r4, r4
    7e60:	90840041 	srl	r4, r4
    7e64:	90840041 	srl	r4, r4
    7e68:	90840041 	srl	r4, r4
    7e6c:	90840041 	srl	r4, r4
    7e70:	90840041 	srl	r4, r4
    7e74:	90840041 	srl	r4, r4
    7e78:	90840041 	srl	r4, r4
    7e7c:	90840041 	srl	r4, r4
    7e80:	90840041 	srl	r4, r4
    7e84:	90840041 	srl	r4, r4
    7e88:	90840041 	srl	r4, r4
    7e8c:	90840041 	srl	r4, r4
    7e90:	90840041 	srl	r4, r4
    7e94:	90840041 	srl	r4, r4
    7e98:	90840041 	srl	r4, r4
    7e9c:	90840041 	srl	r4, r4
    7ea0:	90840041 	srl	r4, r4
    7ea4:	10604800 	addk	r3, r0, r9
    7ea8:	90690041 	srl	r3, r9
    7eac:	90630041 	srl	r3, r3
    7eb0:	90630041 	srl	r3, r3
    7eb4:	90630041 	srl	r3, r3
    7eb8:	90630041 	srl	r3, r3
    7ebc:	90630041 	srl	r3, r3
    7ec0:	90630041 	srl	r3, r3
    7ec4:	90630041 	srl	r3, r3
    7ec8:	90630041 	srl	r3, r3
    7ecc:	90630041 	srl	r3, r3
    7ed0:	90630041 	srl	r3, r3
    7ed4:	90630041 	srl	r3, r3
    7ed8:	90630041 	srl	r3, r3
    7edc:	90630041 	srl	r3, r3
    7ee0:	90630041 	srl	r3, r3
    7ee4:	90630041 	srl	r3, r3
    7ee8:	90630041 	srl	r3, r3
    7eec:	90630041 	srl	r3, r3
    7ef0:	90630041 	srl	r3, r3
    7ef4:	90630041 	srl	r3, r3
    7ef8:	f8860004 	swi	r4, r6, 4
    7efc:	a46307ff 	andi	r3, r3, 2047
    7f00:	b000000f 	imm	15
    7f04:	30a0ffff 	addik	r5, r0, -1
    7f08:	3080ffff 	addik	r4, r0, -1
    7f0c:	84882000 	and	r4, r8, r4
    7f10:	be23017c 	bneid	r3, 380		// 808c
    7f14:	84a92800 	and	r5, r9, r5
    7f18:	80642800 	or	r3, r4, r5
    7f1c:	be03025c 	beqid	r3, 604		// 8178
    7f20:	30e00003 	addik	r7, r0, 3
    7f24:	b0000fff 	imm	4095
    7f28:	3100ffff 	addik	r8, r0, -1
    7f2c:	10602800 	addk	r3, r0, r5
    7f30:	10652800 	addk	r3, r5, r5
    7f34:	10631800 	addk	r3, r3, r3
    7f38:	10631800 	addk	r3, r3, r3
    7f3c:	10631800 	addk	r3, r3, r3
    7f40:	10631800 	addk	r3, r3, r3
    7f44:	10631800 	addk	r3, r3, r3
    7f48:	10631800 	addk	r3, r3, r3
    7f4c:	10631800 	addk	r3, r3, r3
    7f50:	f8e60000 	swi	r7, r6, 0
    7f54:	11202000 	addk	r9, r0, r4
    7f58:	91240041 	srl	r9, r4
    7f5c:	91290041 	srl	r9, r9
    7f60:	91290041 	srl	r9, r9
    7f64:	91290041 	srl	r9, r9
    7f68:	91290041 	srl	r9, r9
    7f6c:	91290041 	srl	r9, r9
    7f70:	91290041 	srl	r9, r9
    7f74:	91290041 	srl	r9, r9
    7f78:	91290041 	srl	r9, r9
    7f7c:	91290041 	srl	r9, r9
    7f80:	91290041 	srl	r9, r9
    7f84:	91290041 	srl	r9, r9
    7f88:	91290041 	srl	r9, r9
    7f8c:	91290041 	srl	r9, r9
    7f90:	91290041 	srl	r9, r9
    7f94:	91290041 	srl	r9, r9
    7f98:	91290041 	srl	r9, r9
    7f9c:	91290041 	srl	r9, r9
    7fa0:	91290041 	srl	r9, r9
    7fa4:	91290041 	srl	r9, r9
    7fa8:	91290041 	srl	r9, r9
    7fac:	91290041 	srl	r9, r9
    7fb0:	91290041 	srl	r9, r9
    7fb4:	91290041 	srl	r9, r9
    7fb8:	30e0fc02 	addik	r7, r0, -1022
    7fbc:	80691800 	or	r3, r9, r3
    7fc0:	10a02000 	addk	r5, r0, r4
    7fc4:	10a42000 	addk	r5, r4, r4
    7fc8:	10a52800 	addk	r5, r5, r5
    7fcc:	10a52800 	addk	r5, r5, r5
    7fd0:	10a52800 	addk	r5, r5, r5
    7fd4:	10a52800 	addk	r5, r5, r5
    7fd8:	10a52800 	addk	r5, r5, r5
    7fdc:	10a52800 	addk	r5, r5, r5
    7fe0:	10a52800 	addk	r5, r5, r5
    7fe4:	10631800 	addk	r3, r3, r3
    7fe8:	10802800 	addk	r4, r0, r5
    7fec:	90850041 	srl	r4, r5
    7ff0:	90840041 	srl	r4, r4
    7ff4:	90840041 	srl	r4, r4
    7ff8:	90840041 	srl	r4, r4
    7ffc:	90840041 	srl	r4, r4
    8000:	90840041 	srl	r4, r4
    8004:	90840041 	srl	r4, r4
    8008:	90840041 	srl	r4, r4
    800c:	90840041 	srl	r4, r4
    8010:	90840041 	srl	r4, r4
    8014:	90840041 	srl	r4, r4
    8018:	90840041 	srl	r4, r4
    801c:	90840041 	srl	r4, r4
    8020:	90840041 	srl	r4, r4
    8024:	90840041 	srl	r4, r4
    8028:	90840041 	srl	r4, r4
    802c:	90840041 	srl	r4, r4
    8030:	90840041 	srl	r4, r4
    8034:	90840041 	srl	r4, r4
    8038:	90840041 	srl	r4, r4
    803c:	90840041 	srl	r4, r4
    8040:	90840041 	srl	r4, r4
    8044:	90840041 	srl	r4, r4
    8048:	90840041 	srl	r4, r4
    804c:	90840041 	srl	r4, r4
    8050:	90840041 	srl	r4, r4
    8054:	90840041 	srl	r4, r4
    8058:	90840041 	srl	r4, r4
    805c:	90840041 	srl	r4, r4
    8060:	90840041 	srl	r4, r4
    8064:	90840041 	srl	r4, r4
    8068:	80641800 	or	r3, r4, r3
    806c:	10a52800 	addk	r5, r5, r5
    8070:	16434003 	cmpu	r18, r3, r8
    8074:	beb2ff70 	bgeid	r18, -144		// 7fe4
    8078:	30e7ffff 	addik	r7, r7, -1
    807c:	f8e60008 	swi	r7, r6, 8
    8080:	f8a6000c 	swi	r5, r6, 12
    8084:	b60f0008 	rtsd	r15, 8
    8088:	f8660010 	swi	r3, r6, 16
    808c:	a8e307ff 	xori	r7, r3, 2047
    8090:	be0700f4 	beqid	r7, 244		// 8184
    8094:	3063fc01 	addik	r3, r3, -1023
    8098:	10e02000 	addk	r7, r0, r4
    809c:	90e40041 	srl	r7, r4
    80a0:	90e70041 	srl	r7, r7
    80a4:	90e70041 	srl	r7, r7
    80a8:	90e70041 	srl	r7, r7
    80ac:	90e70041 	srl	r7, r7
    80b0:	90e70041 	srl	r7, r7
    80b4:	90e70041 	srl	r7, r7
    80b8:	90e70041 	srl	r7, r7
    80bc:	90e70041 	srl	r7, r7
    80c0:	90e70041 	srl	r7, r7
    80c4:	90e70041 	srl	r7, r7
    80c8:	90e70041 	srl	r7, r7
    80cc:	90e70041 	srl	r7, r7
    80d0:	90e70041 	srl	r7, r7
    80d4:	90e70041 	srl	r7, r7
    80d8:	90e70041 	srl	r7, r7
    80dc:	90e70041 	srl	r7, r7
    80e0:	90e70041 	srl	r7, r7
    80e4:	90e70041 	srl	r7, r7
    80e8:	90e70041 	srl	r7, r7
    80ec:	90e70041 	srl	r7, r7
    80f0:	90e70041 	srl	r7, r7
    80f4:	90e70041 	srl	r7, r7
    80f8:	90e70041 	srl	r7, r7
    80fc:	11202800 	addk	r9, r0, r5
    8100:	11252800 	addk	r9, r5, r5
    8104:	11294800 	addk	r9, r9, r9
    8108:	11294800 	addk	r9, r9, r9
    810c:	11294800 	addk	r9, r9, r9
    8110:	11294800 	addk	r9, r9, r9
    8114:	11294800 	addk	r9, r9, r9
    8118:	11294800 	addk	r9, r9, r9
    811c:	11294800 	addk	r9, r9, r9
    8120:	11002000 	addk	r8, r0, r4
    8124:	11042000 	addk	r8, r4, r4
    8128:	11084000 	addk	r8, r8, r8
    812c:	11084000 	addk	r8, r8, r8
    8130:	11084000 	addk	r8, r8, r8
    8134:	11084000 	addk	r8, r8, r8
    8138:	11084000 	addk	r8, r8, r8
    813c:	11084000 	addk	r8, r8, r8
    8140:	11084000 	addk	r8, r8, r8
    8144:	81274800 	or	r9, r7, r9
    8148:	b0001000 	imm	4096
    814c:	30a00000 	addik	r5, r0, 0
    8150:	30800000 	addik	r4, r0, 0
    8154:	30e00003 	addik	r7, r0, 3
    8158:	81082000 	or	r8, r8, r4
    815c:	81292800 	or	r9, r9, r5
    8160:	f8e60000 	swi	r7, r6, 0
    8164:	f8660008 	swi	r3, r6, 8
    8168:	f906000c 	swi	r8, r6, 12
    816c:	f9260010 	swi	r9, r6, 16
    8170:	b60f0008 	rtsd	r15, 8
    8174:	80000000 	or	r0, r0, r0
    8178:	30600002 	addik	r3, r0, 2
    817c:	b60f0008 	rtsd	r15, 8
    8180:	f8660000 	swi	r3, r6, 0
    8184:	80642800 	or	r3, r4, r5
    8188:	bc030038 	beqi	r3, 56		// 81c0
    818c:	b0000008 	imm	8
    8190:	31200000 	addik	r9, r0, 0
    8194:	31000000 	addik	r8, r0, 0
    8198:	85044000 	and	r8, r4, r8
    819c:	85254800 	and	r9, r5, r9
    81a0:	81084800 	or	r8, r8, r9
    81a4:	be080028 	beqid	r8, 40		// 81cc
    81a8:	30e00001 	addik	r7, r0, 1
    81ac:	f8e60000 	swi	r7, r6, 0
    81b0:	f886000c 	swi	r4, r6, 12
    81b4:	f8a60010 	swi	r5, r6, 16
    81b8:	b60f0008 	rtsd	r15, 8
    81bc:	80000000 	or	r0, r0, r0
    81c0:	30600004 	addik	r3, r0, 4
    81c4:	b60f0008 	rtsd	r15, 8
    81c8:	f8660000 	swi	r3, r6, 0
    81cc:	b810ffe4 	brid	-28		// 81b0
    81d0:	f9060000 	swi	r8, r6, 0

000081d4 <__fpcmp_parts_d>:
    81d4:	e8850000 	lwi	r4, r5, 0
    81d8:	30600001 	addik	r3, r0, 1
    81dc:	16441803 	cmpu	r18, r4, r3
    81e0:	beb20048 	bgeid	r18, 72		// 8228
    81e4:	11230000 	addk	r9, r3, r0
    81e8:	e8e60000 	lwi	r7, r6, 0
    81ec:	16471803 	cmpu	r18, r7, r3
    81f0:	beb20038 	bgeid	r18, 56		// 8228
    81f4:	a9040004 	xori	r8, r4, 4
    81f8:	be080038 	beqid	r8, 56		// 8230
    81fc:	a9070004 	xori	r8, r7, 4
    8200:	be080050 	beqid	r8, 80		// 8250
    8204:	a8840002 	xori	r4, r4, 2
    8208:	bc040040 	beqi	r4, 64		// 8248
    820c:	a8e70002 	xori	r7, r7, 2
    8210:	be070014 	beqid	r7, 20		// 8224
    8214:	e8850004 	lwi	r4, r5, 4
    8218:	e8e60004 	lwi	r7, r6, 4
    821c:	88e43800 	xor	r7, r4, r7
    8220:	bc070044 	beqi	r7, 68		// 8264
    8224:	bc24001c 	bnei	r4, 28		// 8240
    8228:	b60f0008 	rtsd	r15, 8
    822c:	80000000 	or	r0, r0, r0
    8230:	a8e70004 	xori	r7, r7, 4
    8234:	bc0700a8 	beqi	r7, 168		// 82dc
    8238:	e8850004 	lwi	r4, r5, 4
    823c:	bc04ffec 	beqi	r4, -20		// 8228
    8240:	b60f0008 	rtsd	r15, 8
    8244:	3060ffff 	addik	r3, r0, -1
    8248:	a8670002 	xori	r3, r7, 2
    824c:	bc03ffdc 	beqi	r3, -36		// 8228
    8250:	e8860004 	lwi	r4, r6, 4
    8254:	be04ffd4 	beqid	r4, -44		// 8228
    8258:	3060ffff 	addik	r3, r0, -1
    825c:	b60f0008 	rtsd	r15, 8
    8260:	10690000 	addk	r3, r9, r0
    8264:	e9050008 	lwi	r8, r5, 8
    8268:	e8e60008 	lwi	r7, r6, 8
    826c:	16483801 	cmp	r18, r8, r7
    8270:	bc52ffb4 	blti	r18, -76		// 8224
    8274:	16474001 	cmp	r18, r7, r8
    8278:	bc520040 	blti	r18, 64		// 82b8
    827c:	e8650010 	lwi	r3, r5, 16
    8280:	e8e60010 	lwi	r7, r6, 16
    8284:	e8a5000c 	lwi	r5, r5, 12
    8288:	16433803 	cmpu	r18, r3, r7
    828c:	be52003c 	bltid	r18, 60		// 82c8
    8290:	e8c6000c 	lwi	r6, r6, 12
    8294:	89033800 	xor	r8, r3, r7
    8298:	bc28000c 	bnei	r8, 12		// 82a4
    829c:	16453003 	cmpu	r18, r5, r6
    82a0:	bc520028 	blti	r18, 40		// 82c8
    82a4:	16471803 	cmpu	r18, r7, r3
    82a8:	bc520010 	blti	r18, 16		// 82b8
    82ac:	bc280028 	bnei	r8, 40		// 82d4
    82b0:	16462803 	cmpu	r18, r6, r5
    82b4:	bcb20020 	bgei	r18, 32		// 82d4
    82b8:	be04ff70 	beqid	r4, -144		// 8228
    82bc:	3060ffff 	addik	r3, r0, -1
    82c0:	b60f0008 	rtsd	r15, 8
    82c4:	30600001 	addik	r3, r0, 1
    82c8:	be04ff60 	beqid	r4, -160		// 8228
    82cc:	30600001 	addik	r3, r0, 1
    82d0:	b800ff70 	bri	-144		// 8240
    82d4:	b60f0008 	rtsd	r15, 8
    82d8:	10600000 	addk	r3, r0, r0
    82dc:	e8860004 	lwi	r4, r6, 4
    82e0:	e8650004 	lwi	r3, r5, 4
    82e4:	b60f0008 	rtsd	r15, 8
    82e8:	14632000 	rsubk	r3, r3, r4

000082ec <__lshrdi3>:
    82ec:	10650000 	addk	r3, r5, r0
    82f0:	be070074 	beqid	r7, 116		// 8364
    82f4:	10860000 	addk	r4, r6, r0
    82f8:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
    82fc:	14a73000 	rsubk	r5, r7, r6
    8300:	be65006c 	bleid	r5, 108		// 836c
    8304:	10c00000 	addk	r6, r0, r0
    8308:	a645001f 	andi	r18, r5, 31
    830c:	10c02000 	addk	r6, r0, r4
    8310:	be120014 	beqid	r18, 20		// 8324
    8314:	10c60000 	addk	r6, r6, r0
    8318:	3252ffff 	addik	r18, r18, -1
    831c:	be32fffc 	bneid	r18, -4		// 8318
    8320:	10c63000 	addk	r6, r6, r6
    8324:	a647001f 	andi	r18, r7, 31
    8328:	10a01800 	addk	r5, r0, r3
    832c:	be120014 	beqid	r18, 20		// 8340
    8330:	10a50000 	addk	r5, r5, r0
    8334:	3252ffff 	addik	r18, r18, -1
    8338:	be32fffc 	bneid	r18, -4		// 8334
    833c:	90a50041 	srl	r5, r5
    8340:	80662800 	or	r3, r6, r5
    8344:	a647001f 	andi	r18, r7, 31
    8348:	10c02000 	addk	r6, r0, r4
    834c:	be120014 	beqid	r18, 20		// 8360
    8350:	10c60000 	addk	r6, r6, r0
    8354:	3252ffff 	addik	r18, r18, -1
    8358:	be32fffc 	bneid	r18, -4		// 8354
    835c:	90c60041 	srl	r6, r6
    8360:	10860000 	addk	r4, r6, r0
    8364:	b60f0008 	rtsd	r15, 8
    8368:	80000000 	or	r0, r0, r0
    836c:	14a50000 	rsubk	r5, r5, r0
    8370:	a645001f 	andi	r18, r5, 31
    8374:	10602000 	addk	r3, r0, r4
    8378:	be120014 	beqid	r18, 20		// 838c
    837c:	10630000 	addk	r3, r3, r0
    8380:	3252ffff 	addik	r18, r18, -1
    8384:	be32fffc 	bneid	r18, -4		// 8380
    8388:	90630041 	srl	r3, r3
    838c:	b60f0008 	rtsd	r15, 8
    8390:	10860000 	addk	r4, r6, r0

00008394 <__ashldi3>:
    8394:	10650000 	addk	r3, r5, r0
    8398:	be070074 	beqid	r7, 116		// 840c
    839c:	10860000 	addk	r4, r6, r0
    83a0:	30c00020 	addik	r6, r0, 32	// 20 <_vector_hw_exception>
    83a4:	14a73000 	rsubk	r5, r7, r6
    83a8:	be65006c 	bleid	r5, 108		// 8414
    83ac:	10c00000 	addk	r6, r0, r0
    83b0:	a645001f 	andi	r18, r5, 31
    83b4:	10c01800 	addk	r6, r0, r3
    83b8:	be120014 	beqid	r18, 20		// 83cc
    83bc:	10c60000 	addk	r6, r6, r0
    83c0:	3252ffff 	addik	r18, r18, -1
    83c4:	be32fffc 	bneid	r18, -4		// 83c0
    83c8:	90c60041 	srl	r6, r6
    83cc:	a647001f 	andi	r18, r7, 31
    83d0:	10a02000 	addk	r5, r0, r4
    83d4:	be120014 	beqid	r18, 20		// 83e8
    83d8:	10a50000 	addk	r5, r5, r0
    83dc:	3252ffff 	addik	r18, r18, -1
    83e0:	be32fffc 	bneid	r18, -4		// 83dc
    83e4:	10a52800 	addk	r5, r5, r5
    83e8:	80862800 	or	r4, r6, r5
    83ec:	a647001f 	andi	r18, r7, 31
    83f0:	10c01800 	addk	r6, r0, r3
    83f4:	be120014 	beqid	r18, 20		// 8408
    83f8:	10c60000 	addk	r6, r6, r0
    83fc:	3252ffff 	addik	r18, r18, -1
    8400:	be32fffc 	bneid	r18, -4		// 83fc
    8404:	10c63000 	addk	r6, r6, r6
    8408:	10660000 	addk	r3, r6, r0
    840c:	b60f0008 	rtsd	r15, 8
    8410:	80000000 	or	r0, r0, r0
    8414:	14a50000 	rsubk	r5, r5, r0
    8418:	a645001f 	andi	r18, r5, 31
    841c:	10801800 	addk	r4, r0, r3
    8420:	be120014 	beqid	r18, 20		// 8434
    8424:	10840000 	addk	r4, r4, r0
    8428:	3252ffff 	addik	r18, r18, -1
    842c:	be32fffc 	bneid	r18, -4		// 8428
    8430:	10842000 	addk	r4, r4, r4
    8434:	b60f0008 	rtsd	r15, 8
    8438:	10660000 	addk	r3, r6, r0

0000843c <exit>:
    843c:	3021ffe0 	addik	r1, r1, -32
    8440:	10c00000 	addk	r6, r0, r0
    8444:	fa61001c 	swi	r19, r1, 28
    8448:	f9e10000 	swi	r15, r1, 0
    844c:	b0000000 	imm	0
    8450:	b9f400b0 	brlid	r15, 176	// 8500 <__call_exitprocs>
    8454:	12650000 	addk	r19, r5, r0
    8458:	b0000000 	imm	0
    845c:	e8809074 	lwi	r4, r0, -28556	// 9074 <_global_impure_ptr>
    8460:	e8640028 	lwi	r3, r4, 40
    8464:	bc03000c 	beqi	r3, 12		// 8470
    8468:	99fc1800 	brald	r15, r3
    846c:	10a40000 	addk	r5, r4, r0
    8470:	b000ffff 	imm	-1
    8474:	b9f47c0c 	brlid	r15, 31756	// 80 <_exit>
    8478:	10b30000 	addk	r5, r19, r0

0000847c <strlen>:
    847c:	a4650003 	andi	r3, r5, 3
    8480:	be230054 	bneid	r3, 84		// 84d4
    8484:	10850000 	addk	r4, r5, r0
    8488:	e8650000 	lwi	r3, r5, 0
    848c:	b000fefe 	imm	-258
    8490:	3083feff 	addik	r4, r3, -257
    8494:	a863ffff 	xori	r3, r3, -1
    8498:	84641800 	and	r3, r4, r3
    849c:	b0008080 	imm	-32640
    84a0:	a4638080 	andi	r3, r3, -32640
    84a4:	be230054 	bneid	r3, 84		// 84f8
    84a8:	10c50000 	addk	r6, r5, r0
    84ac:	e8e60004 	lwi	r7, r6, 4
    84b0:	30860004 	addik	r4, r6, 4
    84b4:	b000fefe 	imm	-258
    84b8:	3107feff 	addik	r8, r7, -257
    84bc:	a8e7ffff 	xori	r7, r7, -1
    84c0:	84e83800 	and	r7, r8, r7
    84c4:	b0008080 	imm	-32640
    84c8:	a4e78080 	andi	r7, r7, -32640
    84cc:	be07ffe0 	beqid	r7, -32		// 84ac
    84d0:	10c40000 	addk	r6, r4, r0
    84d4:	e0640000 	lbui	r3, r4, 0
    84d8:	be030018 	beqid	r3, 24		// 84f0
    84dc:	10640000 	addk	r3, r4, r0
    84e0:	e0c40001 	lbui	r6, r4, 1
    84e4:	30640001 	addik	r3, r4, 1
    84e8:	be26fff8 	bneid	r6, -8		// 84e0
    84ec:	10830000 	addk	r4, r3, r0
    84f0:	b60f0008 	rtsd	r15, 8
    84f4:	14651800 	rsubk	r3, r5, r3
    84f8:	b810ffdc 	brid	-36		// 84d4
    84fc:	10850000 	addk	r4, r5, r0

00008500 <__call_exitprocs>:
    8500:	3021ffb8 	addik	r1, r1, -72
    8504:	fb810038 	swi	r28, r1, 56
    8508:	b0000000 	imm	0
    850c:	eb809074 	lwi	r28, r0, -28556	// 9074 <_global_impure_ptr>
    8510:	fb21002c 	swi	r25, r1, 44
    8514:	fbc10040 	swi	r30, r1, 64
    8518:	fbe10044 	swi	r31, r1, 68
    851c:	13c50000 	addk	r30, r5, r0
    8520:	13260000 	addk	r25, r6, r0
    8524:	b0000000 	imm	0
    8528:	33e00000 	addik	r31, r0, 0
    852c:	fb610034 	swi	r27, r1, 52
    8530:	fba1003c 	swi	r29, r1, 60
    8534:	f9e10000 	swi	r15, r1, 0
    8538:	fa61001c 	swi	r19, r1, 28
    853c:	fac10020 	swi	r22, r1, 32
    8540:	fae10024 	swi	r23, r1, 36
    8544:	fb010028 	swi	r24, r1, 40
    8548:	fb410030 	swi	r26, r1, 48
    854c:	33bc0048 	addik	r29, r28, 72
    8550:	33600001 	addik	r27, r0, 1
    8554:	eadc0048 	lwi	r22, r28, 72
    8558:	be1600d8 	beqid	r22, 216		// 8630
    855c:	135d0000 	addk	r26, r29, r0
    8560:	e8760004 	lwi	r3, r22, 4
    8564:	3263ffff 	addik	r19, r3, -1
    8568:	be5300c4 	bltid	r19, 196		// 862c
    856c:	eaf60088 	lwi	r23, r22, 136
    8570:	bc19012c 	beqi	r25, 300		// 869c
    8574:	bc370010 	bnei	r23, 16		// 8584
    8578:	b80000b4 	bri	180		// 862c
    857c:	3273ffff 	addik	r19, r19, -1
    8580:	bc5300ac 	blti	r19, 172		// 862c
    8584:	30730020 	addik	r3, r19, 32
    8588:	10631800 	addk	r3, r3, r3
    858c:	10631800 	addk	r3, r3, r3
    8590:	c863b800 	lw	r3, r3, r23
    8594:	8863c800 	xor	r3, r3, r25
    8598:	be23ffe4 	bneid	r3, -28		// 857c
    859c:	30930002 	addik	r4, r19, 2
    85a0:	eb160004 	lwi	r24, r22, 4
    85a4:	10842000 	addk	r4, r4, r4
    85a8:	30d8ffff 	addik	r6, r24, -1
    85ac:	10e42000 	addk	r7, r4, r4
    85b0:	89069800 	xor	r8, r6, r19
    85b4:	be0800c4 	beqid	r8, 196		// 8678
    85b8:	c887b000 	lw	r4, r7, r22
    85bc:	d867b000 	sw	r3, r7, r22
    85c0:	bc04ffbc 	beqi	r4, -68		// 857c
    85c4:	e8d70100 	lwi	r6, r23, 256
    85c8:	a653001f 	andi	r18, r19, 31
    85cc:	1060d800 	addk	r3, r0, r27
    85d0:	be120014 	beqid	r18, 20		// 85e4
    85d4:	10630000 	addk	r3, r3, r0
    85d8:	3252ffff 	addik	r18, r18, -1
    85dc:	be32fffc 	bneid	r18, -4		// 85d8
    85e0:	10631800 	addk	r3, r3, r3
    85e4:	84c33000 	and	r6, r3, r6
    85e8:	bc060080 	beqi	r6, 128		// 8668
    85ec:	e8b70104 	lwi	r5, r23, 260
    85f0:	84632800 	and	r3, r3, r5
    85f4:	be030090 	beqid	r3, 144		// 8684
    85f8:	10739800 	addk	r3, r19, r19
    85fc:	10631800 	addk	r3, r3, r3
    8600:	99fc2000 	brald	r15, r4
    8604:	c8a3b800 	lw	r5, r3, r23
    8608:	e8760004 	lwi	r3, r22, 4
    860c:	8b03c000 	xor	r24, r3, r24
    8610:	bc38ff44 	bnei	r24, -188		// 8554
    8614:	e87a0000 	lwi	r3, r26, 0
    8618:	8863b000 	xor	r3, r3, r22
    861c:	be23ff38 	bneid	r3, -200		// 8554
    8620:	3273ffff 	addik	r19, r19, -1
    8624:	beb3ff64 	bgeid	r19, -156		// 8588
    8628:	30730020 	addik	r3, r19, 32
    862c:	bc3f01b8 	bnei	r31, 440		// 87e4
    8630:	e9e10000 	lwi	r15, r1, 0
    8634:	ea61001c 	lwi	r19, r1, 28
    8638:	eac10020 	lwi	r22, r1, 32
    863c:	eae10024 	lwi	r23, r1, 36
    8640:	eb010028 	lwi	r24, r1, 40
    8644:	eb21002c 	lwi	r25, r1, 44
    8648:	eb410030 	lwi	r26, r1, 48
    864c:	eb610034 	lwi	r27, r1, 52
    8650:	eb810038 	lwi	r28, r1, 56
    8654:	eba1003c 	lwi	r29, r1, 60
    8658:	ebc10040 	lwi	r30, r1, 64
    865c:	ebe10044 	lwi	r31, r1, 68
    8660:	b60f0008 	rtsd	r15, 8
    8664:	30210048 	addik	r1, r1, 72
    8668:	99fc2000 	brald	r15, r4
    866c:	80000000 	or	r0, r0, r0
    8670:	b810ff9c 	brid	-100		// 860c
    8674:	e8760004 	lwi	r3, r22, 4
    8678:	f8d60004 	swi	r6, r22, 4
    867c:	b810ff44 	brid	-188		// 85c0
    8680:	13060000 	addk	r24, r6, r0
    8684:	10631800 	addk	r3, r3, r3
    8688:	10be0000 	addk	r5, r30, r0
    868c:	99fc2000 	brald	r15, r4
    8690:	c8c3b800 	lw	r6, r3, r23
    8694:	b810ff78 	brid	-136		// 860c
    8698:	e8760004 	lwi	r3, r22, 4
    869c:	be1700fc 	beqid	r23, 252		// 8798
    86a0:	30930002 	addik	r4, r19, 2
    86a4:	13030000 	addk	r24, r3, r0
    86a8:	10842000 	addk	r4, r4, r4
    86ac:	3063ffff 	addik	r3, r3, -1
    86b0:	10842000 	addk	r4, r4, r4
    86b4:	88c39800 	xor	r6, r3, r19
    86b8:	be06009c 	beqid	r6, 156		// 8754
    86bc:	c8e4b000 	lw	r7, r4, r22
    86c0:	d804b000 	sw	r0, r4, r22
    86c4:	bc070064 	beqi	r7, 100		// 8728
    86c8:	e8970100 	lwi	r4, r23, 256
    86cc:	a653001f 	andi	r18, r19, 31
    86d0:	1060d800 	addk	r3, r0, r27
    86d4:	be120014 	beqid	r18, 20		// 86e8
    86d8:	10630000 	addk	r3, r3, r0
    86dc:	3252ffff 	addik	r18, r18, -1
    86e0:	be32fffc 	bneid	r18, -4		// 86dc
    86e4:	10631800 	addk	r3, r3, r3
    86e8:	84832000 	and	r4, r3, r4
    86ec:	bc0400d4 	beqi	r4, 212		// 87c0
    86f0:	e8970104 	lwi	r4, r23, 260
    86f4:	84632000 	and	r3, r3, r4
    86f8:	be2300d8 	bneid	r3, 216		// 87d0
    86fc:	10739800 	addk	r3, r19, r19
    8700:	10631800 	addk	r3, r3, r3
    8704:	10be0000 	addk	r5, r30, r0
    8708:	99fc3800 	brald	r15, r7
    870c:	c8c3b800 	lw	r6, r3, r23
    8710:	e8760004 	lwi	r3, r22, 4
    8714:	8863c000 	xor	r3, r3, r24
    8718:	bc23fe3c 	bnei	r3, -452		// 8554
    871c:	e87a0000 	lwi	r3, r26, 0
    8720:	8863b000 	xor	r3, r3, r22
    8724:	bc23fe30 	bnei	r3, -464		// 8554
    8728:	3273ffff 	addik	r19, r19, -1
    872c:	be53ff00 	bltid	r19, -256		// 862c
    8730:	30930002 	addik	r4, r19, 2
    8734:	e8760004 	lwi	r3, r22, 4
    8738:	10842000 	addk	r4, r4, r4
    873c:	13030000 	addk	r24, r3, r0
    8740:	3063ffff 	addik	r3, r3, -1
    8744:	10842000 	addk	r4, r4, r4
    8748:	88c39800 	xor	r6, r3, r19
    874c:	be26ff74 	bneid	r6, -140		// 86c0
    8750:	c8e4b000 	lw	r7, r4, r22
    8754:	f8760004 	swi	r3, r22, 4
    8758:	b810ff6c 	brid	-148		// 86c4
    875c:	13030000 	addk	r24, r3, r0
    8760:	13030000 	addk	r24, r3, r0
    8764:	f8760004 	swi	r3, r22, 4
    8768:	bc060024 	beqi	r6, 36		// 878c
    876c:	99fc3000 	brald	r15, r6
    8770:	80000000 	or	r0, r0, r0
    8774:	e8760004 	lwi	r3, r22, 4
    8778:	8863c000 	xor	r3, r3, r24
    877c:	bc23fdd8 	bnei	r3, -552		// 8554
    8780:	e87a0000 	lwi	r3, r26, 0
    8784:	8863b000 	xor	r3, r3, r22
    8788:	bc23fdcc 	bnei	r3, -564		// 8554
    878c:	3273ffff 	addik	r19, r19, -1
    8790:	bc53fe9c 	blti	r19, -356		// 862c
    8794:	e8760004 	lwi	r3, r22, 4
    8798:	30930002 	addik	r4, r19, 2
    879c:	13030000 	addk	r24, r3, r0
    87a0:	10842000 	addk	r4, r4, r4
    87a4:	3063ffff 	addik	r3, r3, -1
    87a8:	10842000 	addk	r4, r4, r4
    87ac:	88a39800 	xor	r5, r3, r19
    87b0:	be05ffb0 	beqid	r5, -80		// 8760
    87b4:	c8c4b000 	lw	r6, r4, r22
    87b8:	b810ffb0 	brid	-80		// 8768
    87bc:	d804b000 	sw	r0, r4, r22
    87c0:	99fc3800 	brald	r15, r7
    87c4:	80000000 	or	r0, r0, r0
    87c8:	b810ff4c 	brid	-180		// 8714
    87cc:	e8760004 	lwi	r3, r22, 4
    87d0:	10631800 	addk	r3, r3, r3
    87d4:	99fc3800 	brald	r15, r7
    87d8:	c8a3b800 	lw	r5, r3, r23
    87dc:	b810ff38 	brid	-200		// 8714
    87e0:	e8760004 	lwi	r3, r22, 4
    87e4:	e8760004 	lwi	r3, r22, 4
    87e8:	bc230040 	bnei	r3, 64		// 8828
    87ec:	e8760000 	lwi	r3, r22, 0
    87f0:	bc03003c 	beqi	r3, 60		// 882c
    87f4:	be170014 	beqid	r23, 20		// 8808
    87f8:	f87a0000 	swi	r3, r26, 0
    87fc:	b000ffff 	imm	-1
    8800:	b9f47800 	brlid	r15, 30720	// 0 <_start>
    8804:	10b70000 	addk	r5, r23, r0
    8808:	b000ffff 	imm	-1
    880c:	b9f477f4 	brlid	r15, 30708	// 0 <_start>
    8810:	10b60000 	addk	r5, r22, r0
    8814:	eada0000 	lwi	r22, r26, 0
    8818:	be36fd48 	bneid	r22, -696		// 8560
    881c:	e9e10000 	lwi	r15, r1, 0
    8820:	b810fe18 	brid	-488		// 8638
    8824:	ea61001c 	lwi	r19, r1, 28
    8828:	e8760000 	lwi	r3, r22, 0
    882c:	13560000 	addk	r26, r22, r0
    8830:	b810ffe8 	brid	-24		// 8818
    8834:	12c30000 	addk	r22, r3, r0

00008838 <__do_global_ctors_aux>:
    8838:	b0000000 	imm	0
    883c:	e86088e0 	lwi	r3, r0, -30496	// 88e0 <__CTOR_LIST__>
    8840:	3021ffe0 	addik	r1, r1, -32
    8844:	f9e10000 	swi	r15, r1, 0
    8848:	a883ffff 	xori	r4, r3, -1
    884c:	be040028 	beqid	r4, 40		// 8874
    8850:	fa61001c 	swi	r19, r1, 28
    8854:	b0000000 	imm	0
    8858:	326088e0 	addik	r19, r0, -30496	// 88e0 <__CTOR_LIST__>
    885c:	99fc1800 	brald	r15, r3
    8860:	80000000 	or	r0, r0, r0
    8864:	e873fffc 	lwi	r3, r19, -4
    8868:	a883ffff 	xori	r4, r3, -1
    886c:	be24fff0 	bneid	r4, -16		// 885c
    8870:	3273fffc 	addik	r19, r19, -4
    8874:	e9e10000 	lwi	r15, r1, 0
    8878:	ea61001c 	lwi	r19, r1, 28
    887c:	b60f0008 	rtsd	r15, 8
    8880:	30210020 	addik	r1, r1, 32

Disassembly of section .init:

00008884 <__init>:
    8884:	3021fff8 	addik	r1, r1, -8
    8888:	d9e00800 	sw	r15, r0, r1
    888c:	3160ffff 	addik	r11, r0, -1
    8890:	940bc802 	mts	rshr, r11
    8894:	31600000 	addik	r11, r0, 0
    8898:	940bc800 	mts	rslr, r11
    889c:	b000ffff 	imm	-1
    88a0:	b9f478a4 	brlid	r15, 30884	// 144 <frame_dummy>
    88a4:	80000000 	or	r0, r0, r0
    88a8:	b000ffff 	imm	-1
    88ac:	b9f4ff8c 	brlid	r15, -116	// 8838 <__do_global_ctors_aux>
    88b0:	80000000 	or	r0, r0, r0
    88b4:	c9e00800 	lw	r15, r0, r1
    88b8:	b60f0008 	rtsd	r15, 8
    88bc:	30210008 	addik	r1, r1, 8

Disassembly of section .fini:

000088c0 <__fini>:
    88c0:	3021fff8 	addik	r1, r1, -8
    88c4:	d9e00800 	sw	r15, r0, r1
    88c8:	b000ffff 	imm	-1
    88cc:	b9f477b8 	brlid	r15, 30648	// 84 <__do_global_dtors_aux>
    88d0:	80000000 	or	r0, r0, r0
    88d4:	c9e00800 	lw	r15, r0, r1
    88d8:	b60f0008 	rtsd	r15, 8
    88dc:	30210008 	addik	r1, r1, 8
